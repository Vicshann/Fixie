From: <Saved by Blink>
Snapshot-Content-Location: https://clang.llvm.org/docs/AttributeReference.html
Subject: =?utf-8?Q?Attributes=20in=20Clang=20=E2=80=94=20Clang=2020.0.0git=20docum?=
 =?utf-8?Q?entation?=
Date: Sun, 26 Jan 2025 16:43:56 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----"


------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----
Content-Type: text/html
Content-ID: <frame-A5FE99B818AE1C19FC114460B1973C9F@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/AttributeReference.html

<!DOCTYPE html><html lang=3D"en" data-content_root=3D"./"><head><meta http-=
equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0"><meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-sc=
ale=3D1">

    <title>Attributes in Clang =E2=80=94 Clang 20.0.0git documentation</tit=
le>
    <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://clang.llvm.o=
rg/docs/_static/pygments.css?v=3D649a27d8">
    <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://clang.llvm.o=
rg/docs/_static/haiku.css?v=3De491ac2d">
    <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://clang.llvm.o=
rg/docs/_static/graphviz.css?v=3Deafc0fe6">
   =20
   =20
   =20
    <link rel=3D"index" title=3D"Index" href=3D"https://clang.llvm.org/docs=
/genindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://clang.llvm.org/do=
cs/search.html">
    <link rel=3D"next" title=3D"Diagnostic flags in Clang" href=3D"https://=
clang.llvm.org/docs/DiagnosticsReference.html">
    <link rel=3D"prev" title=3D"Clang command line argument reference" href=
=3D"https://clang.llvm.org/docs/ClangCommandLineReference.html">=20
  </head><body>
      <div class=3D"header" role=3D"banner"><h1 class=3D"heading"><a href=
=3D"https://clang.llvm.org/docs/index.html">
          <span>Clang 20.0.0git documentation</span></a></h1>
        <h2 class=3D"heading"><span>Attributes in Clang</span></h2>
      </div>
      <div class=3D"topnav" role=3D"navigation" aria-label=3D"top navigatio=
n">
     =20
        <p>
        =C2=AB&nbsp;&nbsp;<a href=3D"https://clang.llvm.org/docs/ClangComma=
ndLineReference.html">Clang command line argument reference</a>
        &nbsp;&nbsp;::&nbsp;&nbsp;
        <a class=3D"uplink" href=3D"https://clang.llvm.org/docs/index.html"=
>Contents</a>
        &nbsp;&nbsp;::&nbsp;&nbsp;
        <a href=3D"https://clang.llvm.org/docs/DiagnosticsReference.html">D=
iagnostic flags in Clang</a>&nbsp;&nbsp;=C2=BB
        </p>

      </div>
      <div class=3D"content" role=3D"main">
       =20
       =20
  <section id=3D"attributes-in-clang">
<h1>Attributes in Clang<a class=3D"headerlink" href=3D"https://clang.llvm.o=
rg/docs/AttributeReference.html#attributes-in-clang" title=3D"Link to this =
heading">=C2=B6</a></h1>
<nav class=3D"contents local" id=3D"contents">
<ul class=3D"simple">
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#introduction" id=3D"id440">Introduction</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#aarch64-sme-attributes" id=3D"id441">AArch64 SME At=
tributes</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-agnostic" id=3D"id442">__arm_agnostic</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-in" id=3D"id443">__arm_in</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-inout" id=3D"id444">__arm_inout</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-locally-streaming" id=3D"id445">__arm_locally_s=
treaming</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-new" id=3D"id446">__arm_new</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-out" id=3D"id447">__arm_out</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-preserves" id=3D"id448">__arm_preserves</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-streaming" id=3D"id449">__arm_streaming</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-streaming-compatible" id=3D"id450">__arm_stream=
ing_compatible</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#amd-gpu-attributes" id=3D"id451">AMD GPU Attributes=
</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#amdgpu-flat-work-group-size" id=3D"id452">amdgpu_fl=
at_work_group_size</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#amdgpu-max-num-work-groups" id=3D"id453">amdgpu_max=
_num_work_groups</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#amdgpu-num-sgpr" id=3D"id454">amdgpu_num_sgpr</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#amdgpu-num-vgpr" id=3D"id455">amdgpu_num_vgpr</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#amdgpu-waves-per-eu" id=3D"id456">amdgpu_waves_per_=
eu</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#calling-conventions" id=3D"id457">Calling Conventio=
ns</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#aarch64-sve-pcs" id=3D"id458">aarch64_sve_pcs</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#aarch64-vector-pcs" id=3D"id459">aarch64_vector_pcs=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#fastcall" id=3D"id460">fastcall</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#m68k-rtd" id=3D"id461">m68k_rtd</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ms-abi" id=3D"id462">ms_abi</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pcs" id=3D"id463">pcs</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#preserve-all" id=3D"id464">preserve_all</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#preserve-most" id=3D"id465">preserve_most</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#preserve-none" id=3D"id466">preserve_none</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#regcall" id=3D"id467">regcall</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#regparm" id=3D"id468">regparm</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#riscv-vector-cc-riscv-vector-cc-clang-riscv-vector-=
cc" id=3D"id469">riscv::vector_cc, riscv_vector_cc, clang::riscv_vector_cc<=
/a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#stdcall" id=3D"id470">stdcall</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sysv-abi" id=3D"id471">sysv_abi</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#thiscall" id=3D"id472">thiscall</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#vectorcall" id=3D"id473">vectorcall</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#consumed-annotation-checking" id=3D"id474">Consumed=
 Annotation Checking</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#callable-when" id=3D"id475">callable_when</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#consumable" id=3D"id476">consumable</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#param-typestate" id=3D"id477">param_typestate</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#return-typestate" id=3D"id478">return_typestate</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#set-typestate" id=3D"id479">set_typestate</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#test-typestate" id=3D"id480">test_typestate</a></p>=
</li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#customizing-swift-import" id=3D"id481">Customizing =
Swift Import</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-async" id=3D"id482">swift_async</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-async-error" id=3D"id483">swift_async_error</=
a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-async-name" id=3D"id484">swift_async_name</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-attr" id=3D"id485">swift_attr</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-bridge" id=3D"id486">swift_bridge</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-bridged" id=3D"id487">swift_bridged</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-error" id=3D"id488">swift_error</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-name" id=3D"id489">swift_name</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-newtype" id=3D"id490">swift_newtype</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-objc-members" id=3D"id491">swift_objc_members=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-private" id=3D"id492">swift_private</a></p></=
li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#declaration-attributes" id=3D"id493">Declaration At=
tributes</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#owner" id=3D"id494">Owner</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pointer" id=3D"id495">Pointer</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#single-inheritance-multiple-inheritance-virtual-inh=
eritance" id=3D"id496">__single_inheritance, __multiple_inheritance, __virt=
ual_inheritance</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#asm" id=3D"id497">asm</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#coro-await-elidable" id=3D"id498">coro_await_elidab=
le</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#coro-await-elidable-argument" id=3D"id499">coro_awa=
it_elidable_argument</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#coro-disable-lifetimebound" id=3D"id500">coro_disab=
le_lifetimebound</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#coro-lifetimebound" id=3D"id501">coro_lifetimebound=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#coro-only-destroy-when-complete" id=3D"id502">coro_=
only_destroy_when_complete</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#coro-return-type" id=3D"id503">coro_return_type</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#coro-wrapper" id=3D"id504">coro_wrapper</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#deprecated" id=3D"id505">deprecated</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#empty-bases" id=3D"id506">empty_bases</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#enum-extensibility" id=3D"id507">enum_extensibility=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#external-source-symbol" id=3D"id508">external_sourc=
e_symbol</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#flag-enum" id=3D"id509">flag_enum</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#grid-constant" id=3D"id510">grid_constant</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#layout-version" id=3D"id511">layout_version</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#lto-visibility-public" id=3D"id512">lto_visibility_=
public</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#managed" id=3D"id513">managed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-init-all" id=3D"id514">no_init_all</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-specializations" id=3D"id515">no_specializations=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#novtable" id=3D"id516">novtable</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ns-error-domain" id=3D"id517">ns_error_domain</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-boxable" id=3D"id518">objc_boxable</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-direct" id=3D"id519">objc_direct</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-direct-members" id=3D"id520">objc_direct_membe=
rs</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-non-runtime-protocol" id=3D"id521">objc_non_ru=
ntime_protocol</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-nonlazy-class" id=3D"id522">objc_nonlazy_class=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-runtime-name" id=3D"id523">objc_runtime_name</=
a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-runtime-visible" id=3D"id524">objc_runtime_vis=
ible</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-subclassing-restricted" id=3D"id525">objc_subc=
lassing_restricted</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#preferred-name" id=3D"id526">preferred_name</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#randomize-layout-no-randomize-layout" id=3D"id527">=
randomize_layout, no_randomize_layout</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id10" id=3D"id528">randomize_layout, no_randomize_l=
ayout</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#selectany" id=3D"id529">selectany</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#transparent-union" id=3D"id530">transparent_union</=
a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#trivial-abi" id=3D"id531">trivial_abi</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#using-if-exists" id=3D"id532">using_if_exists</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#weak" id=3D"id533">weak</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#field-attributes" id=3D"id534">Field Attributes</a>=
</p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#counted-by" id=3D"id535">counted_by</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#counted-by-or-null" id=3D"id536">counted_by_or_null=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-unique-address" id=3D"id537">no_unique_address</=
a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#preferred-type" id=3D"id538">preferred_type</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#require-explicit-initialization" id=3D"id539">requi=
re_explicit_initialization</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sized-by" id=3D"id540">sized_by</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sized-by-or-null" id=3D"id541">sized_by_or_null</a>=
</p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#function-attributes" id=3D"id542">Function Attribut=
es</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pragma-omp-declare-simd" id=3D"id543">#pragma omp d=
eclare simd</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pragma-omp-declare-target" id=3D"id544">#pragma omp=
 declare target</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pragma-omp-declare-variant" id=3D"id545">#pragma om=
p declare variant</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sv-dispatchthreadid" id=3D"id546">SV_DispatchThread=
ID</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sv-groupid" id=3D"id547">SV_GroupID</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sv-groupindex" id=3D"id548">SV_GroupIndex</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sv-groupthreadid" id=3D"id549">SV_GroupThreadID</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#wavesize" id=3D"id550">WaveSize</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#noreturn" id=3D"id551">_Noreturn</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#funcref" id=3D"id552">__funcref</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#abi-tag" id=3D"id553">abi_tag</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#acquire-capability-acquire-shared-capability" id=3D=
"id554">acquire_capability, acquire_shared_capability</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#alloc-align" id=3D"id555">alloc_align</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#alloc-size" id=3D"id556">alloc_size</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#allocator" id=3D"id557">allocator</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#always-inline-force-inline" id=3D"id558">always_inl=
ine, __force_inline</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#artificial" id=3D"id559">artificial</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#assert-capability-assert-shared-capability" id=3D"i=
d560">assert_capability, assert_shared_capability</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#assume" id=3D"id561">assume</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#assume-aligned" id=3D"id562">assume_aligned</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#availability" id=3D"id563">availability</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#btf-decl-tag" id=3D"id564">btf_decl_tag</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#callback" id=3D"id565">callback</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#carries-dependency" id=3D"id566">carries_dependency=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cf-consumed" id=3D"id567">cf_consumed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cf-returns-not-retained" id=3D"id568">cf_returns_no=
t_retained</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cf-returns-retained" id=3D"id569">cf_returns_retain=
ed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cfi-canonical-jump-table" id=3D"id570">cfi_canonica=
l_jump_table</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#clang-builtin-alias-clang-builtin-alias" id=3D"id57=
1">clang::builtin_alias, clang_builtin_alias</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#clang-arm-builtin-alias" id=3D"id572">clang_arm_bui=
ltin_alias</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#clspv-libclc-builtin" id=3D"id573">clspv_libclc_bui=
ltin</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cmse-nonsecure-entry" id=3D"id574">cmse_nonsecure_e=
ntry</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#code-seg" id=3D"id575">code_seg</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cold" id=3D"id576">cold</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#constructor" id=3D"id577">constructor</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#convergent" id=3D"id578">convergent</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cpu-dispatch" id=3D"id579">cpu_dispatch</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cpu-specific" id=3D"id580">cpu_specific</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#destructor" id=3D"id581">destructor</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#diagnose-as-builtin" id=3D"id582">diagnose_as_built=
in</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#diagnose-if" id=3D"id583">diagnose_if</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#disable-sanitizer-instrumentation" id=3D"id584">dis=
able_sanitizer_instrumentation</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#disable-tail-calls" id=3D"id585">disable_tail_calls=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#enable-if" id=3D"id586">enable_if</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#enforce-tcb" id=3D"id587">enforce_tcb</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#enforce-tcb-leaf" id=3D"id588">enforce_tcb_leaf</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#error-warning" id=3D"id589">error, warning</a></p><=
/li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#exclude-from-explicit-instantiation" id=3D"id590">e=
xclude_from_explicit_instantiation</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#export-name" id=3D"id591">export_name</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#flatten" id=3D"id592">flatten</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#force-align-arg-pointer" id=3D"id593">force_align_a=
rg_pointer</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#format" id=3D"id594">format</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#function-return" id=3D"id595">function_return</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#gnu-inline" id=3D"id596">gnu_inline</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#guard" id=3D"id597">guard</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#hot" id=3D"id598">hot</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#hybrid-patchable" id=3D"id599">hybrid_patchable</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ifunc" id=3D"id600">ifunc</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#import-module" id=3D"id601">import_module</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#import-name" id=3D"id602">import_name</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#internal-linkage" id=3D"id603">internal_linkage</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#interrupt-arm" id=3D"id604">interrupt (ARM)</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#interrupt-avr" id=3D"id605">interrupt (AVR)</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#interrupt-mips" id=3D"id606">interrupt (MIPS)</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#interrupt-risc-v" id=3D"id607">interrupt (RISC-V)</=
a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#interrupt-x86" id=3D"id608">interrupt (X86)</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#lifetime-capture-by" id=3D"id609">lifetime_capture_=
by</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id11" id=3D"id610">lifetimebound</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#long-call-far" id=3D"id611">long_call, far</a></p><=
/li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#malloc" id=3D"id612">malloc</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#micromips" id=3D"id613">micromips</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#mig-server-routine" id=3D"id614">mig_server_routine=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#min-vector-width" id=3D"id615">min_vector_width</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#minsize" id=3D"id616">minsize</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-builtin" id=3D"id617">no_builtin</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-caller-saved-registers" id=3D"id618">no_caller_s=
aved_registers</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-profile-instrument-function" id=3D"id619">no_pro=
file_instrument_function</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-sanitize" id=3D"id620">no_sanitize</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-sanitize-address-no-address-safety-analysis" id=
=3D"id621">no_sanitize_address, no_address_safety_analysis</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-sanitize-memory" id=3D"id622">no_sanitize_memory=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-sanitize-thread" id=3D"id623">no_sanitize_thread=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-speculative-load-hardening" id=3D"id624">no_spec=
ulative_load_hardening</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-split-stack" id=3D"id625">no_split_stack</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-stack-protector-safebuffers" id=3D"id626">no_sta=
ck_protector, safebuffers</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#noalias" id=3D"id627">noalias</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nocf-check" id=3D"id628">nocf_check</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#noconvergent" id=3D"id629">noconvergent</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nodiscard-warn-unused-result" id=3D"id630">nodiscar=
d, warn_unused_result</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#noduplicate" id=3D"id631">noduplicate</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#noinline" id=3D"id632">noinline</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nomicromips" id=3D"id633">nomicromips</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#noreturn-noreturn" id=3D"id634">noreturn, _Noreturn=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#not-tail-called" id=3D"id635">not_tail_called</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nothrow" id=3D"id636">nothrow</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nouwtable" id=3D"id637">nouwtable</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ns-consumed" id=3D"id638">ns_consumed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ns-consumes-self" id=3D"id639">ns_consumes_self</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ns-returns-autoreleased" id=3D"id640">ns_returns_au=
toreleased</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ns-returns-not-retained" id=3D"id641">ns_returns_no=
t_retained</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ns-returns-retained" id=3D"id642">ns_returns_retain=
ed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#numthreads" id=3D"id643">numthreads</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-method-family" id=3D"id644">objc_method_family=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-requires-super" id=3D"id645">objc_requires_sup=
er</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#optnone" id=3D"id646">optnone</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#os-consumed" id=3D"id647">os_consumed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#os-consumes-this" id=3D"id648">os_consumes_this</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#os-returns-not-retained" id=3D"id649">os_returns_no=
t_retained</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#os-returns-retained" id=3D"id650">os_returns_retain=
ed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#os-returns-retained-on-non-zero" id=3D"id651">os_re=
turns_retained_on_non_zero</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#os-returns-retained-on-zero" id=3D"id652">os_return=
s_retained_on_zero</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#overloadable" id=3D"id653">overloadable</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ownership-holds-ownership-returns-ownership-takes-c=
lang-static-analyzer" id=3D"id654">ownership_holds, ownership_returns, owne=
rship_takes (Clang Static Analyzer)</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#packoffset" id=3D"id655">packoffset</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#patchable-function-entry" id=3D"id656">patchable_fu=
nction_entry</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#preserve-access-index" id=3D"id657">preserve_access=
_index</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#preserve-static-offset" id=3D"id658">preserve_stati=
c_offset</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#register" id=3D"id659">register</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#reinitializes" id=3D"id660">reinitializes</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#release-capability-release-shared-capability" id=3D=
"id661">release_capability, release_shared_capability</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#retain" id=3D"id662">retain</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#shader" id=3D"id663">shader</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#short-call-near" id=3D"id664">short_call, near</a><=
/p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#signal" id=3D"id665">signal</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id12" id=3D"id666">speculative_load_hardening</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#strict-gs-check" id=3D"id667">strict_gs_check</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sycl-kernel" id=3D"id668">sycl_kernel</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sycl-kernel-entry-point" id=3D"id669">sycl_kernel_e=
ntry_point</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#target" id=3D"id670">target</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#target-clones" id=3D"id671">target_clones</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#target-version" id=3D"id672">target_version</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#try-acquire-capability-try-acquire-shared-capabilit=
y" id=3D"id673">try_acquire_capability, try_acquire_shared_capability</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#unsafe-buffer-usage" id=3D"id674">unsafe_buffer_usa=
ge</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#used" id=3D"id675">used</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#xray-always-instrument-xray-never-instrument-xray-l=
og-args" id=3D"id676">xray_always_instrument, xray_never_instrument, xray_l=
og_args</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id14" id=3D"id677">xray_always_instrument, xray_nev=
er_instrument, xray_log_args</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#zero-call-used-regs" id=3D"id678">zero_call_used_re=
gs</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#handle-attributes" id=3D"id679">Handle Attributes</=
a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#acquire-handle" id=3D"id680">acquire_handle</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#release-handle" id=3D"id681">release_handle</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#use-handle" id=3D"id682">use_handle</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nullability-attributes" id=3D"id683">Nullability At=
tributes</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nonnull" id=3D"id684">_Nonnull</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#null-unspecified" id=3D"id685">_Null_unspecified</a=
></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nullable" id=3D"id686">_Nullable</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nullable-result" id=3D"id687">_Nullable_result</a><=
/p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id15" id=3D"id688">nonnull</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#returns-nonnull" id=3D"id689">returns_nonnull</a></=
p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#opencl-address-spaces" id=3D"id690">OpenCL Address =
Spaces</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#clang-opencl-global-device-clang-opencl-global-host=
" id=3D"id691">[[clang::opencl_global_device]], [[clang::opencl_global_host=
]]</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id16" id=3D"id692">[[clang::opencl_global_device]],=
 [[clang::opencl_global_host]]</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#constant-constant-clang-opencl-constant" id=3D"id69=
3">__constant, constant, [[clang::opencl_constant]]</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#generic-generic-clang-opencl-generic" id=3D"id694">=
__generic, generic, [[clang::opencl_generic]]</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#global-global-clang-opencl-global" id=3D"id695">__g=
lobal, global, [[clang::opencl_global]]</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#local-local-clang-opencl-local" id=3D"id696">__loca=
l, local, [[clang::opencl_local]]</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#private-private-clang-opencl-private" id=3D"id697">=
__private, private, [[clang::opencl_private]]</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#performance-constraint-attributes" id=3D"id698">Per=
formance Constraint Attributes</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#allocating" id=3D"id699">allocating</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#blocking" id=3D"id700">blocking</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nonallocating" id=3D"id701">nonallocating</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nonblocking" id=3D"id702">nonblocking</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#statement-attributes" id=3D"id703">Statement Attrib=
utes</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pragma-clang-loop" id=3D"id704">#pragma clang loop<=
/a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pragma-unroll-pragma-nounroll" id=3D"id705">#pragma=
 unroll, #pragma nounroll</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#loop" id=3D"id706">[loop]</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#unroll-x-unroll" id=3D"id707">[unroll(x)], [unroll]=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#read-only-write-only-read-write-read-only-write-onl=
y-read-write" id=3D"id708">__read_only, __write_only, __read_write (read_on=
ly, write_only, read_write)</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id19" id=3D"id709">assume</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#constexpr" id=3D"id710">constexpr</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#fallthrough" id=3D"id711">fallthrough</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#intel-reqd-sub-group-size" id=3D"id712">intel_reqd_=
sub_group_size</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#likely-and-unlikely" id=3D"id713">likely and unlike=
ly</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id20" id=3D"id714">likely and unlikely</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#musttail" id=3D"id715">musttail</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nomerge" id=3D"id716">nomerge</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#opencl-unroll-hint" id=3D"id717">opencl_unroll_hint=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#suppress" id=3D"id718">suppress</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sycl-special-class" id=3D"id719">sycl_special_class=
</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#type-attributes" id=3D"id720">Type Attributes</a></=
p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ptr32" id=3D"id721">__ptr32</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ptr64" id=3D"id722">__ptr64</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sptr" id=3D"id723">__sptr</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#uptr" id=3D"id724">__uptr</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#align-value" id=3D"id725">align_value</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#annotate-type" id=3D"id726">annotate_type</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#arm-sve-vector-bits" id=3D"id727">arm_sve_vector_bi=
ts</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#bpf-fastcall" id=3D"id728">bpf_fastcall</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#btf-type-tag" id=3D"id729">btf_type_tag</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#clang-arm-mve-strict-polymorphism" id=3D"id730">cla=
ng_arm_mve_strict_polymorphism</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cmse-nonsecure-call" id=3D"id731">cmse_nonsecure_ca=
ll</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#device-builtin-surface-type" id=3D"id732">device_bu=
iltin_surface_type</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#device-builtin-texture-type" id=3D"id733">device_bu=
iltin_texture_type</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#enforce-read-only-placement" id=3D"id734">enforce_r=
ead_only_placement</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#noderef" id=3D"id735">noderef</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-class-stub" id=3D"id736">objc_class_stub</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#riscv-rvv-vector-bits" id=3D"id737">riscv_rvv_vecto=
r_bits</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#type-visibility" id=3D"id738">type_visibility</a></=
p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#type-safety-checking" id=3D"id739">Type Safety Chec=
king</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#argument-with-type-tag" id=3D"id740">argument_with_=
type_tag</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pointer-with-type-tag" id=3D"id741">pointer_with_ty=
pe_tag</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#type-tag-for-datatype" id=3D"id742">type_tag_for_da=
tatype</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#undocumented" id=3D"id743">Undocumented</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#alignas-align-alignas-aligned" id=3D"id744">Alignas=
, align, alignas, aligned</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nsobject" id=3D"id745">NSObject</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#kindof" id=3D"id746">__kindof</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#acquired-after" id=3D"id747">acquired_after</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#acquired-before" id=3D"id748">acquired_before</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#address-space" id=3D"id749">address_space</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#alias" id=3D"id750">alias</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#amdgpu-kernel" id=3D"id751">amdgpu_kernel</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#analyzer-noreturn" id=3D"id752">analyzer_noreturn</=
a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#annotate" id=3D"id753">annotate</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#assert-exclusive-lock" id=3D"id754">assert_exclusiv=
e_lock</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#assert-shared-lock" id=3D"id755">assert_shared_lock=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#available-only-in-default-eval-method" id=3D"id756"=
>available_only_in_default_eval_method</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#blocks" id=3D"id757">blocks</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#capability-shared-capability" id=3D"id758">capabili=
ty, shared_capability</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cdecl" id=3D"id759">cdecl</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cf-audited-transfer" id=3D"id760">cf_audited_transf=
er</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cf-unknown-transfer" id=3D"id761">cf_unknown_transf=
er</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#common" id=3D"id762">common</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#const" id=3D"id763">const</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#constant" id=3D"id764">constant</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#consumable-auto-cast-state" id=3D"id765">consumable=
_auto_cast_state</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#consumable-set-state-on-read" id=3D"id766">consumab=
le_set_state_on_read</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#device" id=3D"id767">device</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#exclusive-locks-required-requires-capability-requir=
es-shared-capability-shared-locks-required" id=3D"id768">exclusive_locks_re=
quired, requires_capability, requires_shared_capability, shared_locks_requi=
red</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#exclusive-trylock-function" id=3D"id769">exclusive_=
trylock_function</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ext-vector-type" id=3D"id770">ext_vector_type</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#format-arg" id=3D"id771">format_arg</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#global" id=3D"id772">global</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#guarded-by" id=3D"id773">guarded_by</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#guarded-var" id=3D"id774">guarded_var</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#host" id=3D"id775">host</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ibaction" id=3D"id776">ibaction</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#iboutlet" id=3D"id777">iboutlet</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#iboutletcollection" id=3D"id778">iboutletcollection=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#intel-ocl-bicc" id=3D"id779">intel_ocl_bicc</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#interrupt" id=3D"id780">interrupt</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id22" id=3D"id781">interrupt</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#kernel" id=3D"id782">kernel</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#launch-bounds" id=3D"id783">launch_bounds</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#lock-returned" id=3D"id784">lock_returned</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#lockable" id=3D"id785">lockable</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#locks-excluded" id=3D"id786">locks_excluded</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#matrix-type" id=3D"id787">matrix_type</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#may-alias" id=3D"id788">may_alias</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#mips16" id=3D"id789">mips16</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#mode" id=3D"id790">mode</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ms-struct" id=3D"id791">ms_struct</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#naked" id=3D"id792">naked</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#neon-polyvector-type" id=3D"id793">neon_polyvector_=
type</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#neon-vector-type" id=3D"id794">neon_vector_type</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-instrument-function" id=3D"id795">no_instrument_=
function</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-thread-safety-analysis" id=3D"id796">no_thread_s=
afety_analysis</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nocommon" id=3D"id797">nocommon</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nomips16" id=3D"id798">nomips16</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#id23" id=3D"id799">noreturn</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nvptx-kernel" id=3D"id800">nvptx_kernel</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-arc-weak-reference-unavailable" id=3D"id801">o=
bjc_arc_weak_reference_unavailable</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-bridge" id=3D"id802">objc_bridge</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-bridge-mutable" id=3D"id803">objc_bridge_mutab=
le</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-bridge-related" id=3D"id804">objc_bridge_relat=
ed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-designated-initializer" id=3D"id805">objc_desi=
gnated_initializer</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-exception" id=3D"id806">objc_exception</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-gc" id=3D"id807">objc_gc</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-independent-class" id=3D"id808">objc_independe=
nt_class</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-ownership" id=3D"id809">objc_ownership</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-precise-lifetime" id=3D"id810">objc_precise_li=
fetime</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-protocol-requires-explicit-implementation" id=
=3D"id811">objc_protocol_requires_explicit_implementation</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-requires-property-definitions" id=3D"id812">ob=
jc_requires_property_definitions</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-returns-inner-pointer" id=3D"id813">objc_retur=
ns_inner_pointer</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-root-class" id=3D"id814">objc_root_class</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#packed" id=3D"id815">packed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pascal" id=3D"id816">pascal</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pt-guarded-by" id=3D"id817">pt_guarded_by</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pt-guarded-var" id=3D"id818">pt_guarded_var</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#ptrauth-vtable-pointer" id=3D"id819">ptrauth_vtable=
_pointer</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pure" id=3D"id820">pure</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#reqd-work-group-size" id=3D"id821">reqd_work_group_=
size</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#returns-twice" id=3D"id822">returns_twice</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#scoped-lockable" id=3D"id823">scoped_lockable</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#sentinel" id=3D"id824">sentinel</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#shared" id=3D"id825">shared</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#shared-trylock-function" id=3D"id826">shared_tryloc=
k_function</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#unavailable" id=3D"id827">unavailable</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#uuid" id=3D"id828">uuid</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#vec-type-hint" id=3D"id829">vec_type_hint</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#vecreturn" id=3D"id830">vecreturn</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#vector-size" id=3D"id831">vector_size</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#visibility" id=3D"id832">visibility</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#warn-unused" id=3D"id833">warn_unused</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#weak-import" id=3D"id834">weak_import</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#weakref" id=3D"id835">weakref</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#work-group-size-hint" id=3D"id836">work_group_size_=
hint</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#variable-attributes" id=3D"id837">Variable Attribut=
es</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#hlsl-parameter-modifiers" id=3D"id838">HLSL Paramet=
er Modifiers</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#always-destroy" id=3D"id839">always_destroy</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#called-once" id=3D"id840">called_once</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#clang-code-align" id=3D"id841">clang::code_align</a=
></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#cleanup" id=3D"id842">cleanup</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#dllexport" id=3D"id843">dllexport</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#dllimport" id=3D"id844">dllimport</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#groupshared" id=3D"id845">groupshared</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#init-priority" id=3D"id846">init_priority</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#init-seg" id=3D"id847">init_seg</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#leaf" id=3D"id848">leaf</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#loader-uninitialized" id=3D"id849">loader_uninitial=
ized</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#maybe-undef" id=3D"id850">maybe_undef</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#maybe-unused-unused" id=3D"id851">maybe_unused, unu=
sed</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#model" id=3D"id852">model</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#no-destroy" id=3D"id853">no_destroy</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nodebug" id=3D"id854">nodebug</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#noescape" id=3D"id855">noescape</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#nosvm" id=3D"id856">nosvm</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#objc-externally-retained" id=3D"id857">objc_externa=
lly_retained</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pass-object-size-pass-dynamic-object-size" id=3D"id=
858">pass_object_size, pass_dynamic_object_size</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#require-constant-initialization-constinit-c-20" id=
=3D"id859">require_constant_initialization, constinit (C++20)</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#section-declspec-allocate" id=3D"id860">section, __=
declspec(allocate)</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#standalone-debug" id=3D"id861">standalone_debug</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-async-context" id=3D"id862">swift_async_conte=
xt</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-context" id=3D"id863">swift_context</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-error-result" id=3D"id864">swift_error_result=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swift-indirect-result" id=3D"id865">swift_indirect_=
result</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swiftasynccall" id=3D"id866">swiftasynccall</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#swiftcall" id=3D"id867">swiftcall</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#thread" id=3D"id868">thread</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#tls-model" id=3D"id869">tls_model</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#uninitialized" id=3D"id870">uninitialized</a></p></=
li>
</ul>
</li>
</ul>
</nav>
<section id=3D"introduction">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id440" role=3D"doc-backlink">Introduction</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#introdu=
ction" title=3D"Link to this heading">=C2=B6</a></h2>
<p>This page lists the attributes currently supported by Clang.</p>
</section>
<section id=3D"aarch64-sme-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id441" role=3D"doc-backlink">AArch64 SME Attributes</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#aarch64-sme-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<p>Clang supports a number of AArch64-specific attributes to manage state
added by the Scalable Matrix Extension (SME). This state includes the
runtime mode that the processor is in (e.g. non-streaming or streaming)
as well as the state of the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">ZA</span></code> Matrix Storage.</p>
<p>The attributes come in the form of type- and declaration attributes:</p>
<ul class=3D"simple">
<li><p>The SME declaration attributes can appear anywhere that a standard
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[...]]</s=
pan></code> declaration attribute can appear.</p></li>
<li><p>The SME type attributes apply only to prototyped functions and can a=
ppear
anywhere that a standard <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">[[...]]</span></code> type attribute can appear. The SME
type attributes do not apply to functions having a K&amp;R-style
unprototyped function type.</p></li>
</ul>
<p>See <a class=3D"reference external" href=3D"https://github.com/ARM-softw=
are/acle">Arm C Language Extensions</a>
for more details about the features related to the SME extension.</p>
<p>See <a class=3D"reference external" href=3D"https://github.com/ARM-softw=
are/abi-aa">Procedure Call Standard for the Arm=C2=AE 64-bit Architecture (=
AArch64)</a> for more details about
streaming-interface functions and shared/private-ZA interface functions.</p=
>
<section id=3D"arm-agnostic">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id442" role=3D"doc-backlink">__arm_agnostic</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#arm-a=
gnostic" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id27">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
7" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_agnostic</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_agnostic</span></code> keyword applies to prototyped function types and
affects the function=E2=80=99s calling convention for a given state S. This
attribute allows the user to describe a function that preserves S, without
requiring the function to share S with its callers and without making
the assumption that S exists.</p>
<p>If a function has the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">__arm_agnostic(S)</span></code> attribute and calls a functi=
on
without this attribute, then the function=E2=80=99s object code will contai=
n code
to preserve state S. Otherwise, the function=E2=80=99s object code will be =
the same
as if it did not have the attribute.</p>
<p>The attribute takes string arguments to describe state S. The supported
states are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">"sm=
e_za_state"</span></code> for state enabled by PSTATE.ZA, such as ZA and ZT=
0.</p></li>
</ul>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__arm_agnostic("sme_za_state")</span></code> cannot be used in con=
junction
with <code class=3D"docutils literal notranslate"><span class=3D"pre">__arm=
_in(S)</span></code>, <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__arm_out(S)</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">__arm_inout(S)</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">__arm_pres=
erves(S)</span></code> where state S describes state enabled by PSTATE.ZA,
such as =E2=80=9Cza=E2=80=9D or =E2=80=9Czt0=E2=80=9D.</p>
</section>
<section id=3D"arm-in">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id443" role=3D"doc-backlink">__arm_in</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#arm-in" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id28">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
8" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_in</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_in</span></code> keyword applies to prototyped function types and specif=
ies
that the function shares a given state S with its caller.  For <code class=
=3D"docutils literal notranslate"><span class=3D"pre">__arm_in</span></code=
>, the
function takes the state S as input and returns with the state S unchanged.=
</p>
<p>The attribute takes string arguments to instruct the compiler which stat=
e
is shared.  The supported states for S are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">"za=
"</span></code> for Matrix Storage (requires SME)</p></li>
</ul>
<p>The attributes <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__arm_in(S)</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">__arm_out(S)</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">__arm_inout(S)</span></code> an=
d
<code class=3D"docutils literal notranslate"><span class=3D"pre">__arm_pres=
erves(S)</span></code> are all mutually exclusive for the same state S.</p>
</section>
<section id=3D"arm-inout">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id444" role=3D"doc-backlink">__arm_inout</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#arm-inou=
t" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id29">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
9" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_inout</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_inout</span></code> keyword applies to prototyped function types and spe=
cifies
that the function shares a given state S with its caller.  For <code class=
=3D"docutils literal notranslate"><span class=3D"pre">__arm_inout</span></c=
ode>,
the function takes the state S as input and returns new state for S.</p>
<p>The attribute takes string arguments to instruct the compiler which stat=
e
is shared.  The supported states for S are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">"za=
"</span></code> for Matrix Storage (requires SME)</p></li>
</ul>
<p>The attributes <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__arm_in(S)</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">__arm_out(S)</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">__arm_inout(S)</span></code> an=
d
<code class=3D"docutils literal notranslate"><span class=3D"pre">__arm_pres=
erves(S)</span></code> are all mutually exclusive for the same state S.</p>
</section>
<section id=3D"arm-locally-streaming">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id445" role=3D"doc-backlink">__arm_locally_streaming</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#arm-locally-streaming" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id30">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
0" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_locally_streaming</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_locally_streaming</span></code> keyword applies to function declarations
and specifies that all the statements in the function are executed in
streaming mode. This means that:</p>
<ul class=3D"simple">
<li><p>the function requires that the target processor implements the Scala=
ble Matrix
Extension (SME).</p></li>
<li><p>the program automatically puts the machine into streaming mode befor=
e
executing the statements and automatically restores the previous mode
afterwards.</p></li>
</ul>
<p>Clang manages PSTATE.SM automatically; it is not the source code=E2=80=
=99s
responsibility to do this.  For example, Clang will emit code to enable
streaming mode at the start of the function, and disable streaming mode
at the end of the function.</p>
</section>
<section id=3D"arm-new">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id446" role=3D"doc-backlink">__arm_new</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#arm-new" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id31">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
1" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_new</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_new</span></code> keyword applies to function declarations and specifies
that the function will create a new scope for state S.</p>
<p>The attribute takes string arguments to instruct the compiler for which =
state
to create new scope.  The supported states for S are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">"za=
"</span></code> for Matrix Storage (requires SME)</p></li>
</ul>
<p>For state <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">"za"</span></code>, this means that:</p>
<ul class=3D"simple">
<li><p>the function requires that the target processor implements the Scala=
ble Matrix
Extension (SME).</p></li>
<li><p>the function will commit any lazily saved ZA data.</p></li>
<li><p>the function will create a new ZA context and enable PSTATE.ZA.</p><=
/li>
<li><p>the function will disable PSTATE.ZA (by setting it to 0) before retu=
rning.</p></li>
</ul>
<p>For <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_new("za")</span></code> functions Clang will set up the ZA context autom=
atically
on entry to the function and disable it before returning. For example, if Z=
A is
in a dormant state Clang will generate the code to commit a lazy-save and s=
et up
a new ZA state before executing user code.</p>
</section>
<section id=3D"arm-out">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id447" role=3D"doc-backlink">__arm_out</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#arm-out" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id32">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
2" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_out</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_out</span></code> keyword applies to prototyped function types and speci=
fies
that the function shares a given state S with its caller.  For <code class=
=3D"docutils literal notranslate"><span class=3D"pre">__arm_out</span></cod=
e>,
the function ignores the incoming state for S and returns new state for S.<=
/p>
<p>The attribute takes string arguments to instruct the compiler which stat=
e
is shared.  The supported states for S are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">"za=
"</span></code> for Matrix Storage (requires SME)</p></li>
</ul>
<p>The attributes <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__arm_in(S)</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">__arm_out(S)</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">__arm_inout(S)</span></code> an=
d
<code class=3D"docutils literal notranslate"><span class=3D"pre">__arm_pres=
erves(S)</span></code> are all mutually exclusive for the same state S.</p>
</section>
<section id=3D"arm-preserves">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id448" role=3D"doc-backlink">__arm_preserves</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#arm-=
preserves" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id33">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
3" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_preserves</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_preserves</span></code> keyword applies to prototyped function types and
specifies that the function does not read a given state S and returns
with state S unchanged.</p>
<p>The attribute takes string arguments to instruct the compiler which stat=
e
is shared.  The supported states for S are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">"za=
"</span></code> for Matrix Storage (requires SME)</p></li>
</ul>
<p>The attributes <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__arm_in(S)</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">__arm_out(S)</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">__arm_inout(S)</span></code> an=
d
<code class=3D"docutils literal notranslate"><span class=3D"pre">__arm_pres=
erves(S)</span></code> are all mutually exclusive for the same state S.</p>
</section>
<section id=3D"arm-streaming">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id449" role=3D"doc-backlink">__arm_streaming</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#arm-=
streaming" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id34">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
4" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_streaming</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_streaming</span></code> keyword applies to prototyped function types and=
 specifies
that the function has a =E2=80=9Cstreaming interface=E2=80=9D.  This means =
that:</p>
<ul class=3D"simple">
<li><p>the function requires that the processor implements the Scalable Mat=
rix
Extension (SME).</p></li>
<li><p>the function must be entered in streaming mode (that is, with PSTATE=
.SM
set to 1)</p></li>
<li><p>the function must return in streaming mode</p></li>
</ul>
<p>Clang manages PSTATE.SM automatically; it is not the source code=E2=80=
=99s
responsibility to do this.  For example, if a non-streaming
function calls an <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__arm_streaming</span></code> function, Clang generates code
that switches into streaming mode before calling the function and
switches back to non-streaming mode on return.</p>
</section>
<section id=3D"arm-streaming-compatible">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id450" role=3D"doc-backlink">__arm_streaming_compatible</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferenc=
e.html#arm-streaming-compatible" title=3D"Link to this heading">=C2=B6</a><=
/h3>
<table class=3D"docutils align-default" id=3D"id35">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
5" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_streaming_compatible</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
rm_streaming_compatible</span></code> keyword applies to prototyped functio=
n types and
specifies that the function has a =E2=80=9Cstreaming compatible interface=
=E2=80=9D.  This
means that:</p>
<ul class=3D"simple">
<li><p>the function may be entered in either non-streaming mode (PSTATE.SM=
=3D0) or
in streaming mode (PSTATE.SM=3D1).</p></li>
<li><p>the function must return in the same mode as it was entered.</p></li=
>
<li><p>the code executed in the function is compatible with either mode.</p=
></li>
</ul>
<p>Clang manages PSTATE.SM automatically; it is not the source code=E2=80=
=99s
responsibility to do this.  Clang will ensure that the generated code in
streaming-compatible functions is valid in either mode (PSTATE.SM=3D0 or
PSTATE.SM=3D1). For example, if an <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">__arm_streaming_compatible</span></code> function =
calls a
non-streaming function, Clang generates code to temporarily switch out of s=
treaming
mode before calling the function and switch back to streaming-mode on retur=
n if
<code class=3D"docutils literal notranslate"><span class=3D"pre">PSTATE.SM<=
/span></code> is <code class=3D"docutils literal notranslate"><span class=
=3D"pre">1</span></code> on entry of the caller. If <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">PSTATE.SM</span></code> is <code =
class=3D"docutils literal notranslate"><span class=3D"pre">0</span></code> =
on
entry to the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">__arm_streaming_compatible</span></code> function, the call will be exec=
uted
without changing modes.</p>
</section>
</section>
<section id=3D"amd-gpu-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id451" role=3D"doc-backlink">AMD GPU Attributes</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#amd-gpu-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<section id=3D"amdgpu-flat-work-group-size">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id452" role=3D"doc-backlink">amdgpu_flat_work_group_size</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferen=
ce.html#amdgpu-flat-work-group-size" title=3D"Link to this heading">=C2=B6<=
/a></h3>
<table class=3D"docutils align-default" id=3D"id36">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
6" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">amdgpu_flat_work_group_size</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::amdgpu_flat_work_group_size</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The flat work-group size is the number of work-items in the work-group s=
ize
specified when the kernel is dispatched. It is the product of the sizes of =
the
x, y, and z dimension of the work-group.</p>
<p>Clang supports the
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((amdgpu_flat_work_group_size(&lt;min&gt;,</span> <span class=3D"pre">&l=
t;max&gt;)))</span></code> attribute for the
AMDGPU target. This attribute may be attached to a kernel function definiti=
on
and is an optimization hint.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;min=
&gt;</span></code> parameter specifies the minimum flat work-group size, an=
d <code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;max&=
gt;</span></code>
parameter specifies the maximum flat work-group size (must be greater than
<code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;min&gt=
;</span></code>) to which all dispatches of the kernel will conform. Passin=
g <code class=3D"docutils literal notranslate"><span class=3D"pre">0,</span=
> <span class=3D"pre">0</span></code>
as <code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;min=
&gt;,</span> <span class=3D"pre">&lt;max&gt;</span></code> implies the defa=
ult behavior (<code class=3D"docutils literal notranslate"><span class=3D"p=
re">128,</span> <span class=3D"pre">256</span></code>).</p>
<p>If specified, the AMDGPU target backend might be able to produce better =
machine
code for barriers and perform scratch promotion by estimating available gro=
up
segment size.</p>
<dl class=3D"simple">
<dt>An error will be given if:</dt><dd><ul class=3D"simple">
<li><p>Specified values violate subtarget specifications;</p></li>
<li><p>Specified values are not compatible with values provided through oth=
er
attributes.</p></li>
</ul>
</dd>
</dl>
</section>
<section id=3D"amdgpu-max-num-work-groups">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id453" role=3D"doc-backlink">amdgpu_max_num_work_groups</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferenc=
e.html#amdgpu-max-num-work-groups" title=3D"Link to this heading">=C2=B6</a=
></h3>
<table class=3D"docutils align-default" id=3D"id37">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
7" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">amdgpu_max_num_work_groups</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::amdgpu_max_num_work_groups</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute specifies the max number of work groups when the kernel
is dispatched.</p>
<p>Clang supports the
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((amdgpu_max_num_work_groups(&lt;x&gt;,</span> <span class=3D"pre">&lt;y=
&gt;,</span> <span class=3D"pre">&lt;z&gt;)))</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang::a=
mdgpu_max_num_work_groups(&lt;x&gt;,</span> <span class=3D"pre">&lt;y&gt;,<=
/span> <span class=3D"pre">&lt;z&gt;)]]</span></code> attribute for the
AMDGPU target. This attribute may be attached to HIP or OpenCL kernel funct=
ion
definitions and is an optimization hint.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">&lt=
;x&gt;</span></code> parameter specifies the maximum number of work groups =
in the x dimension.
Similarly <code class=3D"docutils literal notranslate"><span class=3D"pre">=
&lt;y&gt;</span></code> and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">&lt;z&gt;</span></code> are for the y and z dimensions re=
spectively.
Each of the three values must be greater than 0 when provided. The <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">&lt;x&gt;</span></=
code> parameter
is required, while <code class=3D"docutils literal notranslate"><span class=
=3D"pre">&lt;y&gt;</span></code> and <code class=3D"docutils literal notran=
slate"><span class=3D"pre">&lt;z&gt;</span></code> are optional with defaul=
t value of 1.</p>
<p>If specified, the AMDGPU target backend might be able to produce better =
machine
code.</p>
<dl class=3D"simple">
<dt>An error will be given if:</dt><dd><ul class=3D"simple">
<li><p>Specified values violate subtarget specifications;</p></li>
<li><p>Specified values are not compatible with values provided through oth=
er
attributes.</p></li>
</ul>
</dd>
</dl>
</section>
<section id=3D"amdgpu-num-sgpr">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id454" role=3D"doc-backlink">amdgpu_num_sgpr</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#amdg=
pu-num-sgpr" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id38">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
8" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">amdgpu_num_sgpr</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::amdgpu_num_sgpr</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((amdgpu_num_sgpr(&lt;num_sgpr&gt;)))</span></code=
> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((amdgpu_num_vgpr(&lt;num_vgpr&gt;)))</span></code> attributes for the A=
MDGPU
target. These attributes may be attached to a kernel function definition an=
d are
an optimization hint.</p>
<p>If these attributes are specified, then the AMDGPU target backend will a=
ttempt
to limit the number of SGPRs and/or VGPRs used to the specified value(s). T=
he
number of used SGPRs and/or VGPRs may further be rounded up to satisfy the
allocation requirements or constraints of the subtarget. Passing <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">0</span></code> as
<code class=3D"docutils literal notranslate"><span class=3D"pre">num_sgpr</=
span></code> and/or <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">num_vgpr</span></code> implies the default behavior (no limits).<=
/p>
<p>These attributes can be used to test the AMDGPU target backend. It is
recommended that the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">amdgpu_waves_per_eu</span></code> attribute be used to control
resources such as SGPRs and VGPRs since it is aware of the limits for diffe=
rent
subtargets.</p>
<dl class=3D"simple">
<dt>An error will be given if:</dt><dd><ul class=3D"simple">
<li><p>Specified values violate subtarget specifications;</p></li>
<li><p>Specified values are not compatible with values provided through oth=
er
attributes;</p></li>
<li><p>The AMDGPU target backend is unable to create machine code that can =
meet the
request.</p></li>
</ul>
</dd>
</dl>
</section>
<section id=3D"amdgpu-num-vgpr">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id455" role=3D"doc-backlink">amdgpu_num_vgpr</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#amdg=
pu-num-vgpr" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id39">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
9" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">amdgpu_num_vgpr</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::amdgpu_num_vgpr</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((amdgpu_num_sgpr(&lt;num_sgpr&gt;)))</span></code=
> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((amdgpu_num_vgpr(&lt;num_vgpr&gt;)))</span></code> attributes for the A=
MDGPU
target. These attributes may be attached to a kernel function definition an=
d are
an optimization hint.</p>
<p>If these attributes are specified, then the AMDGPU target backend will a=
ttempt
to limit the number of SGPRs and/or VGPRs used to the specified value(s). T=
he
number of used SGPRs and/or VGPRs may further be rounded up to satisfy the
allocation requirements or constraints of the subtarget. Passing <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">0</span></code> as
<code class=3D"docutils literal notranslate"><span class=3D"pre">num_sgpr</=
span></code> and/or <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">num_vgpr</span></code> implies the default behavior (no limits).<=
/p>
<p>These attributes can be used to test the AMDGPU target backend. It is
recommended that the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">amdgpu_waves_per_eu</span></code> attribute be used to control
resources such as SGPRs and VGPRs since it is aware of the limits for diffe=
rent
subtargets.</p>
<dl class=3D"simple">
<dt>An error will be given if:</dt><dd><ul class=3D"simple">
<li><p>Specified values violate subtarget specifications;</p></li>
<li><p>Specified values are not compatible with values provided through oth=
er
attributes;</p></li>
<li><p>The AMDGPU target backend is unable to create machine code that can =
meet the
request.</p></li>
</ul>
</dd>
</dl>
</section>
<section id=3D"amdgpu-waves-per-eu">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id456" role=3D"doc-backlink">amdgpu_waves_per_eu</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#amdgpu-waves-per-eu" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id40">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
0" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">amdgpu_waves_per_eu</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::amdgpu_waves_per_eu</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>A compute unit (CU) is responsible for executing the wavefronts of a wor=
k-group.
It is composed of one or more execution units (EU), which are responsible f=
or
executing the wavefronts. An EU can have enough resources to maintain the s=
tate
of more than one executing wavefront. This allows an EU to hide latency by
switching between wavefronts in a similar way to symmetric multithreading o=
n a
CPU. In order to allow the state for multiple wavefronts to fit on an EU, t=
he
resources used by a single wavefront have to be limited. For example, the n=
umber
of SGPRs and VGPRs. Limiting such resources can allow greater latency hidin=
g,
but can result in having to spill some register state to memory.</p>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((amdgpu_waves_per_eu(&lt;min&gt;[,</span> <span c=
lass=3D"pre">&lt;max&gt;])))</span></code>
attribute for the AMDGPU target. This attribute may be attached to a kernel
function definition and is an optimization hint.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;min=
&gt;</span></code> parameter specifies the requested minimum number of wave=
s per EU, and
<em>optional</em> <code class=3D"docutils literal notranslate"><span class=
=3D"pre">&lt;max&gt;</span></code> parameter specifies the requested maximu=
m number of waves
per EU (must be greater than <code class=3D"docutils literal notranslate"><=
span class=3D"pre">&lt;min&gt;</span></code> if specified). If <code class=
=3D"docutils literal notranslate"><span class=3D"pre">&lt;max&gt;</span></c=
ode> is omitted,
then there is no restriction on the maximum number of waves per EU other th=
an
the one dictated by the hardware for which the kernel is compiled. Passing
<code class=3D"docutils literal notranslate"><span class=3D"pre">0,</span> =
<span class=3D"pre">0</span></code> as <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">&lt;min&gt;,</span> <span class=3D"pre">&lt;ma=
x&gt;</span></code> implies the default behavior (no limits).</p>
<p>If specified, this attribute allows an advanced developer to tune the nu=
mber of
wavefronts that are capable of fitting within the resources of an EU. The A=
MDGPU
target backend can use this information to limit resources, such as number =
of
SGPRs, number of VGPRs, size of available group and private memory segments=
, in
such a way that guarantees that at least <code class=3D"docutils literal no=
translate"><span class=3D"pre">&lt;min&gt;</span></code> wavefronts and at =
most
<code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;max&gt=
;</span></code> wavefronts are able to fit within the resources of an EU. R=
equesting
more wavefronts can hide memory latency but limits available registers whic=
h
can result in spilling. Requesting fewer wavefronts can help reduce cache
thrashing, but can reduce memory latency hiding.</p>
<p>This attribute controls the machine code generated by the AMDGPU target =
backend
to ensure it is capable of meeting the requested values. However, when the
kernel is executed, there may be other reasons that prevent meeting the req=
uest,
for example, there may be wavefronts from other kernels executing on the EU=
.</p>
<dl class=3D"simple">
<dt>An error will be given if:</dt><dd><ul class=3D"simple">
<li><p>Specified values violate subtarget specifications;</p></li>
<li><p>Specified values are not compatible with values provided through oth=
er
attributes;</p></li>
</ul>
</dd>
</dl>
<p>The AMDGPU target backend will emit a warning whenever it is unable to
create machine code that meets the request.</p>
</section>
</section>
<section id=3D"calling-conventions">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id457" role=3D"doc-backlink">Calling Conventions</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#calling-conventions" title=3D"Link to this heading">=C2=B6</a></h2>
<p>Clang supports several different calling conventions, depending on the t=
arget
platform and architecture. The calling convention used for a function deter=
mines
how parameters are passed, how results are returned to the caller, and othe=
r
low-level details of calling a function.</p>
<section id=3D"aarch64-sve-pcs">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id458" role=3D"doc-backlink">aarch64_sve_pcs</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#aarc=
h64-sve-pcs" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id41">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
1" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">aarch64_sve_pcs</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::aarch64_sve_pcs</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::aarch64_sve_pcs</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On AArch64 targets, this attribute changes the calling convention of a
function to preserve additional Scalable Vector registers and Scalable
Predicate registers relative to the default calling convention used for
AArch64.</p>
<p>This means it is more efficient to call such functions from code that pe=
rforms
extensive scalable vector and scalable predicate calculations, because fewe=
r
live SVE registers need to be saved. This property makes it well-suited for=
 SVE
math library functions, which are typically leaf functions that require a s=
mall
number of registers.</p>
<p>However, using this attribute also means that it is more expensive to ca=
ll
a function that adheres to the default calling convention from within such
a function. Therefore, it is recommended that this attribute is only used
for leaf functions.</p>
<p>For more information, see the documentation for <cite>aarch64_sve_pcs</c=
ite> in the
ARM C Language Extension (ACLE) documentation.</p>
</section>
<section id=3D"aarch64-vector-pcs">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id459" role=3D"doc-backlink">aarch64_vector_pcs</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#aarch64-vector-pcs" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id42">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
2" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">aarch64_vector_pcs</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::aarch64_vector_pcs</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::aarch64_vector_pcs</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On AArch64 targets, this attribute changes the calling convention of a
function to preserve additional floating-point and Advanced SIMD registers
relative to the default calling convention used for AArch64.</p>
<p>This means it is more efficient to call such functions from code that pe=
rforms
extensive floating-point and vector calculations, because fewer live SIMD a=
nd FP
registers need to be saved. This property makes it well-suited for e.g.
floating-point or vector math library functions, which are typically leaf
functions that require a small number of registers.</p>
<p>However, using this attribute also means that it is more expensive to ca=
ll
a function that adheres to the default calling convention from within such
a function. Therefore, it is recommended that this attribute is only used
for leaf functions.</p>
<p>For more information, see the documentation for <a class=3D"reference ex=
ternal" href=3D"https://developer.arm.com/products/software-development-too=
ls/hpc/arm-compiler-for-hpc/vector-function-abi">aarch64_vector_pcs</a> on
the Arm Developer website.</p>
</section>
<section id=3D"fastcall">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id460" role=3D"doc-backlink">fastcall</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#fastcall" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id43">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
3" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">fastcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::fastcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::fastcall</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__f=
astcall</span></code> <br> <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">_fastcall</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On 32-bit x86 targets, this attribute changes the calling convention of =
a
function to use ECX and EDX as register parameters and clear parameters off=
 of
the stack on return. This convention does not support variadic calls or
unprototyped functions in C, and has no effect on x86_64 targets. This call=
ing
convention is supported primarily for compatibility with existing code. Use=
rs
seeking register parameters should use the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">regparm</span></code> attribute, which doe=
s
not require callee-cleanup. See the documentation for <a class=3D"reference=
 external" href=3D"http://msdn.microsoft.com/en-us/library/6xa169sk.aspx">_=
_fastcall</a> on MSDN.</p>
</section>
<section id=3D"m68k-rtd">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id461" role=3D"doc-backlink">m68k_rtd</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#m68k-rtd" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id44">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
4" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">m68k_rtd</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::m68k_rtd</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::m68k_rtd</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On M68k targets, this attribute changes the calling convention of a func=
tion
to clear parameters off the stack on return. In other words, callee is
responsible for cleaning out the stack space allocated for incoming paramte=
rs.
This convention does not support variadic calls or unprototyped functions i=
n C.
When targeting M68010 or newer CPUs, this calling convention is implemented
using the <cite>rtd</cite> instruction.</p>
</section>
<section id=3D"ms-abi">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id462" role=3D"doc-backlink">ms_abi</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ms-abi" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id45">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
5" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ms_abi</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::ms_abi</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::ms_abi</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On non-Windows x86_64 targets, this attribute changes the calling conven=
tion of
a function to match the default convention used on Windows x86_64. This
attribute has no effect on Windows targets or non-x86_64 targets.</p>
</section>
<section id=3D"pcs">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id463" role=3D"doc-backlink">pcs</a><a class=3D"headerlink" h=
ref=3D"https://clang.llvm.org/docs/AttributeReference.html#pcs" title=3D"Li=
nk to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id46">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
6" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">pcs</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::pcs</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::pcs</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On ARM targets, this attribute can be used to select calling conventions
similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>stdcall</span></code> on x86. Valid parameter values are =E2=80=9Caapcs=E2=
=80=9D and
=E2=80=9Caapcs-vfp=E2=80=9D.</p>
</section>
<section id=3D"preserve-all">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id464" role=3D"doc-backlink">preserve_all</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#preserv=
e-all" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id47">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
7" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">preserve_all</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_all</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_all</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On X86-64 and AArch64 targets, this attribute changes the calling conven=
tion of
a function. The <code class=3D"docutils literal notranslate"><span class=3D=
"pre">preserve_all</span></code> calling convention attempts to make the co=
de
in the caller even less intrusive than the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">preserve_most</span></code> calling conven=
tion.
This calling convention also behaves identical to the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">C</span></code> calling convent=
ion
on how arguments and return values are passed, but it uses a different set =
of
caller/callee-saved registers. This removes the burden of saving and
recovering a large register set before and after the call in the caller. If
the arguments are passed in callee-saved registers, then they will be
preserved by the callee across the call. This doesn=E2=80=99t apply for val=
ues
returned in callee-saved registers.</p>
<ul class=3D"simple">
<li><p>On X86-64 the callee preserves all general purpose registers, except=
 for
R11. R11 can be used as a scratch register. Furthermore it also preserves
all floating-point registers (XMMs/YMMs).</p></li>
<li><p>On AArch64 the callee preserve all general purpose registers, except=
 X0-X8 and
X16-X18. Furthermore it also preserves lower 128 bits of V8-V31 SIMD - floa=
ting
point registers.</p></li>
</ul>
<p>The idea behind this convention is to support calls to runtime functions
that don=E2=80=99t need to call out to any other functions.</p>
<p>This calling convention, like the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">preserve_most</span></code> calling convention, =
will be
used by a future version of the Objective-C runtime and should be considere=
d
experimental at this time.</p>
</section>
<section id=3D"preserve-most">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id465" role=3D"doc-backlink">preserve_most</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#preser=
ve-most" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id48">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
8" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">preserve_most</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_most</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_most</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On X86-64 and AArch64 targets, this attribute changes the calling conven=
tion of
a function. The <code class=3D"docutils literal notranslate"><span class=3D=
"pre">preserve_most</span></code> calling convention attempts to make the c=
ode
in the caller as unintrusive as possible. This convention behaves identical=
ly
to the <code class=3D"docutils literal notranslate"><span class=3D"pre">C</=
span></code> calling convention on how arguments and return values are pass=
ed,
but it uses a different set of caller/callee-saved registers. This alleviat=
es
the burden of saving and recovering a large register set before and after t=
he
call in the caller. If the arguments are passed in callee-saved registers,
then they will be preserved by the callee across the call. This doesn=E2=80=
=99t
apply for values returned in callee-saved registers.</p>
<ul class=3D"simple">
<li><p>On X86-64 the callee preserves all general purpose registers, except=
 for
R11. R11 can be used as a scratch register. Floating-point registers
(XMMs/YMMs) are not preserved and need to be saved by the caller.</p></li>
<li><p>On AArch64 the callee preserve all general purpose registers, except=
 X0-X8 and
X16-X18.</p></li>
</ul>
<p>The idea behind this convention is to support calls to runtime functions
that have a hot path and a cold path. The hot path is usually a small piece
of code that doesn=E2=80=99t use many registers. The cold path might need t=
o call out to
another function and therefore only needs to preserve the caller-saved
registers, which haven=E2=80=99t already been saved by the caller. The
<code class=3D"docutils literal notranslate"><span class=3D"pre">preserve_m=
ost</span></code> calling convention is very similar to the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">cold</span></code> callin=
g
convention in terms of caller/callee-saved registers, but they are used for
different types of function calls. <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">coldcc</span></code> is for function calls that ar=
e
rarely executed, whereas <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">preserve_most</span></code> function calls are intended to b=
e
on the hot path and definitely executed a lot. Furthermore <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">preserve_most</span></code=
>
doesn=E2=80=99t prevent the inliner from inlining the function call.</p>
<p>This calling convention will be used by a future version of the Objectiv=
e-C
runtime and should therefore still be considered experimental at this time.
Although this convention was created to optimize certain runtime calls to
the Objective-C runtime, it is not limited to this runtime and might be use=
d
by other runtimes in the future too. The current implementation only
supports X86-64 and AArch64, but the intention is to support more architect=
ures
in the future.</p>
</section>
<section id=3D"preserve-none">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id466" role=3D"doc-backlink">preserve_none</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#preser=
ve-none" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id49">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
9" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">preserve_none</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_none</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_none</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>On X86-64 and AArch64 targets, this attribute changes the calling conven=
tion of a function.
The <code class=3D"docutils literal notranslate"><span class=3D"pre">preser=
ve_none</span></code> calling convention tries to preserve as few general
registers as possible. So all general registers are caller saved registers.=
 It
also uses more general registers to pass arguments. This attribute doesn=E2=
=80=99t
impact floating-point registers. <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">preserve_none</span></code>=E2=80=99s ABI is still u=
nstable, and
may be changed in the future.</p>
<ul class=3D"simple">
<li><p>On X86-64, only RSP and RBP are preserved by the callee.
Registers R12, R13, R14, R15, RDI, RSI, RDX, RCX, R8, R9, R11, and RAX now =
can
be used to pass function arguments. Floating-point registers (XMMs/YMMs) st=
ill
follow the C calling convention.</p></li>
<li><p>On AArch64, only LR and FP are preserved by the callee.
Registers X20-X28, X0-X7, and X9-X14 are used to pass function arguments.
X8, X16-X19, SIMD and floating-point registers follow the AAPCS calling
convention. X15 is not available for argument passing on Windows, but is
used to pass arguments on other platforms.</p></li>
</ul>
</section>
<section id=3D"regcall">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id467" role=3D"doc-backlink">regcall</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#regcall" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id50">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
0" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">regcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::regcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::regcall</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__r=
egcall</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On x86 targets, this attribute changes the calling convention to
<a class=3D"reference external" href=3D"https://www.intel.com/content/www/u=
s/en/docs/dpcpp-cpp-compiler/developer-guide-reference/2023-2/c-c-sycl-call=
ing-conventions.html">__regcall</a> convention. This convention aims to pas=
s as many arguments
as possible in registers. It also tries to utilize registers for the
return value whenever it is possible.</p>
</section>
<section id=3D"regparm">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id468" role=3D"doc-backlink">regparm</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#regparm" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id51">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
1" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">regparm</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::regparm</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::regparm</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On 32-bit x86 targets, the regparm attribute causes the compiler to pass
the first three integer parameters in EAX, EDX, and ECX instead of on the
stack. This attribute has no effect on variadic functions, and all paramete=
rs
are passed via the stack as normal.</p>
</section>
<section id=3D"riscv-vector-cc-riscv-vector-cc-clang-riscv-vector-cc">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id469" role=3D"doc-backlink">riscv::vector_cc, riscv_vector_c=
c, clang::riscv_vector_cc</a><a class=3D"headerlink" href=3D"https://clang.=
llvm.org/docs/AttributeReference.html#riscv-vector-cc-riscv-vector-cc-clang=
-riscv-vector-cc" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id52">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
2" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">riscv_vector_cc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ris=
cv::vector_cc</span></code> <br> <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">clang::riscv_vector_cc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ris=
cv::vector_cc</span></code> <br> <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">clang::riscv_vector_cc</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ris=
cv_vector_cc</span></code> attribute can be applied to a function. It prese=
rves 15
registers namely, v1-v7 and v24-v31 as callee-saved. Callers thus don=E2=80=
=99t need
to save these registers before function calls, and callees only need to sav=
e
them if they use them.</p>
</section>
<section id=3D"stdcall">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id470" role=3D"doc-backlink">stdcall</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#stdcall" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id53">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
3" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">stdcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::stdcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::stdcall</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__s=
tdcall</span></code> <br> <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">_stdcall</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On 32-bit x86 targets, this attribute changes the calling convention of =
a
function to clear parameters off of the stack on return. This convention do=
es
not support variadic calls or unprototyped functions in C, and has no effec=
t on
x86_64 targets. This calling convention is used widely by the Windows API a=
nd
COM applications. See the documentation for <a class=3D"reference external"=
 href=3D"http://msdn.microsoft.com/en-us/library/zxk0tw93.aspx">__stdcall</=
a> on MSDN.</p>
</section>
<section id=3D"sysv-abi">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id471" role=3D"doc-backlink">sysv_abi</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sysv-abi" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id54">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
4" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">sysv_abi</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::sysv_abi</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::sysv_abi</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On Windows x86_64 targets, this attribute changes the calling convention=
 of a
function to match the default convention used on Sys V targets such as Linu=
x,
Mac, and BSD. This attribute has no effect on other targets.</p>
</section>
<section id=3D"thiscall">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id472" role=3D"doc-backlink">thiscall</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#thiscall" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id55">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
5" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">thiscall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::thiscall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::thiscall</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__t=
hiscall</span></code> <br> <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">_thiscall</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On 32-bit x86 targets, this attribute changes the calling convention of =
a
function to use ECX for the first parameter (typically the implicit <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">this</span></code=
>
parameter of C++ methods) and clear parameters off of the stack on return. =
This
convention does not support variadic calls or unprototyped functions in C, =
and
has no effect on x86_64 targets. See the documentation for <a class=3D"refe=
rence external" href=3D"http://msdn.microsoft.com/en-us/library/ek8tkfbw.as=
px">__thiscall</a> on
MSDN.</p>
</section>
<section id=3D"vectorcall">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id473" role=3D"doc-backlink">vectorcall</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#vectorcal=
l" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id56">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
6" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">vectorcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::vectorcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::vectorcall</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__v=
ectorcall</span></code> <br> <code class=3D"docutils literal notranslate"><=
span class=3D"pre">_vectorcall</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On 32-bit x86 <em>and</em> x86_64 targets, this attribute changes the ca=
lling
convention of a function to pass vector parameters in SSE registers.</p>
<p>On 32-bit x86 targets, this calling convention is similar to <code class=
=3D"docutils literal notranslate"><span class=3D"pre">__fastcall</span></co=
de>.
The first two integer parameters are passed in ECX and EDX. Subsequent inte=
ger
parameters are passed in memory, and callee clears the stack. On x86_64
targets, the callee does <em>not</em> clear the stack, and integer paramete=
rs are
passed in RCX, RDX, R8, and R9 as is done for the default Windows x64 calli=
ng
convention.</p>
<p>On both 32-bit x86 and x86_64 targets, vector and floating point argumen=
ts are
passed in XMM0-XMM5. Homogeneous vector aggregates of up to four elements a=
re
passed in sequential SSE registers if enough are available. If AVX is enabl=
ed,
256 bit vectors are passed in YMM0-YMM5. Any vector or aggregate type that
cannot be passed in registers for any reason is passed by reference, which
allows the caller to align the parameter memory.</p>
<p>See the documentation for <a class=3D"reference external" href=3D"http:/=
/msdn.microsoft.com/en-us/library/dn375768.aspx">__vectorcall</a> on MSDN f=
or more details.</p>
</section>
</section>
<section id=3D"consumed-annotation-checking">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id474" role=3D"doc-backlink">Consumed Annotation Checking</a>=
<a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefere=
nce.html#consumed-annotation-checking" title=3D"Link to this heading">=C2=
=B6</a></h2>
<p>Clang supports additional attributes for checking basic resource managem=
ent
properties, specifically for unique objects that have a single owning refer=
ence.
The following attributes are currently supported, although <strong>the impl=
ementation
for these annotations is currently in development and are subject to change=
.</strong></p>
<section id=3D"callable-when">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id475" role=3D"doc-backlink">callable_when</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#callab=
le-when" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id57">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
7" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">callable_when</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::callable_when</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((callable_when(...)))</span></code> to indicate what states a me=
thod
may be called in. Valid states are unconsumed, consumed, or unknown. Each
argument to this attribute must be a quoted string. E.g.:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((callable_when("unconsumed",</span> <span class=3D"pre">"unknown")))=
</span></code></p>
</section>
<section id=3D"consumable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id476" role=3D"doc-backlink">consumable</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#consumabl=
e" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id58">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
8" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">consumable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::consumable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Each <code class=3D"docutils literal notranslate"><span class=3D"pre">cl=
ass</span></code> that uses any of the typestate annotations must first be =
marked
using the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
consumable</span></code> attribute. Failure to do so will result in a warni=
ng.</p>
<p>This attribute accepts a single parameter that must be one of the follow=
ing:
<code class=3D"docutils literal notranslate"><span class=3D"pre">unknown</s=
pan></code>, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">consumed</span></code>, or <code class=3D"docutils literal notranslate">=
<span class=3D"pre">unconsumed</span></code>.</p>
</section>
<section id=3D"param-typestate">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id477" role=3D"doc-backlink">param_typestate</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#para=
m-typestate" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id59">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id5=
9" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">param_typestate</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::param_typestate</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute specifies expectations about function parameters. Calls t=
o an
function with annotated parameters will issue a warning if the correspondin=
g
argument isn=E2=80=99t in the expected state. The attribute is also used to=
 set the
initial state of the parameter when analyzing the function=E2=80=99s body.<=
/p>
</section>
<section id=3D"return-typestate">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id478" role=3D"doc-backlink">return_typestate</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ret=
urn-typestate" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id60">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
0" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">return_typestate</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::return_typestate</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ret=
urn_typestate</span></code> attribute can be applied to functions or parame=
ters.
When applied to a function the attribute specifies the state of the returne=
d
value. The function=E2=80=99s body is checked to ensure that it always retu=
rns a value
in the specified state. On the caller side, values returned by the annotate=
d
function are initialized to the given state.</p>
<p>When applied to a function parameter it modifies the state of an argumen=
t after
a call to the function returns. The function=E2=80=99s body is checked to e=
nsure that
the parameter is in the expected state before returning.</p>
</section>
<section id=3D"set-typestate">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id479" role=3D"doc-backlink">set_typestate</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#set-ty=
pestate" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id61">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
1" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">set_typestate</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::set_typestate</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Annotate methods that transition an object into a new state with
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((set_typestate(new_state)))</span></code>. The new state must be
unconsumed, consumed, or unknown.</p>
</section>
<section id=3D"test-typestate">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id480" role=3D"doc-backlink">test_typestate</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#test-=
typestate" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id62">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
2" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">test_typestate</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::test_typestate</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((test_typestate(tested_state)))</span></code> to indicate that a=
 method
returns true if the object is in the specified state..</p>
</section>
</section>
<section id=3D"customizing-swift-import">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id481" role=3D"doc-backlink">Customizing Swift Import</a><a c=
lass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.=
html#customizing-swift-import" title=3D"Link to this heading">=C2=B6</a></h=
2>
<p>Clang supports additional attributes for customizing how APIs are import=
ed into
Swift.</p>
<section id=3D"swift-async">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id482" role=3D"doc-backlink">swift_async</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-as=
ync" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id63">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
3" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_async</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_async</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_async</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_async</span></code> attribute specifies if and how a particular function=
 or
Objective-C method is imported into a swift async method. For instance:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"k">@interface</span> <span class=3D"bp">MyClass</s=
pan> : <span class=3D"bp">NSObject</span>
<span class=3D"p">-(</span><span class=3D"kt">void</span><span class=3D"p">=
)</span><span class=3D"nf">notActuallyAsync:</span><span class=3D"p">(</spa=
n><span class=3D"kt">int</span><span class=3D"p">)</span><span class=3D"nv"=
>p1</span><span class=3D"w"> </span><span class=3D"nf">withCompletionHandle=
r:</span><span class=3D"p">(</span><span class=3D"kt">void</span><span clas=
s=3D"w"> </span><span class=3D"p">(</span><span class=3D"o">^</span><span c=
lass=3D"p">)())</span><span class=3D"nv">handler</span>
<span class=3D"w">    </span><span class=3D"bp">__attribute__</span><span c=
lass=3D"p">((</span><span class=3D"n">swift_async</span><span class=3D"p">(=
</span><span class=3D"n">none</span><span class=3D"p">)));</span>

<span class=3D"p">-(</span><span class=3D"kt">void</span><span class=3D"p">=
)</span><span class=3D"nf">actuallyAsync:</span><span class=3D"p">(</span><=
span class=3D"kt">int</span><span class=3D"p">)</span><span class=3D"nv">p1=
</span><span class=3D"w"> </span><span class=3D"nf">callThisAsync:</span><s=
pan class=3D"p">(</span><span class=3D"kt">void</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"o">^</span><span class=3D"p">=
)())</span><span class=3D"nv">fun</span>
<span class=3D"w">    </span><span class=3D"bp">__attribute__</span><span c=
lass=3D"p">((</span><span class=3D"n">swift_async</span><span class=3D"p">(=
</span><span class=3D"n">swift_private</span><span class=3D"p">,</span><spa=
n class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">)));</sp=
an>
<span class=3D"k">@end</span>
</pre></div>
</div>
<p>Here, <code class=3D"docutils literal notranslate"><span class=3D"pre">n=
otActuallyAsync:withCompletionHandler</span></code> would have been importe=
d as
<code class=3D"docutils literal notranslate"><span class=3D"pre">async</spa=
n></code> (because it=E2=80=99s last parameter=E2=80=99s selector piece is
<code class=3D"docutils literal notranslate"><span class=3D"pre">withComple=
tionHandler</span></code>) if not for the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">swift_async(none)</span></code> attribute.
Conversely, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">actuallyAsync:callThisAsync</span></code> wouldn=E2=80=99t have been impo=
rted as
<code class=3D"docutils literal notranslate"><span class=3D"pre">async</spa=
n></code> if not for the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">swift_async</span></code> attribute because it doesn=E2=80=
=99t match the
naming convention.</p>
<p>When using <code class=3D"docutils literal notranslate"><span class=3D"p=
re">swift_async</span></code> to enable importing, the first argument to th=
e
attribute is either <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">swift_private</span></code> or <code class=3D"docutils literal no=
translate"><span class=3D"pre">not_swift_private</span></code> to indicate
whether the function/method is private to the current framework, and the se=
cond
argument is the index of the completion handler parameter.</p>
</section>
<section id=3D"swift-async-error">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id483" role=3D"doc-backlink">swift_async_error</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sw=
ift-async-error" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id64">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
4" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_async_error</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_async_error</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_async_error</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_async_error</span></code> attribute specifies how an error state will be
represented in a swift async method. It=E2=80=99s a bit analogous to the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">swift_error<=
/span></code>
attribute for the generated async method. The <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">swift_async_error</span></code> attribu=
te
can indicate a variety of different ways of representing an error.</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((swift_async_error(zero_argument,</span> <span class=3D"pre">N))=
)</span></code>, specifies that the
async method is considered to have failed if the Nth argument to the
completion handler is zero.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((swift_async_error(nonzero_argument,</span> <span class=3D"pre">=
N)))</span></code>, specifies that
the async method is considered to have failed if the Nth argument to the
completion handler is non-zero.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((swift_async_error(nonnull_error)))</span></code>, specifies tha=
t the
async method is considered to have failed if the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">NSError</span> <span class=3D"pre">*=
</span></code> argument to the
completion handler is non-null.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((swift_async_error(none)))</span></code>, specifies that the asy=
nc method
cannot fail.</p></li>
</ul>
<p>For instance:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"k">@interface</span> <span class=3D"bp">MyClass</s=
pan> : <span class=3D"bp">NSObject</span>
<span class=3D"p">-(</span><span class=3D"kt">void</span><span class=3D"p">=
)</span><span class=3D"nf">asyncMethod:</span><span class=3D"p">(</span><sp=
an class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"o">^</span><span class=3D"p">)(</span><span class=3D"kt"=
>char</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"kt">int</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"kt">float</span><span class=3D"p">))</span><span class=3D"nv">han=
dler</span>
<span class=3D"w">    </span><span class=3D"bp">__attribute__</span><span c=
lass=3D"p">((</span><span class=3D"n">swift_async</span><span class=3D"p">(=
</span><span class=3D"n">swift_private</span><span class=3D"p">,</span><spa=
n class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">)))</spa=
n>
<span class=3D"w">    </span><span class=3D"bp">__attribute__</span><span c=
lass=3D"p">((</span><span class=3D"n">swift_async_error</span><span class=
=3D"p">(</span><span class=3D"n">zero_argument</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"mi">2</span><span class=3D"p">=
)));</span>
<span class=3D"k">@end</span>
</pre></div>
</div>
<p>Here, the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">swift_async</span></code> attribute specifies that <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">handler</span></code> is the co=
mpletion
handler for this method, and the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">swift_async_error</span></code> attribute specifies =
that
the <code class=3D"docutils literal notranslate"><span class=3D"pre">int</s=
pan></code> parameter is the one that represents the error.</p>
</section>
<section id=3D"swift-async-name">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id484" role=3D"doc-backlink">swift_async_name</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swi=
ft-async-name" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id65">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
5" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_async_name</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_async_name</span></code> attribute provides the name of the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">async</span></code> o=
verload for
the given declaration in Swift. If this attribute is absent, the name is
transformed according to the algorithm built into the Swift compiler.</p>
<p>The argument is a string literal that contains the Swift name of the fun=
ction or
method. The name may be a compound Swift name. The function or method with =
such
an attribute must have more than zero parameters, as its last parameter is
assumed to be a callback that=E2=80=99s eliminated in the Swift <code class=
=3D"docutils literal notranslate"><span class=3D"pre">async</span></code> n=
ame.</p>
<blockquote>
<div><div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pr=
e><span></span><span class=3D"k">@interface</span> <span class=3D"nc">URL</=
span>
<span class=3D"p">+</span> <span class=3D"p">(</span><span class=3D"kt">voi=
d</span><span class=3D"p">)</span> <span class=3D"nf">loadContentsFrom:</sp=
an><span class=3D"p">(</span><span class=3D"n">URL</span><span class=3D"w">=
 </span><span class=3D"o">*</span><span class=3D"p">)</span><span class=3D"=
nv">url</span><span class=3D"w"> </span><span class=3D"nf">callback:</span>=
<span class=3D"p">(</span><span class=3D"kt">void</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"o">^</span><span class=3D"p=
">)(</span><span class=3D"bp">NSData</span><span class=3D"w"> </span><span =
class=3D"o">*</span><span class=3D"p">))</span><span class=3D"nv">data</spa=
n><span class=3D"w"> </span><span class=3D"bp">__attribute__</span><span cl=
ass=3D"p">((</span><span class=3D"n">__swift_async_name__</span><span class=
=3D"p">(</span><span class=3D"s">"URL.loadContentsFrom(_:)"</span><span cla=
ss=3D"p">)))</span>
<span class=3D"k">@end</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"swift-attr">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id485" role=3D"doc-backlink">swift_attr</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-att=
r" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id66">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
6" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_attr</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_attr</span></code> provides a Swift-specific annotation for the declarat=
ion
or type to which the attribute appertains to. It can be used on any declara=
tion
or type in Clang. This kind of annotation is ignored by Clang as it doesn=
=E2=80=99t have any
semantic meaning in languages supported by Clang. The Swift compiler can
interpret these annotations according to its own rules when importing C or
Objective-C declarations.</p>
</section>
<section id=3D"swift-bridge">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id486" role=3D"doc-backlink">swift_bridge</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-b=
ridge" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id67">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
7" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_bridge</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_bridge</span></code> attribute indicates that the declaration to which t=
he
attribute appertains is bridged to the named Swift type.</p>
<blockquote>
<div><div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pr=
e><span></span><span class=3D"bp">__attribute__</span><span class=3D"p">((<=
/span><span class=3D"n">__objc_root__</span><span class=3D"p">))</span>
<span class=3D"k">@interface</span> <span class=3D"nc">Base</span>
<span class=3D"p">-</span> <span class=3D"p">(</span><span class=3D"kt">ins=
tancetype</span><span class=3D"p">)</span><span class=3D"nf">init</span><sp=
an class=3D"p">;</span>
<span class=3D"k">@end</span>

<span class=3D"bp">__attribute__</span><span class=3D"p">((</span><span cla=
ss=3D"n">__swift_bridge__</span><span class=3D"p">(</span><span class=3D"s"=
>"BridgedI"</span><span class=3D"p">)))</span>
<span class=3D"k">@interface</span> <span class=3D"nc">I</span> : <span cla=
ss=3D"nc">Base</span>
<span class=3D"k">@end</span>
</pre></div>
</div>
</div></blockquote>
<p>In this example, the Objective-C interface <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">I</span></code> will be made available =
to Swift
with the name <code class=3D"docutils literal notranslate"><span class=3D"p=
re">BridgedI</span></code>. It would be possible for the compiler to refer =
to
<code class=3D"docutils literal notranslate"><span class=3D"pre">I</span></=
code> still in order to bridge the type back to Objective-C.</p>
</section>
<section id=3D"swift-bridged">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id487" role=3D"doc-backlink">swift_bridged</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-=
bridged" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id68">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
8" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_bridged_typedef</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_bridged_typedef</span></code> attribute indicates that when the typedef =
to which
the attribute appertains is imported into Swift, it should refer to the bri=
dged
Swift type (e.g. Swift=E2=80=99s <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">String</span></code>) rather than the Objective-C ty=
pe as written
(e.g. <code class=3D"docutils literal notranslate"><span class=3D"pre">NSSt=
ring</span></code>).</p>
<blockquote>
<div><div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pr=
e><span></span><span class=3D"k">@interface</span> <span class=3D"bp">NSStr=
ing</span><span class=3D"p">;</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"bp=
">NSString</span><span class=3D"w"> </span><span class=3D"o">*</span><span =
class=3D"n">AliasedString</span><span class=3D"w"> </span><span class=3D"bp=
">__attribute__</span><span class=3D"p">((</span><span class=3D"n">__swift_=
bridged_typedef__</span><span class=3D"p">));</span>

<span class=3D"k">extern</span><span class=3D"w"> </span><span class=3D"kt"=
>void</span><span class=3D"w"> </span><span class=3D"nf">acceptsAliasedStri=
ng</span><span class=3D"p">(</span><span class=3D"n">AliasedString</span><s=
pan class=3D"w"> </span><span class=3D"n">_Nonnull</span><span class=3D"w">=
 </span><span class=3D"n">parameter</span><span class=3D"p">);</span>
</pre></div>
</div>
</div></blockquote>
<p>In this case, the function <code class=3D"docutils literal notranslate">=
<span class=3D"pre">acceptsAliasedString</span></code> will be imported int=
o Swift
as a function which accepts a <code class=3D"docutils literal notranslate">=
<span class=3D"pre">String</span></code> type parameter.</p>
</section>
<section id=3D"swift-error">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id488" role=3D"doc-backlink">swift_error</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-er=
ror" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id69">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id6=
9" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_error</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_error</span></code> attribute controls whether a particular function (or
Objective-C method) is imported into Swift as a throwing function, and if s=
o,
which dynamic convention it uses.</p>
<p>All of these conventions except <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">none</span></code> require the function to have an=
 error
parameter. Currently, the error parameter is always the last parameter of t=
ype
<code class=3D"docutils literal notranslate"><span class=3D"pre">NSError**<=
/span></code> or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">CFErrorRef*</span></code>. Swift will remove the error parameter f=
rom
the imported API. When calling the API, Swift will always pass a valid addr=
ess
initialized to a null pointer.</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_error(none)</span></code> means that the function should not be imported=
 as
throwing. The error parameter and result type will be imported normally.</p=
></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_error(null_result)</span></code> means that calls to the function should=
 be
considered to have thrown if they return a null value. The return type must=
 be
a pointer type, and it will be imported into Swift with a non-optional type=
.
This is the default error convention for Objective-C methods that return
pointers.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_error(zero_result)</span></code> means that calls to the function should=
 be
considered to have thrown if they return a zero result. The return type mus=
t be
an integral type. If the return type would have been imported as <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></code>, =
it
is instead imported as <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">Void</span></code>. This is the default error convention for
Objective-C methods that return a type that would be imported as <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></code>.<=
/p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_error(nonzero_result)</span></code> means that calls to the function sho=
uld be
considered to have thrown if they return a non-zero result. The return type=
 must
be an integral type. If the return type would have been imported as <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></code=
>,
it is instead imported as <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Void</span></code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_error(nonnull_error)</span></code> means that calls to the function shou=
ld be
considered to have thrown if they leave a non-null error in the error param=
eter.
The return type is left unmodified.</p></li>
</ul>
</section>
<section id=3D"swift-name">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id489" role=3D"doc-backlink">swift_name</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-nam=
e" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id70">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
0" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_name</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_name</span></code> attribute provides the name of the declaration in Swi=
ft. If
this attribute is absent, the name is transformed according to the algorith=
m
built into the Swift compiler.</p>
<p>The argument is a string literal that contains the Swift name of the fun=
ction,
variable, or type. When renaming a function, the name may be a compound Swi=
ft
name. For a type, enum constant, property, or variable declaration, the nam=
e
must be a simple or qualified identifier.</p>
<blockquote>
<div><div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pr=
e><span></span><span class=3D"k">@interface</span> <span class=3D"nc">URL</=
span>
<span class=3D"p">-</span> <span class=3D"p">(</span><span class=3D"kt">voi=
d</span><span class=3D"p">)</span> <span class=3D"nf">initWithString:</span=
><span class=3D"p">(</span><span class=3D"bp">NSString</span><span class=3D=
"w"> </span><span class=3D"o">*</span><span class=3D"p">)</span><span class=
=3D"nv">s</span><span class=3D"w"> </span><span class=3D"bp">__attribute__<=
/span><span class=3D"p">((</span><span class=3D"n">__swift_name__</span><sp=
an class=3D"p">(</span><span class=3D"s">"URL.init(_:)"</span><span class=
=3D"p">)))</span>
<span class=3D"k">@end</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"bp">=
__attribute__</span><span class=3D"p">((</span><span class=3D"n">__swift_na=
me__</span><span class=3D"p">(</span><span class=3D"s">"squareRoot()"</span=
><span class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"n">sq=
rt</span><span class=3D"p">(</span><span class=3D"kt">double</span><span cl=
ass=3D"w"> </span><span class=3D"n">v</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"swift-newtype">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id490" role=3D"doc-backlink">swift_newtype</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-=
newtype" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id71">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
1" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_newtype</span></code> <br> <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">swift_wrapper</span></code></p><=
/td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_newtype</span></code> attribute indicates that the typedef to which the
attribute appertains is imported as a new Swift type of the typedef=E2=80=
=99s name.
Previously, the attribute was spelt <code class=3D"docutils literal notrans=
late"><span class=3D"pre">swift_wrapper</span></code>. While the behaviour =
of
the attribute is identical with either spelling, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">swift_wrapper</span></code> is
deprecated, only exists for compatibility purposes, and should not be used =
in
new code.</p>
<ul>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_newtype(struct)</span></code> means that a Swift struct will be created =
for this
typedef.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_newtype(enum)</span></code> means that a Swift enum will be created for =
this
typedef.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"c1">// Import UIFontTextStyle as an enum type, with e=
numerated values being</span>
<span class=3D"c1">// constants.</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"n"=
>NSString</span><span class=3D"w"> </span><span class=3D"o">*</span><span c=
lass=3D"w"> </span><span class=3D"n">UIFontTextStyle</span><span class=3D"w=
"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</span>=
<span class=3D"n">__swift_newtype__</span><span class=3D"p">(</span><span c=
lass=3D"k">enum</span><span class=3D"p">)));</span>

<span class=3D"c1">// Import UIFontDescriptorFeatureKey as a structure type=
, with enumerated</span>
<span class=3D"c1">// values being members of the type structure.</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"n"=
>NSString</span><span class=3D"w"> </span><span class=3D"o">*</span><span c=
lass=3D"w"> </span><span class=3D"n">UIFontDescriptorFeatureKey</span><span=
 class=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p=
">((</span><span class=3D"n">__swift_newtype__</span><span class=3D"p">(</s=
pan><span class=3D"k">struct</span><span class=3D"p">)));</span>
</pre></div>
</div>
</li>
</ul>
</section>
<section id=3D"swift-objc-members">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id491" role=3D"doc-backlink">swift_objc_members</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#swift-objc-members" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id72">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
2" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_objc_members</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute indicates that Swift subclasses and members of Swift exte=
nsions
of this class will be implicitly marked with the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">@objcMembers</span></code> Swift
attribute, exposing them back to Objective-C.</p>
</section>
<section id=3D"swift-private">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id492" role=3D"doc-backlink">swift_private</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-=
private" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id73">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
3" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_private</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Declarations marked with the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">swift_private</span></code> attribute are hidden from=
 the
framework client but are still made available for use within the framework =
or
Swift SDK overlay.</p>
<p>The purpose of this attribute is to permit a more idomatic implementatio=
n of
declarations in Swift while hiding the non-idiomatic one.</p>
</section>
</section>
<section id=3D"declaration-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id493" role=3D"doc-backlink">Declaration Attributes</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#declaration-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<section id=3D"owner">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id494" role=3D"doc-backlink">Owner</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#owner" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id74">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
4" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gsl=
::Owner</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>This attribute is experimental and its effect on analysis is subject to =
change in
a future version of clang.</p>
</div>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">[[gsl::Owner(T)]]</span></code> applies to structs and classes tha=
t own an
object of type <code class=3D"docutils literal notranslate"><span class=3D"=
pre">T</span></code>:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span>class [[gsl::Owner(int)]] IntOwner {
private:
  int value;
public:
  int *getInt() { return &amp;value; }
};
</pre></div>
</div>
<p>The argument <code class=3D"docutils literal notranslate"><span class=3D=
"pre">T</span></code> is optional and is ignored.
This attribute may be used by analysis tools and has no effect on code
generation. A <code class=3D"docutils literal notranslate"><span class=3D"p=
re">void</span></code> argument means that the class can own any type.</p>
<p>See <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#pointer">Pointer</a> for an example.</p>
</section>
<section id=3D"pointer">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id495" role=3D"doc-backlink">Pointer</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#pointer" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id75">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
5" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gsl=
::Pointer</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>This attribute is experimental and its effect on analysis is subject to =
change in
a future version of clang.</p>
</div>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">[[gsl::Pointer(T)]]</span></code> applies to structs and classes t=
hat behave
like pointers to an object of type <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">T</span></code>:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span>class [[gsl::Pointer(int)]] IntPointer {
private:
  int *valuePointer;
public:
  IntPointer(const IntOwner&amp;);
  int *getInt() { return valuePointer; }
};
</pre></div>
</div>
<p>The argument <code class=3D"docutils literal notranslate"><span class=3D=
"pre">T</span></code> is optional and is ignored.
This attribute may be used by analysis tools and has no effect on code
generation. A <code class=3D"docutils literal notranslate"><span class=3D"p=
re">void</span></code> argument means that the pointer can point to any typ=
e.</p>
<p>Example:
When constructing an instance of a class annotated like this (a Pointer) fr=
om
an instance of a class annotated with <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">[[gsl::Owner]]</span></code> (an Owner),
then the analysis will consider the Pointer to point inside the Owner.
When the Owner=E2=80=99s lifetime ends, it will consider the Pointer to be =
dangling.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">f</span><span class=3D"p">()</span><span class=3D"w"> </span><span =
class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">IntPointer</span><span class=
=3D"w"> </span><span class=3D"n">P</span><span class=3D"p">(</span><span cl=
ass=3D"n">IntOwner</span><span class=3D"p">{});</span><span class=3D"w"> </=
span><span class=3D"c1">// P "points into" a temporary IntOwner object</spa=
n>
<span class=3D"w">  </span><span class=3D"n">P</span><span class=3D"p">.</s=
pan><span class=3D"n">getInt</span><span class=3D"p">();</span><span class=
=3D"w"> </span><span class=3D"c1">// P is dangling</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>If a template class is annotated with <code class=3D"docutils literal no=
translate"><span class=3D"pre">[[gsl::Owner]]</span></code>, and the first
instantiated template argument is a pointer type (raw pointer, or <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">[[gsl::Pointer]]</s=
pan></code>),
the analysis will consider the instantiated class as a container of the poi=
nter.
When constructing such an object from a GSL owner object, the analysis will
assume that the container holds a pointer to the owner object. Consequently=
,
when the owner object is destroyed, the pointer will be considered dangling=
.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">f</span><span class=3D"p">()</span><span class=3D"w"> </span><span =
class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">vector</span><span class=3D"o">&lt;</span><span cl=
ass=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">string_vie=
w</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span class=
=3D"n">v</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"p">{</span><span class=3D"n">std</span><=
span class=3D"o">::</span><span class=3D"n">string</span><span class=3D"p">=
()};</span><span class=3D"w"> </span><span class=3D"c1">// v holds a dangli=
ng pointer.</span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">optional</span><span class=3D"o">&lt;</span><span =
class=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">string_v=
iew</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span clas=
s=3D"n">o</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span=
 class=3D"w"> </span><span class=3D"n">std</span><span class=3D"o">::</span=
><span class=3D"n">string</span><span class=3D"p">();</span><span class=3D"=
w"> </span><span class=3D"c1">// o holds a dangling pointer.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"single-inheritance-multiple-inheritance-virtual-inheritance"=
>
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id496" role=3D"doc-backlink">__single_inheritance, __multiple=
_inheritance, __virtual_inheritance</a><a class=3D"headerlink" href=3D"http=
s://clang.llvm.org/docs/AttributeReference.html#single-inheritance-multiple=
-inheritance-virtual-inheritance" title=3D"Link to this heading">=C2=B6</a>=
</h3>
<table class=3D"docutils align-default" id=3D"id76">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
6" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__s=
ingle_inheritance</span></code> <br> <code class=3D"docutils literal notran=
slate"><span class=3D"pre">__multiple_inheritance</span></code> <br> <code =
class=3D"docutils literal notranslate"><span class=3D"pre">__virtual_inheri=
tance</span></code> <br> <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">__unspecified_inheritance</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This collection of keywords is enabled under <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">-fms-extensions</span></code> and con=
trols
the pointer-to-member representation used on <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">*-*-win32</span></code> targets.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">*-*=
-win32</span></code> targets utilize a pointer-to-member representation whi=
ch
varies in size and alignment depending on the definition of the underlying
class.</p>
<p>However, this is problematic when a forward declaration is only availabl=
e and
no definition has been made yet. In such cases, Clang is forced to utilize =
the
most general representation that is available to it.</p>
<p>These keywords make it possible to use a pointer-to-member representatio=
n other
than the most general one regardless of whether or not the definition will =
ever
be present in the current translation unit.</p>
<p>This family of keywords belong between the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">class-key</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">class-name</span></co=
de>:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">__single_inheritance</span><span class=3D"w"> </span><span class=
=3D"n">S</span><span class=3D"p">;</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">S<=
/span><span class=3D"o">::*</span><span class=3D"n">i</span><span class=3D"=
p">;</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>S</span><span class=3D"w"> </span><span class=3D"p">{};</span>
</pre></div>
</div>
<p>This keyword can be applied to class templates but only has an effect wh=
en used
on full specializations:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">template</span><span class=3D"w"> </span><span c=
lass=3D"o">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> <=
/span><span class=3D"nc">T</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">typename</span><span class=3D"w"> </span><span =
class=3D"nc">U</span><span class=3D"o">&gt;</span><span class=3D"w"> </span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">__single_inheritance</span><span class=3D"w"> </span><span class=3D"n">A<=
/span><span class=3D"p">;</span><span class=3D"w"> </span><span class=3D"c1=
">// warning: inheritance model ignored on primary template</span>
<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> </span><sp=
an class=3D"nc">T</span><span class=3D"o">&gt;</span><span class=3D"w"> </s=
pan><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D=
"nc">__multiple_inheritance</span><span class=3D"w"> </span><span class=3D"=
n">A</span><span class=3D"o">&lt;</span><span class=3D"n">T</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">T</span><span =
class=3D"o">&gt;</span><span class=3D"p">;</span><span class=3D"w"> </span>=
<span class=3D"c1">// warning: inheritance model ignored on partial special=
ization</span>
<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;&gt;</span><span class=3D"w"> </span><span class=3D"k">struct</span><=
span class=3D"w"> </span><span class=3D"nc">__single_inheritance</span><spa=
n class=3D"w"> </span><span class=3D"n">A</span><span class=3D"o">&lt;</spa=
n><span class=3D"kt">int</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"kt">float</span><span class=3D"o">&gt;</span><span c=
lass=3D"p">;</span>
</pre></div>
</div>
<p>Note that choosing an inheritance model less general than strictly neces=
sary is
an error:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">__multiple_inheritance</span><span class=3D"w"> </span><span clas=
s=3D"n">S</span><span class=3D"p">;</span><span class=3D"w"> </span><span c=
lass=3D"c1">// error: inheritance model does not match definition</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">S<=
/span><span class=3D"o">::*</span><span class=3D"n">i</span><span class=3D"=
p">;</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>S</span><span class=3D"w"> </span><span class=3D"p">{};</span>
</pre></div>
</div>
</section>
<section id=3D"asm">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id497" role=3D"doc-backlink">asm</a><a class=3D"headerlink" h=
ref=3D"https://clang.llvm.org/docs/AttributeReference.html#asm" title=3D"Li=
nk to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id77">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
7" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">asm=
</span></code> <br> <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">__asm__</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute can be used on a function or variable to specify its symb=
ol name.</p>
<p>On some targets, all C symbols are prefixed by default with a single cha=
racter,
typically <code class=3D"docutils literal notranslate"><span class=3D"pre">=
_</span></code>. This was done historically to distinguish them from symbol=
s
used by other languages. (This prefix is also added to the standard Itanium
C++ ABI prefix on =E2=80=9Cmangled=E2=80=9D symbol names, so that e.g. on s=
uch targets the true
symbol name for a C++ variable declared as <code class=3D"docutils literal =
notranslate"><span class=3D"pre">int</span> <span class=3D"pre">cppvar;</sp=
an></code> would be
<code class=3D"docutils literal notranslate"><span class=3D"pre">__Z6cppvar=
</span></code>; note the two underscores.)  This prefix is <em>not</em> add=
ed to the
symbol names specified by the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">asm</span></code> attribute; programmers wishing to mat=
ch a
C symbol name must compensate for this.</p>
<p>For example, consider the following C code:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"n">var1</span><span class=3D"w"> </span><span class=3D"k">asm</span><sp=
an class=3D"p">(</span><span class=3D"s">"altvar"</span><span class=3D"p">)=
</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D=
"w"> </span><span class=3D"mi">1</span><span class=3D"p">;</span><span clas=
s=3D"w">  </span><span class=3D"c1">// "altvar" in symbol table.</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">va=
r2</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">;</span><span c=
lass=3D"w"> </span><span class=3D"c1">// "_var2" in symbol table.</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
unc1</span><span class=3D"p">(</span><span class=3D"kt">void</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">asm</span><sp=
an class=3D"p">(</span><span class=3D"s">"altfunc"</span><span class=3D"p">=
);</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
func1</span><span class=3D"p">(</span><span class=3D"kt">void</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{}</span><sp=
an class=3D"w"> </span><span class=3D"c1">// "altfunc" in symbol table.</sp=
an>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
func2</span><span class=3D"p">(</span><span class=3D"kt">void</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{}</span><sp=
an class=3D"w"> </span><span class=3D"c1">// "_func2" in symbol table.</spa=
n>
</pre></div>
</div>
<p>Clang=E2=80=99s implementation of this attribute is compatible with GCC=
=E2=80=99s, <a class=3D"reference external" href=3D"https://gcc.gnu.org/onl=
inedocs/gcc/Asm-Labels.html">documented here</a>.</p>
<p>While it is possible to use this attribute to name a special symbol used
internally by the compiler, such as an LLVM intrinsic, this is neither
recommended nor supported and may cause the compiler to crash or miscompile=
.
Users who wish to gain access to intrinsic behavior are strongly encouraged=
 to
request new builtin functions.</p>
</section>
<section id=3D"coro-await-elidable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id498" role=3D"doc-backlink">coro_await_elidable</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#coro-await-elidable" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id78">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
8" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">coro_await_elidable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_await_elidable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_await_elidable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::coro_await_elidable]]</span></code> is a class attribute which can be
applied to a coroutine return type. It provides a hint to the compiler to a=
pply
Heap Allocation Elision more aggressively.</p>
<p>When a coroutine function returns such a type, a direct call expression =
therein
that returns a prvalue of a type attributed <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">[[clang::coro_await_elidable]]</span></co=
de>
is said to be under a safe elide context if one of the following is true:
- it is the immediate right-hand side operand to a co_await expression.
- it is an argument to a <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">[[clang::coro_await_elidable_argument]]</span></code> parame=
ter
or parameter pack of another direct call expression under a safe elide cont=
ext.</p>
<p>Do note that the safe elide context applies only to the call expression =
itself,
and the context does not transitively include any of its subexpressions unl=
ess
exceptional rules of <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">[[clang::coro_await_elidable_argument]]</span></code> apply.</p>
<p>The compiler performs heap allocation elision on call expressions under =
a safe
elide context, if the callee is a coroutine.</p>
<p>Example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">class</span><span class=3D"w"> </span><span clas=
s=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</span><=
span class=3D"n">coro_await_elidable</span><span class=3D"p">]]</span><span=
 class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"w"> </span=
><span class=3D"p">{</span><span class=3D"w"> </span><span class=3D"p">...<=
/span><span class=3D"w"> </span><span class=3D"p">};</span>

<span class=3D"n">Task</span><span class=3D"w"> </span><span class=3D"nf">f=
oo</span><span class=3D"p">();</span>
<span class=3D"n">Task</span><span class=3D"w"> </span><span class=3D"nf">b=
ar</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">co_await</span><span class=3D"=
w"> </span><span class=3D"n">foo</span><span class=3D"p">();</span><span cl=
ass=3D"w"> </span><span class=3D"c1">// foo()'s coroutine frame on this lin=
e is elidable</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">t</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"n">foo</span><span cla=
ss=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1">// foo()'s =
coroutine frame on this line is NOT elidable</span>
<span class=3D"w">  </span><span class=3D"k">co_await</span><span class=3D"=
w"> </span><span class=3D"n">t</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Such elision replaces the heap allocated activation frame of the callee =
coroutine
with a local variable within the enclosing braces in the caller=E2=80=99s s=
tack frame.
The local variable, like other variables in coroutines, may be collected in=
to the
coroutine frame, which may be allocated on the heap. The behavior is undefi=
ned
if the caller coroutine is destroyed earlier than the callee coroutine.</p>
</section>
<section id=3D"coro-await-elidable-argument">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id499" role=3D"doc-backlink">coro_await_elidable_argument</a>=
<a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefere=
nce.html#coro-await-elidable-argument" title=3D"Link to this heading">=C2=
=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id79">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id7=
9" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">coro_await_elidable_argument</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_await_elidable_argument</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_await_elidable_argument</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::coro_await_elidable_argument]]</span></code> is a function parameter =
attribute.
It works in conjunction with <code class=3D"docutils literal notranslate"><=
span class=3D"pre">[[clang::coro_await_elidable]]</span></code> to propagat=
e a
safe elide context to a parameter or parameter pack if the function is call=
ed
under a safe elide context.</p>
<p>This is sometimes necessary on utility functions used to compose or modi=
fy the
behavior of a callee coroutine.</p>
<p>Example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">template</span><span class=3D"w"> </span><span c=
lass=3D"o">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> <=
/span><span class=3D"nc">T</span><span class=3D"o">&gt;</span>
<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"p">[=
[</span><span class=3D"n">clang</span><span class=3D"o">::</span><span clas=
s=3D"n">coro_await_elidable</span><span class=3D"p">]]</span><span class=3D=
"w"> </span><span class=3D"n">Task</span><span class=3D"w"> </span><span cl=
ass=3D"p">{</span><span class=3D"w"> </span><span class=3D"p">...</span><sp=
an class=3D"w"> </span><span class=3D"p">};</span>

<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"k">typename</span><span class=3D"p">...</span><=
span class=3D"w"> </span><span class=3D"n">T</span><span class=3D"o">&gt;</=
span>
<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"p">[=
[</span><span class=3D"n">clang</span><span class=3D"o">::</span><span clas=
s=3D"n">coro_await_elidable</span><span class=3D"p">]]</span><span class=3D=
"w"> </span><span class=3D"n">WhenAll</span><span class=3D"w"> </span><span=
 class=3D"p">{</span><span class=3D"w"> </span><span class=3D"p">...</span>=
<span class=3D"w"> </span><span class=3D"p">};</span>

<span class=3D"c1">// `when_all` is a utility function that composes corout=
ines. It does not</span>
<span class=3D"c1">// need to be a coroutine to propagate.</span>
<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"k">typename</span><span class=3D"p">...</span><=
span class=3D"w"> </span><span class=3D"n">T</span><span class=3D"o">&gt;</=
span>
<span class=3D"n">WhenAll</span><span class=3D"o">&lt;</span><span class=3D=
"n">T</span><span class=3D"p">...</span><span class=3D"o">&gt;</span><span =
class=3D"w"> </span><span class=3D"n">when_all</span><span class=3D"p">([[<=
/span><span class=3D"n">clang</span><span class=3D"o">::</span><span class=
=3D"n">coro_await_elidable_argument</span><span class=3D"p">]]</span><span =
class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"o">&lt;</sp=
an><span class=3D"n">T</span><span class=3D"o">&gt;</span><span class=3D"w"=
> </span><span class=3D"n">tasks</span><span class=3D"p">...);</span>

<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">foo</span><span class=3D"p">();</span>
<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">bar</span><span class=3D"p">();</span>
<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">void</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span c=
lass=3D"n">example1</span><span class=3D"p">()</span><span class=3D"w"> </s=
pan><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// `when_all``, `foo``, and `=
bar` are all elide safe because `when_all` is</span>
<span class=3D"w">  </span><span class=3D"c1">// under a safe elide context=
 and, thanks to the [[clang::coro_await_elidable_argument]]</span>
<span class=3D"w">  </span><span class=3D"c1">// attribute, such context is=
 propagated to foo and bar.</span>
<span class=3D"w">  </span><span class=3D"k">co_await</span><span class=3D"=
w"> </span><span class=3D"n">when_all</span><span class=3D"p">(</span><span=
 class=3D"n">foo</span><span class=3D"p">(),</span><span class=3D"w"> </spa=
n><span class=3D"n">bar</span><span class=3D"p">());</span>
<span class=3D"p">}</span>

<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">void</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span c=
lass=3D"n">example2</span><span class=3D"p">()</span><span class=3D"w"> </s=
pan><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// `when_all` and `bar` are e=
lide safe. `foo` is not elide safe.</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">f</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"n">foo</span><span cla=
ss=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"k">co_await</span><span class=3D"=
w"> </span><span class=3D"n">when_all</span><span class=3D"p">(</span><span=
 class=3D"n">f</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">bar</span><span class=3D"p">());</span>
<span class=3D"p">}</span>


<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">void</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span c=
lass=3D"n">example3</span><span class=3D"p">()</span><span class=3D"w"> </s=
pan><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// None of the calls are elid=
e safe.</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">t</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"n">when_all</span><spa=
n class=3D"p">(</span><span class=3D"n">foo</span><span class=3D"p">(),</sp=
an><span class=3D"w"> </span><span class=3D"n">bar</span><span class=3D"p">=
());</span>
<span class=3D"w">  </span><span class=3D"k">co_await</span><span class=3D"=
w"> </span><span class=3D"n">t</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"coro-disable-lifetimebound">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id500" role=3D"doc-backlink">coro_disable_lifetimebound</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferenc=
e.html#coro-disable-lifetimebound" title=3D"Link to this heading">=C2=B6</a=
></h3>
<table class=3D"docutils align-default" id=3D"id80">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
0" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">coro_disable_lifetimebound</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_disable_lifetimebound</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_disable_lifetimebound</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::coro_lifetimebound]]</span></code> is a class attribute which can be =
applied
to a coroutine return type (<a class=3D"reference external" href=3D"https:/=
/clang.llvm.org/docs/AttributeReference.html#coro-return-type">CRT</a>) (i.=
e.
it should also be annotated with <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">[[clang::coro_return_type]]</span></code>).</p>
<p>All parameters of a function are considered to be lifetime bound if the =
function returns a
coroutine return type (CRT) annotated with <code class=3D"docutils literal =
notranslate"><span class=3D"pre">[[clang::coro_lifetimebound]]</span></code=
>.
This lifetime bound analysis can be disabled for a coroutine wrapper or a c=
oroutine by annotating the function
with <code class=3D"docutils literal notranslate"><span class=3D"pre">[[cla=
ng::coro_disable_lifetimebound]]</span></code> function attribute .
See <a class=3D"reference external" href=3D"https://clang.llvm.org/docs/Att=
ributeReference.html#lifetimebound">documentation</a> of <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">[[clang::lifetimebound]]</sp=
an></code> for details about lifetime bound analysis.</p>
<p>Reference parameters of a coroutine are susceptible to capturing referen=
ces to temporaries or local variables.</p>
<p>For example,</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">task</span><span class=3D"o">&lt;</span><span cl=
ass=3D"kt">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span=
><span class=3D"n">coro</span><span class=3D"p">(</span><span class=3D"k">c=
onst</span><span class=3D"w"> </span><span class=3D"kt">int</span><span cla=
ss=3D"o">&amp;</span><span class=3D"w"> </span><span class=3D"n">a</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span=
><span class=3D"w"> </span><span class=3D"k">co_return</span><span class=3D=
"w"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span class=
=3D"o">+</span><span class=3D"w"> </span><span class=3D"mi">1</span><span c=
lass=3D"p">;</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"n">task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">dangling_refs</span><span class=3D"p">(</span><span class=3D"kt">=
int</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// `coro` captures reference =
to a temporary. `foo` would now contain a dangling reference to `a`.</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">foo</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">coro</span><span =
class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"c1">// `coro` captures reference =
to local variable `a` which is destroyed after the return.</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">coro</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Lifetime bound static analysis can be used to detect such instances when=
 coroutines capture references
which may die earlier than the coroutine frame itself. In the above example=
, if the CRT <cite>task</cite> is annotated with
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang::c=
oro_lifetimebound]]</span></code>, then lifetime bound analysis would detec=
t capturing reference to
temporaries or return address of a local variable.</p>
<p>Both coroutines and coroutine wrappers are part of this analysis.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">template</span><span class=3D"w"> </span><span c=
lass=3D"o">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> <=
/span><span class=3D"nc">T</span><span class=3D"o">&gt;</span><span class=
=3D"w"> </span><span class=3D"k">struct</span><span class=3D"w"> </span><sp=
an class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::<=
/span><span class=3D"n">coro_return_type</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">clang</span><span class=3D"o">::<=
/span><span class=3D"n">coro_lifetimebound</span><span class=3D"p">]]</span=
><span class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">using</span><span class=3D"w">=
 </span><span class=3D"n">promise_type</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">some_pr=
omise_type</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">coro</span><span class=3D"p">(</span><span class=3D"k">const</spa=
n><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"o">=
&amp;</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span><span cl=
ass=3D"w"> </span><span class=3D"k">co_return</span><span class=3D"w"> </sp=
an><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+<=
/span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p=
">;</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">coro_wrapper</span><span class=3D"p">]]</span><s=
pan class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"o">&lt;=
</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span><span clas=
s=3D"w"> </span><span class=3D"n">coro_wrapper</span><span class=3D"p">(</s=
pan><span class=3D"k">const</span><span class=3D"w"> </span><span class=3D"=
kt">int</span><span class=3D"o">&amp;</span><span class=3D"w"> </span><span=
 class=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"k">const</span><span class=3D"w"> </span><span class=3D"kt">in=
t</span><span class=3D"o">&amp;</span><span class=3D"w"> </span><span class=
=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D=
"o">&gt;</span><span class=3D"w"> </span><span class=3D"n">b</span><span cl=
ass=3D"w"> </span><span class=3D"o">?</span><span class=3D"w"> </span><span=
 class=3D"n">coro</span><span class=3D"p">(</span><span class=3D"n">a</span=
><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">:</s=
pan><span class=3D"w"> </span><span class=3D"n">coro</span><span class=3D"p=
">(</span><span class=3D"n">b</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">temporary_reference</span><span class=3D"p">()</span><span class=
=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">foo</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">coro</span><span =
class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span><=
span class=3D"w"> </span><span class=3D"c1">// warning: capturing reference=
 to a temporary which would die after the expression.</span>

<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"mi">1</span><span clas=
s=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">bar</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">coro_wrapper</spa=
n><span class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p"=
>);</span><span class=3D"w"> </span><span class=3D"c1">// warning: `b` capt=
ures reference to a temporary.</span>

<span class=3D"w">  </span><span class=3D"k">co_return</span><span class=3D=
"w"> </span><span class=3D"k">co_await</span><span class=3D"w"> </span><spa=
n class=3D"n">coro</span><span class=3D"p">(</span><span class=3D"mi">1</sp=
an><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"c1">=
// fine.</span>
<span class=3D"p">}</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">coro_wrapper</span><span class=3D"p">]]</span><s=
pan class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"o">&lt;=
</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span><span clas=
s=3D"w"> </span><span class=3D"n">stack_reference</span><span class=3D"p">(=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">coro</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">);</span><span class=3D"w"> </span><span c=
lass=3D"c1">// warning: returning address of stack variable `a`.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This analysis can be disabled for all calls to a particular function by =
annotating the function
with function attribute <code class=3D"docutils literal notranslate"><span =
class=3D"pre">[[clang::coro_disable_lifetimebound]]</span></code>.
For example, this could be useful for coroutine wrappers which accept refer=
ence parameters
but do not pass them to the underlying coroutine or pass them by value.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">Task</span><span class=3D"o">&lt;</span><span cl=
ass=3D"kt">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span=
><span class=3D"n">coro</span><span class=3D"p">(</span><span class=3D"kt">=
int</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span><span cl=
ass=3D"w"> </span><span class=3D"k">co_return</span><span class=3D"w"> </sp=
an><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+<=
/span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p=
">;</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">coro_wrapper</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">clang</span><span class=3D"o">::</=
span><span class=3D"n">coro_disable_lifetimebound</span><span class=3D"p">]=
]</span><span class=3D"w"> </span><span class=3D"n">Task</span><span class=
=3D"o">&lt;</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span=
><span class=3D"w"> </span><span class=3D"n">coro_wrapper</span><span class=
=3D"p">(</span><span class=3D"k">const</span><span class=3D"w"> </span><spa=
n class=3D"kt">int</span><span class=3D"o">&amp;</span><span class=3D"w"> <=
/span><span class=3D"n">a</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">coro</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+</span><span cl=
ass=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">u=
se</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">task</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">coro_wrapper</=
span><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p"=
>);</span><span class=3D"w"> </span><span class=3D"c1">// use of temporary =
is fine as the argument is not lifetime bound.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"coro-lifetimebound">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id501" role=3D"doc-backlink">coro_lifetimebound</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#coro-lifetimebound" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id81">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
1" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">coro_lifetimebound</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_lifetimebound</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_lifetimebound</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::coro_lifetimebound]]</span></code> is a class attribute which can be =
applied
to a coroutine return type (<a class=3D"reference external" href=3D"https:/=
/clang.llvm.org/docs/AttributeReference.html#coro-return-type">CRT</a>) (i.=
e.
it should also be annotated with <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">[[clang::coro_return_type]]</span></code>).</p>
<p>All parameters of a function are considered to be lifetime bound if the =
function returns a
coroutine return type (CRT) annotated with <code class=3D"docutils literal =
notranslate"><span class=3D"pre">[[clang::coro_lifetimebound]]</span></code=
>.
This lifetime bound analysis can be disabled for a coroutine wrapper or a c=
oroutine by annotating the function
with <code class=3D"docutils literal notranslate"><span class=3D"pre">[[cla=
ng::coro_disable_lifetimebound]]</span></code> function attribute .
See <a class=3D"reference external" href=3D"https://clang.llvm.org/docs/Att=
ributeReference.html#lifetimebound">documentation</a> of <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">[[clang::lifetimebound]]</sp=
an></code> for details about lifetime bound analysis.</p>
<p>Reference parameters of a coroutine are susceptible to capturing referen=
ces to temporaries or local variables.</p>
<p>For example,</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">task</span><span class=3D"o">&lt;</span><span cl=
ass=3D"kt">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span=
><span class=3D"n">coro</span><span class=3D"p">(</span><span class=3D"k">c=
onst</span><span class=3D"w"> </span><span class=3D"kt">int</span><span cla=
ss=3D"o">&amp;</span><span class=3D"w"> </span><span class=3D"n">a</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span=
><span class=3D"w"> </span><span class=3D"k">co_return</span><span class=3D=
"w"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span class=
=3D"o">+</span><span class=3D"w"> </span><span class=3D"mi">1</span><span c=
lass=3D"p">;</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"n">task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">dangling_refs</span><span class=3D"p">(</span><span class=3D"kt">=
int</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// `coro` captures reference =
to a temporary. `foo` would now contain a dangling reference to `a`.</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">foo</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">coro</span><span =
class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"c1">// `coro` captures reference =
to local variable `a` which is destroyed after the return.</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">coro</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Lifetime bound static analysis can be used to detect such instances when=
 coroutines capture references
which may die earlier than the coroutine frame itself. In the above example=
, if the CRT <cite>task</cite> is annotated with
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang::c=
oro_lifetimebound]]</span></code>, then lifetime bound analysis would detec=
t capturing reference to
temporaries or return address of a local variable.</p>
<p>Both coroutines and coroutine wrappers are part of this analysis.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">template</span><span class=3D"w"> </span><span c=
lass=3D"o">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> <=
/span><span class=3D"nc">T</span><span class=3D"o">&gt;</span><span class=
=3D"w"> </span><span class=3D"k">struct</span><span class=3D"w"> </span><sp=
an class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::<=
/span><span class=3D"n">coro_return_type</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">clang</span><span class=3D"o">::<=
/span><span class=3D"n">coro_lifetimebound</span><span class=3D"p">]]</span=
><span class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">using</span><span class=3D"w">=
 </span><span class=3D"n">promise_type</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">some_pr=
omise_type</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">coro</span><span class=3D"p">(</span><span class=3D"k">const</spa=
n><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"o">=
&amp;</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span><span cl=
ass=3D"w"> </span><span class=3D"k">co_return</span><span class=3D"w"> </sp=
an><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+<=
/span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p=
">;</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">coro_wrapper</span><span class=3D"p">]]</span><s=
pan class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"o">&lt;=
</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span><span clas=
s=3D"w"> </span><span class=3D"n">coro_wrapper</span><span class=3D"p">(</s=
pan><span class=3D"k">const</span><span class=3D"w"> </span><span class=3D"=
kt">int</span><span class=3D"o">&amp;</span><span class=3D"w"> </span><span=
 class=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"k">const</span><span class=3D"w"> </span><span class=3D"kt">in=
t</span><span class=3D"o">&amp;</span><span class=3D"w"> </span><span class=
=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D=
"o">&gt;</span><span class=3D"w"> </span><span class=3D"n">b</span><span cl=
ass=3D"w"> </span><span class=3D"o">?</span><span class=3D"w"> </span><span=
 class=3D"n">coro</span><span class=3D"p">(</span><span class=3D"n">a</span=
><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">:</s=
pan><span class=3D"w"> </span><span class=3D"n">coro</span><span class=3D"p=
">(</span><span class=3D"n">b</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">temporary_reference</span><span class=3D"p">()</span><span class=
=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">foo</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">coro</span><span =
class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span><=
span class=3D"w"> </span><span class=3D"c1">// warning: capturing reference=
 to a temporary which would die after the expression.</span>

<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"mi">1</span><span clas=
s=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">bar</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">coro_wrapper</spa=
n><span class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p"=
>);</span><span class=3D"w"> </span><span class=3D"c1">// warning: `b` capt=
ures reference to a temporary.</span>

<span class=3D"w">  </span><span class=3D"k">co_return</span><span class=3D=
"w"> </span><span class=3D"k">co_await</span><span class=3D"w"> </span><spa=
n class=3D"n">coro</span><span class=3D"p">(</span><span class=3D"mi">1</sp=
an><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"c1">=
// fine.</span>
<span class=3D"p">}</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">coro_wrapper</span><span class=3D"p">]]</span><s=
pan class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"o">&lt;=
</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span><span clas=
s=3D"w"> </span><span class=3D"n">stack_reference</span><span class=3D"p">(=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">coro</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">);</span><span class=3D"w"> </span><span c=
lass=3D"c1">// warning: returning address of stack variable `a`.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This analysis can be disabled for all calls to a particular function by =
annotating the function
with function attribute <code class=3D"docutils literal notranslate"><span =
class=3D"pre">[[clang::coro_disable_lifetimebound]]</span></code>.
For example, this could be useful for coroutine wrappers which accept refer=
ence parameters
but do not pass them to the underlying coroutine or pass them by value.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">Task</span><span class=3D"o">&lt;</span><span cl=
ass=3D"kt">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span=
><span class=3D"n">coro</span><span class=3D"p">(</span><span class=3D"kt">=
int</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span><span cl=
ass=3D"w"> </span><span class=3D"k">co_return</span><span class=3D"w"> </sp=
an><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+<=
/span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p=
">;</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">coro_wrapper</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">clang</span><span class=3D"o">::</=
span><span class=3D"n">coro_disable_lifetimebound</span><span class=3D"p">]=
]</span><span class=3D"w"> </span><span class=3D"n">Task</span><span class=
=3D"o">&lt;</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span=
><span class=3D"w"> </span><span class=3D"n">coro_wrapper</span><span class=
=3D"p">(</span><span class=3D"k">const</span><span class=3D"w"> </span><spa=
n class=3D"kt">int</span><span class=3D"o">&amp;</span><span class=3D"w"> <=
/span><span class=3D"n">a</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">coro</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+</span><span cl=
ass=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">u=
se</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">task</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">coro_wrapper</=
span><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p"=
>);</span><span class=3D"w"> </span><span class=3D"c1">// use of temporary =
is fine as the argument is not lifetime bound.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"coro-only-destroy-when-complete">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id502" role=3D"doc-backlink">coro_only_destroy_when_complete<=
/a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRef=
erence.html#coro-only-destroy-when-complete" title=3D"Link to this heading"=
>=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id82">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
2" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">coro_only_destroy_when_complete</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_only_destroy_when_complete</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_only_destroy_when_complete</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <cite>coro_only_destroy_when_complete</cite> attribute should be mar=
ked on a C++ class. The coroutines
whose return type is marked with the attribute are assumed to be destroyed =
only after the coroutine has
reached the final suspend point.</p>
<p>This is helpful for the optimizers to reduce the size of the destroy fun=
ction for the coroutines.</p>
<p>For example,</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">A</span><span class=3D"w"> </span><span class=3D=
"nf">foo</span><span class=3D"p">()</span><span class=3D"w"> </span><span c=
lass=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">dtor</span><span class=3D"w"> =
</span><span class=3D"n">d</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">co_await</span><span class=3D"=
w"> </span><span class=3D"n">something</span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"n">dtor</span><span class=3D"w"> =
</span><span class=3D"n">d1</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">co_await</span><span class=3D"=
w"> </span><span class=3D"n">something</span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"n">dtor</span><span class=3D"w"> =
</span><span class=3D"n">d2</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">co_return</span><span class=3D=
"w"> </span><span class=3D"mi">43</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The compiler may generate the following pseudocode:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"n">foo</span><span class=3D"p">.</span><span class=3D"n">destroy</span=
><span class=3D"p">(</span><span class=3D"n">foo</span><span class=3D"p">.<=
/span><span class=3D"n">Frame</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">frame</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">switch</span><span class=3D"p"=
>(</span><span class=3D"n">frame</span><span class=3D"o">-&gt;</span><span =
class=3D"n">suspend_index</span><span class=3D"p">())</span><span class=3D"=
w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"k">case</span><span class=3D"w"=
> </span><span class=3D"mi">1</span><span class=3D"p">:</span>
<span class=3D"w">      </span><span class=3D"n">frame</span><span class=3D=
"o">-&gt;</span><span class=3D"n">d</span><span class=3D"p">.</span><span c=
lass=3D"o">~</span><span class=3D"n">dtor</span><span class=3D"p">();</span=
>
<span class=3D"w">      </span><span class=3D"k">break</span><span class=3D=
"p">;</span>
<span class=3D"w">    </span><span class=3D"k">case</span><span class=3D"w"=
> </span><span class=3D"mi">2</span><span class=3D"p">:</span>
<span class=3D"w">      </span><span class=3D"n">frame</span><span class=3D=
"o">-&gt;</span><span class=3D"n">d</span><span class=3D"p">.</span><span c=
lass=3D"o">~</span><span class=3D"n">dtor</span><span class=3D"p">();</span=
>
<span class=3D"w">      </span><span class=3D"n">frame</span><span class=3D=
"o">-&gt;</span><span class=3D"n">d1</span><span class=3D"p">.</span><span =
class=3D"o">~</span><span class=3D"n">dtor</span><span class=3D"p">();</spa=
n>
<span class=3D"w">      </span><span class=3D"k">break</span><span class=3D=
"p">;</span>
<span class=3D"w">    </span><span class=3D"k">case</span><span class=3D"w"=
> </span><span class=3D"mi">3</span><span class=3D"p">:</span>
<span class=3D"w">      </span><span class=3D"n">frame</span><span class=3D=
"o">-&gt;</span><span class=3D"n">d</span><span class=3D"p">.</span><span c=
lass=3D"o">~</span><span class=3D"n">dtor</span><span class=3D"p">();</span=
>
<span class=3D"w">      </span><span class=3D"n">frame</span><span class=3D=
"o">-&gt;</span><span class=3D"n">d1</span><span class=3D"p">.</span><span =
class=3D"o">~</span><span class=3D"n">dtor</span><span class=3D"p">();</spa=
n>
<span class=3D"w">      </span><span class=3D"n">frame</span><span class=3D=
"o">-&gt;</span><span class=3D"n">d2</span><span class=3D"p">.</span><span =
class=3D"o">~</span><span class=3D"n">dtor</span><span class=3D"p">();</spa=
n>
<span class=3D"w">      </span><span class=3D"k">break</span><span class=3D=
"p">;</span>
<span class=3D"w">    </span><span class=3D"k">default</span><span class=3D=
"o">:</span><span class=3D"w"> </span><span class=3D"c1">// coroutine compl=
eted or haven't started</span>
<span class=3D"w">      </span><span class=3D"k">break</span><span class=3D=
"p">;</span>
<span class=3D"w">  </span><span class=3D"p">}</span>

<span class=3D"w">  </span><span class=3D"n">frame</span><span class=3D"o">=
-&gt;</span><span class=3D"n">promise</span><span class=3D"p">.</span><span=
 class=3D"o">~</span><span class=3D"n">promise_type</span><span class=3D"p"=
>();</span>
<span class=3D"w">  </span><span class=3D"k">delete</span><span class=3D"w"=
> </span><span class=3D"n">frame</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The <cite>foo.destroy()</cite> function=E2=80=99s purpose is to release =
all of the resources
initialized for the coroutine when it is destroyed in a suspended state.
However, if the coroutine is only ever destroyed at the final suspend state=
,
the rest of the conditions are superfluous.</p>
<p>The user can use the <cite>coro_only_destroy_when_complete</cite> attrib=
uto suppress
generation of the other destruction cases, optimizing the above <cite>foo.d=
estroy</cite> to:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"n">foo</span><span class=3D"p">.</span><span class=3D"n">destroy</span=
><span class=3D"p">(</span><span class=3D"n">foo</span><span class=3D"p">.<=
/span><span class=3D"n">Frame</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">frame</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">frame</span><span class=3D"o">=
-&gt;</span><span class=3D"n">promise</span><span class=3D"p">.</span><span=
 class=3D"o">~</span><span class=3D"n">promise_type</span><span class=3D"p"=
>();</span>
<span class=3D"w">  </span><span class=3D"k">delete</span><span class=3D"w"=
> </span><span class=3D"n">frame</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"coro-return-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id503" role=3D"doc-backlink">coro_return_type</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#cor=
o-return-type" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id83">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
3" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">coro_return_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_return_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_return_type</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::coro_return_type]]</span></code> attribute is used to help static ana=
lyzers to recognize
coroutines from the function signatures.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cor=
o_return_type</span></code> attribute should be marked on a C++ class to ma=
rk it as
a <strong>coroutine return type (CRT)</strong>.</p>
<p>A function <code class=3D"docutils literal notranslate"><span class=3D"p=
re">R</span> <span class=3D"pre">func(P1,</span> <span class=3D"pre">..,</s=
pan> <span class=3D"pre">PN)</span></code> has a coroutine return type (CRT=
) <code class=3D"docutils literal notranslate"><span class=3D"pre">R</span>=
</code> if <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>R</span></code>
is marked by <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">[[clang::coro_return_type]]</span></code> and  <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">R</span></code> has a promise type =
associated to it
(i.e., std::coroutine_traits&lt;R, P1, .., PN&gt;::promise_type is a valid =
promise type).</p>
<p>If the return type of a function is a <code class=3D"docutils literal no=
translate"><span class=3D"pre">CRT</span></code> then the function must be =
a coroutine.
Otherwise the program is invalid. It is allowed for a non-coroutine to retu=
rn a <code class=3D"docutils literal notranslate"><span class=3D"pre">CRT</=
span></code>
if the function is marked with <code class=3D"docutils literal notranslate"=
><span class=3D"pre">[[clang::coro_wrapper]]</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::coro_wrapper]]</span></code> attribute should be marked on a C++ func=
tion to mark it as
a <strong>coroutine wrapper</strong>. A coroutine wrapper is a function whi=
ch returns a <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">CRT</span></code>,
is not a coroutine itself and is marked with <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">[[clang::coro_wrapper]]</span></code>.</=
p>
<p>Clang will enforce that all functions that return a <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">CRT</span></code> are either c=
oroutines or marked
with <code class=3D"docutils literal notranslate"><span class=3D"pre">[[cla=
ng::coro_wrapper]]</span></code>. Clang will enforce this with an error.</p=
>
<p>From a language perspective, it is not possible to differentiate between=
 a coroutine and a
function returning a CRT by merely looking at the function signature.</p>
<p>Coroutine wrappers, in particular, are susceptible to capturing
references to temporaries and other lifetime issues. This allows to avoid s=
uch lifetime
issues with coroutine wrappers.</p>
<p>For example,</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// This is a CRT.</span>
<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> </span><sp=
an class=3D"nc">T</span><span class=3D"o">&gt;</span><span class=3D"w"> </s=
pan><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D=
"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</span><span=
 class=3D"n">coro_return_type</span><span class=3D"p">]]</span><span class=
=3D"w"> </span><span class=3D"n">Task</span><span class=3D"w"> </span><span=
 class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">using</span><span class=3D"w">=
 </span><span class=3D"n">promise_type</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">some_pr=
omise_type</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">increment</span><span class=3D"p">(</span><span class=3D"kt">int<=
/span><span class=3D"w"> </span><span class=3D"n">a</span><span class=3D"p"=
>)</span><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D=
"w"> </span><span class=3D"k">co_return</span><span class=3D"w"> </span><sp=
an class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+</span>=
<span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">;</s=
pan><span class=3D"w"> </span><span class=3D"p">}</span><span class=3D"w"> =
</span><span class=3D"c1">// Fine. This is a coroutine.</span>
<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">foo</span><span class=3D"p">()</span><span class=3D"w"> </span><s=
pan class=3D"p">{</span><span class=3D"w"> </span><span class=3D"k">return<=
/span><span class=3D"w"> </span><span class=3D"n">increment</span><span cla=
ss=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span><spa=
n class=3D"w"> </span><span class=3D"p">}</span><span class=3D"w"> </span><=
span class=3D"c1">// Error. foo is not a coroutine.</span>

<span class=3D"c1">// Fine for a coroutine wrapper to return a CRT.</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">coro_wrapper</span><span class=3D"p">]]</span><s=
pan class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"o">&lt;=
</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span><span clas=
s=3D"w"> </span><span class=3D"n">foo</span><span class=3D"p">()</span><spa=
n class=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </span><=
span class=3D"k">return</span><span class=3D"w"> </span><span class=3D"n">i=
ncrement</span><span class=3D"p">(</span><span class=3D"mi">1</span><span c=
lass=3D"p">);</span><span class=3D"w"> </span><span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">b=
ar</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// Invalid. This intantiates =
a function which returns a CRT but is not marked as</span>
<span class=3D"w">  </span><span class=3D"c1">// a coroutine wrapper.</span=
>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">function</span><span class=3D"o">&lt;</span><span =
class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt">int<=
/span><span class=3D"o">&gt;</span><span class=3D"p">(</span><span class=3D=
"kt">int</span><span class=3D"p">)</span><span class=3D"o">&gt;</span><span=
 class=3D"w"> </span><span class=3D"n">f</span><span class=3D"w"> </span><s=
pan class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">incre=
ment</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Note: <code class=3D"docutils literal notranslate"><span class=3D"pre">a=
_promise_type::get_return_object</span></code> is exempted from this analys=
is as it is a necessary
implementation detail of any coroutine library.</p>
</section>
<section id=3D"coro-wrapper">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id504" role=3D"doc-backlink">coro_wrapper</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#coro-wr=
apper" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id84">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
4" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">coro_wrapper</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_wrapper</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::coro_wrapper</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::coro_return_type]]</span></code> attribute is used to help static ana=
lyzers to recognize
coroutines from the function signatures.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cor=
o_return_type</span></code> attribute should be marked on a C++ class to ma=
rk it as
a <strong>coroutine return type (CRT)</strong>.</p>
<p>A function <code class=3D"docutils literal notranslate"><span class=3D"p=
re">R</span> <span class=3D"pre">func(P1,</span> <span class=3D"pre">..,</s=
pan> <span class=3D"pre">PN)</span></code> has a coroutine return type (CRT=
) <code class=3D"docutils literal notranslate"><span class=3D"pre">R</span>=
</code> if <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>R</span></code>
is marked by <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">[[clang::coro_return_type]]</span></code> and  <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">R</span></code> has a promise type =
associated to it
(i.e., std::coroutine_traits&lt;R, P1, .., PN&gt;::promise_type is a valid =
promise type).</p>
<p>If the return type of a function is a <code class=3D"docutils literal no=
translate"><span class=3D"pre">CRT</span></code> then the function must be =
a coroutine.
Otherwise the program is invalid. It is allowed for a non-coroutine to retu=
rn a <code class=3D"docutils literal notranslate"><span class=3D"pre">CRT</=
span></code>
if the function is marked with <code class=3D"docutils literal notranslate"=
><span class=3D"pre">[[clang::coro_wrapper]]</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::coro_wrapper]]</span></code> attribute should be marked on a C++ func=
tion to mark it as
a <strong>coroutine wrapper</strong>. A coroutine wrapper is a function whi=
ch returns a <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">CRT</span></code>,
is not a coroutine itself and is marked with <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">[[clang::coro_wrapper]]</span></code>.</=
p>
<p>Clang will enforce that all functions that return a <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">CRT</span></code> are either c=
oroutines or marked
with <code class=3D"docutils literal notranslate"><span class=3D"pre">[[cla=
ng::coro_wrapper]]</span></code>. Clang will enforce this with an error.</p=
>
<p>From a language perspective, it is not possible to differentiate between=
 a coroutine and a
function returning a CRT by merely looking at the function signature.</p>
<p>Coroutine wrappers, in particular, are susceptible to capturing
references to temporaries and other lifetime issues. This allows to avoid s=
uch lifetime
issues with coroutine wrappers.</p>
<p>For example,</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// This is a CRT.</span>
<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> </span><sp=
an class=3D"nc">T</span><span class=3D"o">&gt;</span><span class=3D"w"> </s=
pan><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D=
"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</span><span=
 class=3D"n">coro_return_type</span><span class=3D"p">]]</span><span class=
=3D"w"> </span><span class=3D"n">Task</span><span class=3D"w"> </span><span=
 class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">using</span><span class=3D"w">=
 </span><span class=3D"n">promise_type</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">some_pr=
omise_type</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">increment</span><span class=3D"p">(</span><span class=3D"kt">int<=
/span><span class=3D"w"> </span><span class=3D"n">a</span><span class=3D"p"=
>)</span><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D=
"w"> </span><span class=3D"k">co_return</span><span class=3D"w"> </span><sp=
an class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+</span>=
<span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">;</s=
pan><span class=3D"w"> </span><span class=3D"p">}</span><span class=3D"w"> =
</span><span class=3D"c1">// Fine. This is a coroutine.</span>
<span class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt=
">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span cl=
ass=3D"n">foo</span><span class=3D"p">()</span><span class=3D"w"> </span><s=
pan class=3D"p">{</span><span class=3D"w"> </span><span class=3D"k">return<=
/span><span class=3D"w"> </span><span class=3D"n">increment</span><span cla=
ss=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span><spa=
n class=3D"w"> </span><span class=3D"p">}</span><span class=3D"w"> </span><=
span class=3D"c1">// Error. foo is not a coroutine.</span>

<span class=3D"c1">// Fine for a coroutine wrapper to return a CRT.</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">coro_wrapper</span><span class=3D"p">]]</span><s=
pan class=3D"w"> </span><span class=3D"n">Task</span><span class=3D"o">&lt;=
</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span><span clas=
s=3D"w"> </span><span class=3D"n">foo</span><span class=3D"p">()</span><spa=
n class=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </span><=
span class=3D"k">return</span><span class=3D"w"> </span><span class=3D"n">i=
ncrement</span><span class=3D"p">(</span><span class=3D"mi">1</span><span c=
lass=3D"p">);</span><span class=3D"w"> </span><span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">b=
ar</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// Invalid. This intantiates =
a function which returns a CRT but is not marked as</span>
<span class=3D"w">  </span><span class=3D"c1">// a coroutine wrapper.</span=
>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">function</span><span class=3D"o">&lt;</span><span =
class=3D"n">Task</span><span class=3D"o">&lt;</span><span class=3D"kt">int<=
/span><span class=3D"o">&gt;</span><span class=3D"p">(</span><span class=3D=
"kt">int</span><span class=3D"p">)</span><span class=3D"o">&gt;</span><span=
 class=3D"w"> </span><span class=3D"n">f</span><span class=3D"w"> </span><s=
pan class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">incre=
ment</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Note: <code class=3D"docutils literal notranslate"><span class=3D"pre">a=
_promise_type::get_return_object</span></code> is exempted from this analys=
is as it is a necessary
implementation detail of any coroutine library.</p>
</section>
<section id=3D"deprecated">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id505" role=3D"doc-backlink">deprecated</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#deprecate=
d" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id85">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
5" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">deprecated</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::deprecated</span></code> <br> <code class=3D"docutils literal notranslate=
"><span class=3D"pre">deprecated</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::deprecated</span></code> <br> <code class=3D"docutils literal notranslate=
"><span class=3D"pre">deprecated</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">dep=
recated</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dep=
recated</span></code> attribute can be applied to a function, a variable, o=
r a
type. This is useful when identifying functions, variables, or types that a=
re
expected to be removed in a future version of a program.</p>
<p>Consider the function declaration for a hypothetical function <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">f</span></code>:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"n">f</span><span class=3D"p">(</span><span class=3D"kt">void</span><sp=
an class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attrib=
ute__</span><span class=3D"p">((</span><span class=3D"n">deprecated</span><=
span class=3D"p">(</span><span class=3D"s">"message"</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"s">"replacement"</span><=
span class=3D"p">)));</span>
</pre></div>
</div>
<p>When spelled as <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__attribute__((deprecated))</span></code>, the deprecated attribut=
e can have
two optional string arguments. The first one is the message to display when
emitting the warning; the second one enables the compiler to provide a Fix-=
It
to replace the deprecated name with a new name. Otherwise, when spelled as
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[gnu::dep=
recated]]</span></code> or <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">[[deprecated]]</span></code>, the attribute can have one o=
ptional
string argument which is the message to display when emitting the warning.<=
/p>
</section>
<section id=3D"empty-bases">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id506" role=3D"doc-backlink">empty_bases</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#empty-ba=
ses" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id86">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
6" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">emp=
ty_bases</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The empty_bases attribute permits the compiler to utilize the
empty-base-optimization more frequently.
This attribute only applies to struct, class, and union types.
It is only supported when using the Microsoft C++ ABI.</p>
</section>
<section id=3D"enum-extensibility">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id507" role=3D"doc-backlink">enum_extensibility</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#enum-extensibility" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id87">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
7" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">enum_extensibility</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::enum_extensibility</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::enum_extensibility</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Attribute <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">enum_extensibility</span></code> is used to distinguish between enum def=
initions
that are extensible and those that are not. The attribute can take either
<code class=3D"docutils literal notranslate"><span class=3D"pre">closed</sp=
an></code> or <code class=3D"docutils literal notranslate"><span class=3D"p=
re">open</span></code> as an argument. <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">closed</span></code> indicates a variable of t=
he
enum type takes a value that corresponds to one of the enumerators listed i=
n the
enum definition or, when the enum is annotated with <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">flag_enum</span></code>, a value =
that
can be constructed using values corresponding to the enumerators. <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">open</span></code>
indicates a variable of the enum type can take any values allowed by the
standard and instructs clang to be more lenient when issuing warnings.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">enum</span><span class=3D"w"> </span><span class=
=3D"n">__attribute__</span><span class=3D"p">((</span><span class=3D"n">enu=
m_extensibility</span><span class=3D"p">(</span><span class=3D"n">closed</s=
pan><span class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"n"=
>ClosedEnum</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">A0</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">A1</span>
<span class=3D"p">};</span>

<span class=3D"k">enum</span><span class=3D"w"> </span><span class=3D"n">__=
attribute__</span><span class=3D"p">((</span><span class=3D"n">enum_extensi=
bility</span><span class=3D"p">(</span><span class=3D"n">open</span><span c=
lass=3D"p">)))</span><span class=3D"w"> </span><span class=3D"n">OpenEnum</=
span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">B0</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">B1</span>
<span class=3D"p">};</span>

<span class=3D"k">enum</span><span class=3D"w"> </span><span class=3D"n">__=
attribute__</span><span class=3D"p">((</span><span class=3D"n">enum_extensi=
bility</span><span class=3D"p">(</span><span class=3D"n">closed</span><span=
 class=3D"p">),</span><span class=3D"n">flag_enum</span><span class=3D"p">)=
)</span><span class=3D"w"> </span><span class=3D"n">ClosedFlagEnum</span><s=
pan class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">C0</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"w"> </span><span class=3D"o">&lt;&lt;</span><span=
 class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">C1</span><span class=3D"w"> </sp=
an><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi"=
>1</span><span class=3D"w"> </span><span class=3D"o">&lt;&lt;</span><span c=
lass=3D"w"> </span><span class=3D"mi">1</span>
<span class=3D"p">};</span>

<span class=3D"k">enum</span><span class=3D"w"> </span><span class=3D"n">__=
attribute__</span><span class=3D"p">((</span><span class=3D"n">enum_extensi=
bility</span><span class=3D"p">(</span><span class=3D"n">open</span><span c=
lass=3D"p">),</span><span class=3D"n">flag_enum</span><span class=3D"p">))<=
/span><span class=3D"w"> </span><span class=3D"n">OpenFlagEnum</span><span =
class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">D0</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"w"> </span><span class=3D"o">&lt;&lt;</span><span=
 class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">D1</span><span class=3D"w"> </sp=
an><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi"=
>1</span><span class=3D"w"> </span><span class=3D"o">&lt;&lt;</span><span c=
lass=3D"w"> </span><span class=3D"mi">1</span>
<span class=3D"p">};</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo1</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">enum</span><span class=3D"w"> =
</span><span class=3D"n">ClosedEnum</span><span class=3D"w"> </span><span c=
lass=3D"n">ce</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">enum</span><span class=3D"w"> =
</span><span class=3D"n">OpenEnum</span><span class=3D"w"> </span><span cla=
ss=3D"n">oe</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">enum</span><span class=3D"w"> =
</span><span class=3D"n">ClosedFlagEnum</span><span class=3D"w"> </span><sp=
an class=3D"n">cfe</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">enum</span><span class=3D"w"> =
</span><span class=3D"n">OpenFlagEnum</span><span class=3D"w"> </span><span=
 class=3D"n">ofe</span><span class=3D"p">;</span>

<span class=3D"w">  </span><span class=3D"n">ce</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">A1</span><span class=3D"p">;</span><span class=3D"w">           </span><s=
pan class=3D"c1">// no warnings</span>
<span class=3D"w">  </span><span class=3D"n">ce</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">100</span><span class=3D"p">;</span><span class=3D"w">          </span><=
span class=3D"c1">// warning issued</span>
<span class=3D"w">  </span><span class=3D"n">oe</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">B1</span><span class=3D"p">;</span><span class=3D"w">           </span><s=
pan class=3D"c1">// no warnings</span>
<span class=3D"w">  </span><span class=3D"n">oe</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">100</span><span class=3D"p">;</span><span class=3D"w">          </span><=
span class=3D"c1">// no warnings</span>
<span class=3D"w">  </span><span class=3D"n">cfe</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">C0</span><span class=3D"w"> </span><span class=3D"o">|</span><span class=
=3D"w"> </span><span class=3D"n">C1</span><span class=3D"p">;</span><span c=
lass=3D"w">     </span><span class=3D"c1">// no warnings</span>
<span class=3D"w">  </span><span class=3D"n">cfe</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">C0</span><span class=3D"w"> </span><span class=3D"o">|</span><span class=
=3D"w"> </span><span class=3D"n">C1</span><span class=3D"w"> </span><span c=
lass=3D"o">|</span><span class=3D"w"> </span><span class=3D"mi">4</span><sp=
an class=3D"p">;</span><span class=3D"w"> </span><span class=3D"c1">// warn=
ing issued</span>
<span class=3D"w">  </span><span class=3D"n">ofe</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">D0</span><span class=3D"w"> </span><span class=3D"o">|</span><span class=
=3D"w"> </span><span class=3D"n">D1</span><span class=3D"p">;</span><span c=
lass=3D"w">     </span><span class=3D"c1">// no warnings</span>
<span class=3D"w">  </span><span class=3D"n">ofe</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">D0</span><span class=3D"w"> </span><span class=3D"o">|</span><span class=
=3D"w"> </span><span class=3D"n">D1</span><span class=3D"w"> </span><span c=
lass=3D"o">|</span><span class=3D"w"> </span><span class=3D"mi">4</span><sp=
an class=3D"p">;</span><span class=3D"w"> </span><span class=3D"c1">// no w=
arnings</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"external-source-symbol">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id508" role=3D"doc-backlink">external_source_symbol</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#external-source-symbol" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id88">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
8" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">external_source_symbol</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::external_source_symbol</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::external_source_symbol</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ext=
ernal_source_symbol</span></code> attribute specifies that a declaration or=
iginates
from an external source and describes the nature of that source.</p>
<p>The fact that Clang is capable of recognizing declarations that were def=
ined
externally can be used to provide better tooling support for mixed-language
projects or projects that rely on auto-generated code. For instance, an IDE=
 that
uses Clang and that supports mixed-language projects can use this attribute=
 to
provide a correct =E2=80=98jump-to-definition=E2=80=99 feature. For a concr=
ete example,
consider a protocol that=E2=80=99s defined in a Swift file:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"highlight"><pre><s=
pan></span><span class=3D"kr">@objc</span> <span class=3D"kd">public</span>=
 <span class=3D"kd">protocol</span> <span class=3D"nc">SwiftProtocol</span>=
 <span class=3D"p">{</span>
  <span class=3D"kd">func</span> <span class=3D"nf">method</span><span clas=
s=3D"p">()</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This protocol can be used from Objective-C code by including a header fi=
le that
was generated by the Swift compiler. The declarations in that header can us=
e
the <code class=3D"docutils literal notranslate"><span class=3D"pre">extern=
al_source_symbol</span></code> attribute to make Clang aware of the fact
that <code class=3D"docutils literal notranslate"><span class=3D"pre">Swift=
Protocol</span></code> actually originates from a Swift module:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"bp">__attribute__</span><span class=3D"p">((</span=
><span class=3D"n">external_source_symbol</span><span class=3D"p">(</span><=
span class=3D"n">language</span><span class=3D"o">=3D</span><span class=3D"=
s">"Swift"</span><span class=3D"p">,</span><span class=3D"n">defined_in</sp=
an><span class=3D"o">=3D</span><span class=3D"s">"module"</span><span class=
=3D"p">)))</span>
<span class=3D"k">@protocol</span> <span class=3D"nc">SwiftProtocol</span>
<span class=3D"k">@required</span>
<span class=3D"o">-</span><span class=3D"w"> </span><span class=3D"p">(</sp=
an><span class=3D"kt">void</span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"n">method</span><span class=3D"p">;</span>
<span class=3D"k">@end</span>
</pre></div>
</div>
<p>Consequently, when =E2=80=98jump-to-definition=E2=80=99 is performed at =
a location that
references <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>SwiftProtocol</span></code>, the IDE can jump to the original definition i=
n
the Swift source file rather than jumping to the Objective-C declaration in=
 the
auto-generated header file.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ext=
ernal_source_symbol</span></code> attribute is a comma-separated list that =
includes
clauses that describe the origin and the nature of the particular declarati=
on.
Those clauses can be:</p>
<dl class=3D"simple">
<dt>language=3D<em>string-literal</em></dt><dd><p>The name of the source la=
nguage in which this declaration was defined.</p>
</dd>
<dt>defined_in=3D<em>string-literal</em></dt><dd><p>The name of the source =
container in which the declaration was defined. The
exact definition of source container is language-specific, e.g. Swift=E2=80=
=99s
source containers are modules, so <code class=3D"docutils literal notransla=
te"><span class=3D"pre">defined_in</span></code> should specify the Swift
module name.</p>
</dd>
<dt>USR=3D<em>string-literal</em></dt><dd><p>String that specifies a unifie=
d symbol resolution (USR) value for this
declaration. USR string uniquely identifies this particular declaration, an=
d
is typically used when constructing an index of a codebase.
The USR value in this attribute is expected to be generated by an external
compiler that compiled the native declaration using its original source
language. The exact format of the USR string and its other attributes
are determined by the specification of this declaration=E2=80=99s source la=
nguage.
When not specified, Clang=E2=80=99s indexer will use the Clang USR for this=
 symbol.
User can query to see if Clang supports the use of the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">USR</span></code> clause in
the <code class=3D"docutils literal notranslate"><span class=3D"pre">extern=
al_source_symbol</span></code> attribute with
<code class=3D"docutils literal notranslate"><span class=3D"pre">__has_attr=
ibute(external_source_symbol)</span> <span class=3D"pre">&gt;=3D</span> <sp=
an class=3D"pre">20230206</span></code>.</p>
</dd>
<dt>generated_declaration</dt><dd><p>This declaration was automatically gen=
erated by some tool.</p>
</dd>
</dl>
<p>The clauses can be specified in any order. The clauses that are listed a=
bove are
all optional, but the attribute has to have at least one clause.</p>
</section>
<section id=3D"flag-enum">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id509" role=3D"doc-backlink">flag_enum</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#flag-enum"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id89">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id8=
9" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">flag_enum</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::flag_enum</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::flag_enum</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute can be added to an enumerator to signal to the compiler t=
hat it
is intended to be used as a flag type. This will cause the compiler to assu=
me
that the range of the type includes all of the values that you can get by
manipulating bits of the enumerator when issuing warnings.</p>
</section>
<section id=3D"grid-constant">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id510" role=3D"doc-backlink">grid_constant</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#grid-c=
onstant" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id90">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
0" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">grid_constant</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__g=
rid_constant__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__g=
rid_constant__</span></code> attribute can be applied to a <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">const</span></code>-qualif=
ied kernel
function argument and allows compiler to take the address of that argument =
without
making a copy. The argument applies to sm_70 or newer GPUs, during compilat=
ion
with CUDA-11.7(PTX 7.7) or newer, and is ignored otherwise.</p>
</section>
<section id=3D"layout-version">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id511" role=3D"doc-backlink">layout_version</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#layou=
t-version" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id91">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
1" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">lay=
out_version</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The layout_version attribute requests that the compiler utilize the clas=
s
layout rules of a particular compiler version.
This attribute only applies to struct, class, and union types.
It is only supported when using the Microsoft C++ ABI.</p>
</section>
<section id=3D"lto-visibility-public">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id512" role=3D"doc-backlink">lto_visibility_public</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#lto-visibility-public" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id92">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
2" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">lto_visibility_public</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::lto_visibility_public</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::lto_visibility_public</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>See <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
LTOVisibility.html"><span class=3D"doc">LTO Visibility</span></a>.</p>
</section>
<section id=3D"managed">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id513" role=3D"doc-backlink">managed</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#managed" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id93">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
3" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">managed</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__m=
anaged__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__m=
anaged__</span></code> attribute can be applied to a global variable declar=
ation in HIP.
A managed variable is emitted as an undefined global symbol in the device b=
inary and is
registered by <code class=3D"docutils literal notranslate"><span class=3D"p=
re">__hipRegisterManagedVariable</span></code> in init functions. The HIP r=
untime allocates
managed memory and uses it to define the symbol when loading the device bin=
ary.
A managed variable can be accessed in both device and host code.</p>
</section>
<section id=3D"no-init-all">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id514" role=3D"doc-backlink">no_init_all</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#no-init-=
all" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id94">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
4" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">no_=
init_all</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
eclspec(no_init_all)</span></code> attribute disables the automatic initial=
ization that the
<a class=3D"reference external" href=3D"https://clang.llvm.org/docs/ClangCo=
mmandLineReference.html#cmdoption-clang-ftrivial-auto-var-init">-ftrivial-a=
uto-var-init</a> flag would have applied to locals in a marked function, or=
 instances of
a marked type. Note that this attribute has no effect for locals that are a=
utomatically initialized
without the <a class=3D"reference external" href=3D"https://clang.llvm.org/=
docs/ClangCommandLineReference.html#cmdoption-clang-ftrivial-auto-var-init"=
>-ftrivial-auto-var-init</a> flag.</p>
</section>
<section id=3D"no-specializations">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id515" role=3D"doc-backlink">no_specializations</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#no-specializations" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id95">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
5" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_specializations</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_specializations</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang=
::no_specializations]]</span></code> can be applied to function, class, or =
variable
templates which should not be explicitly specialized by users. This is prim=
arily
used to diagnose user specializations of standard library type traits.</p>
</section>
<section id=3D"novtable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id516" role=3D"doc-backlink">novtable</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#novtable" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id96">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
6" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nov=
table</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute can be added to a class declaration or definition to sign=
al to
the compiler that constructors and destructors will not reference the virtu=
al
function table. It is only supported when using the Microsoft C++ ABI.</p>
</section>
<section id=3D"ns-error-domain">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id517" role=3D"doc-backlink">ns_error_domain</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ns-e=
rror-domain" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id97">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
7" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ns_error_domain</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>In Cocoa frameworks in Objective-C, one can group related error codes in=
 enums
and categorize these enums with error domains.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ns_=
error_domain</span></code> attribute indicates a global <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">NSString</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">CFString</=
span></code> constant representing the error domain that an error code belo=
ngs
to. For pointer uniqueness and code size this is a constant symbol, not a
literal.</p>
<p>The domain and error code need to be used together. The <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">ns_error_domain</span></co=
de>
attribute links error codes to their domain at the source level.</p>
<p>This metadata is useful for documentation purposes, for static analysis,=
 and for
improving interoperability between Objective-C and Swift. It is not used fo=
r
code generation in Objective-C.</p>
<p>For example:</p>
<blockquote>
<div><div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pr=
e><span></span><span class=3D"cp">#define NS_ERROR_ENUM(_type, _name, _doma=
in)  \</span>
<span class=3D"cp">  enum _name : _type _name; enum __attribute__((ns_error=
_domain(_domain))) _name : _type</span>

<span class=3D"k">extern</span><span class=3D"w"> </span><span class=3D"bp"=
>NSString</span><span class=3D"w"> </span><span class=3D"o">*</span><span c=
lass=3D"k">const</span><span class=3D"w"> </span><span class=3D"n">MyErrorD=
omain</span><span class=3D"p">;</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"n"=
>NS_ERROR_ENUM</span><span class=3D"p">(</span><span class=3D"kt">unsigned<=
/span><span class=3D"w"> </span><span class=3D"kt">char</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">MyErrorEnum</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">MyE=
rrorDomain</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">MyErrFirst</span><span class=
=3D"p">,</span>
<span class=3D"w">  </span><span class=3D"n">MyErrSecond</span><span class=
=3D"p">,</span>
<span class=3D"p">};</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"objc-boxable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id518" role=3D"doc-backlink">objc_boxable</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#objc-bo=
xable" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id98">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
8" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_boxable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_boxable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_boxable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Structs and unions marked with the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">objc_boxable</span></code> attribute can be use=
d
with the Objective-C boxed expression syntax, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">@(...)</span></code>.</p>
<p><strong>Usage</strong>: <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__attribute__((objc_boxable))</span></code>. This attribut=
e
can only be placed on a declaration of a trivially-copyable struct or union=
:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cl=
ass=3D"bp">__attribute__</span><span class=3D"p">((</span><span class=3D"n"=
>objc_boxable</span><span class=3D"p">))</span><span class=3D"w"> </span><s=
pan class=3D"n">some_struct</span><span class=3D"w"> </span><span class=3D"=
p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"p">};</span>
<span class=3D"k">union</span><span class=3D"w"> </span><span class=3D"bp">=
__attribute__</span><span class=3D"p">((</span><span class=3D"n">objc_boxab=
le</span><span class=3D"p">))</span><span class=3D"w"> </span><span class=
=3D"n">some_union</span><span class=3D"w"> </span><span class=3D"p">{</span=
>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">float</span><span class=3D"w"=
> </span><span class=3D"n">f</span><span class=3D"p">;</span>
<span class=3D"p">};</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"k"=
>struct</span><span class=3D"w"> </span><span class=3D"bp">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">objc_boxable</span><span c=
lass=3D"p">))</span><span class=3D"w"> </span><span class=3D"n">_some_struc=
t</span><span class=3D"w"> </span><span class=3D"n">some_struct</span><span=
 class=3D"p">;</span>

<span class=3D"c1">// ...</span>

<span class=3D"n">some_struct</span><span class=3D"w"> </span><span class=
=3D"n">ss</span><span class=3D"p">;</span>
<span class=3D"bp">NSValue</span><span class=3D"w"> </span><span class=3D"o=
">*</span><span class=3D"n">boxed</span><span class=3D"w"> </span><span cla=
ss=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"l">@(</span><sp=
an class=3D"n">ss</span><span class=3D"l">)</span><span class=3D"p">;</span=
>
</pre></div>
</div>
</section>
<section id=3D"objc-direct">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id519" role=3D"doc-backlink">objc_direct</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#objc-dir=
ect" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id99">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id9=
9" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_direct</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_direct</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_direct</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">obj=
c_direct</span></code> attribute can be used to mark an Objective-C method =
as
being <em>direct</em>. A direct method is treated statically like an ordina=
ry method,
but dynamically it behaves more like a C function. This lowers some of the =
costs
associated with the method but also sacrifices some of the ordinary capabil=
ities
of Objective-C methods.</p>
<p>A message send of a direct method calls the implementation directly, as =
if it
were a C function, rather than using ordinary Objective-C method dispatch. =
This
is substantially faster and potentially allows the implementation to be inl=
ined,
but it also means the method cannot be overridden in subclasses or replaced
dynamically, as ordinary Objective-C methods can.</p>
<p>Furthermore, a direct method is not listed in the class=E2=80=99s method=
 lists. This
substantially reduces the code-size overhead of the method but also means i=
t
cannot be called dynamically using ordinary Objective-C method dispatch at =
all;
in particular, this means that it cannot override a superclass method or sa=
tisfy
a protocol requirement.</p>
<p>Because a direct method cannot be overridden, it is an error to perform
a <code class=3D"docutils literal notranslate"><span class=3D"pre">super</s=
pan></code> message send of one.</p>
<p>Although a message send of a direct method causes the method to be calle=
d
directly as if it were a C function, it still obeys Objective-C semantics i=
n other
ways:</p>
<ul class=3D"simple">
<li><p>If the receiver is <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">nil</span></code>, the message send does nothing and return=
s the zero value
for the return type.</p></li>
<li><p>A message send of a direct class method will cause the class to be i=
nitialized,
including calling the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">+initialize</span></code> method if present.</p></li>
<li><p>The implicit <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">_cmd</span></code> parameter containing the method=E2=80=99s sele=
ctor is still defined.
In order to minimize code-size costs, the implementation will not emit a re=
ference
to the selector if the parameter is unused within the method.</p></li>
</ul>
<p>Symbols for direct method implementations are implicitly given hidden
visibility, meaning that they can only be called within the same linkage un=
it.</p>
<p>It is an error to do any of the following:</p>
<ul class=3D"simple">
<li><p>declare a direct method in a protocol,</p></li>
<li><p>declare an override of a direct method with a method in a subclass,<=
/p></li>
<li><p>declare an override of a non-direct method with a direct method in a=
 subclass,</p></li>
<li><p>declare a method with different directness in different class interf=
aces, or</p></li>
<li><p>implement a non-direct method (as declared in any class interface) w=
ith a direct method.</p></li>
</ul>
<p>If any of these rules would be violated if every method defined in an
<code class=3D"docutils literal notranslate"><span class=3D"pre">@implement=
ation</span></code> within a single linkage unit were declared in an
appropriate class interface, the program is ill-formed with no diagnostic
required. If a violation of this rule is not diagnosed, behavior remains
well-defined; this paragraph is simply reserving the right to diagnose such
conflicts in the future, not to treat them as undefined behavior.</p>
<p>Additionally, Clang will warn about any <code class=3D"docutils literal =
notranslate"><span class=3D"pre">@selector</span></code> expression that
names a selector that is only known to be used for direct methods.</p>
<p>For the purpose of these rules, a =E2=80=9Cclass interface=E2=80=9D incl=
udes a class=E2=80=99s primary
<code class=3D"docutils literal notranslate"><span class=3D"pre">@interface=
</span></code> block, its class extensions, its categories, its declared pr=
otocols,
and all the class interfaces of its superclasses.</p>
<p>An Objective-C property can be declared with the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">direct</span></code> property
attribute. If a direct property declaration causes an implicit declaration =
of
a getter or setter method (that is, if the given method is not explicitly
declared elsewhere), the method is declared to be direct.</p>
<p>Some programmers may wish to make many methods direct at once. In order
to simplify this, the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">objc_direct_members</span></code> attribute is provided; see it=
s
documentation for more information.</p>
</section>
<section id=3D"objc-direct-members">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id520" role=3D"doc-backlink">objc_direct_members</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#objc-direct-members" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id100">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
00" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_direct_members</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_direct_members</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_direct_members</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">obj=
c_direct_members</span></code> attribute can be placed on an Objective-C
<code class=3D"docutils literal notranslate"><span class=3D"pre">@interface=
</span></code> or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">@implementation</span></code> to mark that methods declared
therein should be considered direct by default. See the documentation
for <code class=3D"docutils literal notranslate"><span class=3D"pre">objc_d=
irect</span></code> for more information about direct methods.</p>
<p>When <code class=3D"docutils literal notranslate"><span class=3D"pre">ob=
jc_direct_members</span></code> is placed on an <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">@interface</span></code> block, every
method in the block is considered to be declared as direct. This includes a=
ny
implicit method declarations introduced by property declarations. If the me=
thod
redeclares a non-direct method, the declaration is ill-formed, exactly as i=
f the
method was annotated with the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_direct</span></code> attribute.</p>
<p>When <code class=3D"docutils literal notranslate"><span class=3D"pre">ob=
jc_direct_members</span></code> is placed on an <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">@implementation</span></code> block,
methods defined in the block are considered to be declared as direct unless
they have been previously declared as non-direct in any interface of the cl=
ass.
This includes the implicit method definitions introduced by synthesized
properties, including auto-synthesized properties.</p>
</section>
<section id=3D"objc-non-runtime-protocol">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id521" role=3D"doc-backlink">objc_non_runtime_protocol</a><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference=
.html#objc-non-runtime-protocol" title=3D"Link to this heading">=C2=B6</a><=
/h3>
<table class=3D"docutils align-default" id=3D"id101">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
01" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_non_runtime_protocol</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_non_runtime_protocol</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_non_runtime_protocol</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">obj=
c_non_runtime_protocol</span></code> attribute can be used to mark that an
Objective-C protocol is only used during static type-checking and doesn=E2=
=80=99t need
to be represented dynamically. This avoids several small code-size and run-=
time
overheads associated with handling the protocol=E2=80=99s metadata. A non-r=
untime
protocol cannot be used as the operand of a <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">@protocol</span></code> expression, and
dynamic attempts to find it with <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">objc_getProtocol</span></code> will fail.</p>
<p>If a non-runtime protocol inherits from any ordinary protocols, classes =
and
derived protocols that declare conformance to the non-runtime protocol will
dynamically list their conformance to those bare protocols.</p>
</section>
<section id=3D"objc-nonlazy-class">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id522" role=3D"doc-backlink">objc_nonlazy_class</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#objc-nonlazy-class" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id102">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
02" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_nonlazy_class</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_nonlazy_class</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_nonlazy_class</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute can be added to an Objective-C <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">@interface</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">@implement=
ation</span></code> declaration to add the class to the list of non-lazily
initialized classes. A non-lazy class will be initialized eagerly when the
Objective-C runtime is loaded. This is required for certain system classes =
which
have instances allocated in non-standard ways, such as the classes for bloc=
ks
and constant strings. Adding this attribute is essentially equivalent to
providing a trivial <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+load</span></code> method but avoids the (fairly small) load-tim=
e
overheads associated with defining and calling such a method.</p>
</section>
<section id=3D"objc-runtime-name">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id523" role=3D"doc-backlink">objc_runtime_name</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ob=
jc-runtime-name" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id103">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
03" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_runtime_name</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_runtime_name</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_runtime_name</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>By default, the Objective-C interface or protocol identifier is used
in the metadata name for that object. The <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">objc_runtime_name</span></code>
attribute allows annotated interfaces or protocols to use the
specified string argument in the object=E2=80=99s metadata name instead of =
the
default name.</p>
<p><strong>Usage</strong>: <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__attribute__((objc_runtime_name("MyLocalName")))</span></=
code>. This attribute
can only be placed before an @protocol or @interface declaration:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"bp">__attribute__</span><span class=3D"p">((</span=
><span class=3D"n">objc_runtime_name</span><span class=3D"p">(</span><span =
class=3D"s">"MyLocalName"</span><span class=3D"p">)))</span>
<span class=3D"k">@interface</span> <span class=3D"nc">Message</span>
<span class=3D"k">@end</span>
</pre></div>
</div>
</section>
<section id=3D"objc-runtime-visible">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id524" role=3D"doc-backlink">objc_runtime_visible</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#objc-runtime-visible" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id104">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
04" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_runtime_visible</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_runtime_visible</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_runtime_visible</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute specifies that the Objective-C class to which it applies =
is
visible to the Objective-C runtime but not to the linker. Classes annotated
with this attribute cannot be subclassed and cannot have categories defined=
 for
them.</p>
</section>
<section id=3D"objc-subclassing-restricted">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id525" role=3D"doc-backlink">objc_subclassing_restricted</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferen=
ce.html#objc-subclassing-restricted" title=3D"Link to this heading">=C2=B6<=
/a></h3>
<table class=3D"docutils align-default" id=3D"id105">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
05" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_subclassing_restricted</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_subclassing_restricted</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_subclassing_restricted</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute can be added to an Objective-C <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">@interface</span></code> declaration=
 to
ensure that this class cannot be subclassed.</p>
</section>
<section id=3D"preferred-name">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id526" role=3D"doc-backlink">preferred_name</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#prefe=
rred-name" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id106">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
06" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">preferred_name</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preferred_name</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">pre=
ferred_name</span></code> attribute can be applied to a class template, and
specifies a preferred way of naming a specialization of the template. The
preferred name will be used whenever the corresponding template specializat=
ion
would otherwise be printed in a diagnostic or similar context.</p>
<p>The preferred name must be a typedef or type alias declaration that refe=
rs to a
specialization of the class template (not including any type qualifiers). I=
n
general this requires the template to be declared at least twice. For examp=
le:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">template</span><span class=3D"o">&lt;</span><spa=
n class=3D"k">typename</span><span class=3D"w"> </span><span class=3D"nc">T=
</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span class=
=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">basic_stri=
ng</span><span class=3D"p">;</span>
<span class=3D"k">using</span><span class=3D"w"> </span><span class=3D"n">s=
tring</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span cla=
ss=3D"w"> </span><span class=3D"n">basic_string</span><span class=3D"o">&lt=
;</span><span class=3D"kt">char</span><span class=3D"o">&gt;</span><span cl=
ass=3D"p">;</span>
<span class=3D"k">using</span><span class=3D"w"> </span><span class=3D"n">w=
string</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span cl=
ass=3D"w"> </span><span class=3D"n">basic_string</span><span class=3D"o">&l=
t;</span><span class=3D"kt">wchar_t</span><span class=3D"o">&gt;</span><spa=
n class=3D"p">;</span>
<span class=3D"k">template</span><span class=3D"o">&lt;</span><span class=
=3D"k">typename</span><span class=3D"w"> </span><span class=3D"nc">T</span>=
<span class=3D"o">&gt;</span><span class=3D"w"> </span><span class=3D"k">st=
ruct</span><span class=3D"w"> </span><span class=3D"p">[[</span><span class=
=3D"n">clang</span><span class=3D"o">::</span><span class=3D"n">preferred_n=
ame</span><span class=3D"p">(</span><span class=3D"n">string</span><span cl=
ass=3D"p">),</span>
<span class=3D"w">                              </span><span class=3D"n">cl=
ang</span><span class=3D"o">::</span><span class=3D"n">preferred_name</span=
><span class=3D"p">(</span><span class=3D"n">wstring</span><span class=3D"p=
">)]]</span><span class=3D"w"> </span><span class=3D"n">basic_string</span>=
<span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// ...</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>Note that the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">preferred_name</span></code> attribute will be ignored when the co=
mpiler
writes a C++20 Module interface now. This is due to a compiler issue
(<a class=3D"reference external" href=3D"https://github.com/llvm/llvm-proje=
ct/issues/56490">https://github.com/llvm/llvm-project/issues/56490</a>) tha=
t blocks users to modularize
declarations with <cite>preferred_name</cite>. This is intended to be fixed=
 in the future.</p>
</section>
<section id=3D"randomize-layout-no-randomize-layout">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id527" role=3D"doc-backlink">randomize_layout, no_randomize_l=
ayout</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Attrib=
uteReference.html#randomize-layout-no-randomize-layout" title=3D"Link to th=
is heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id107">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
07" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_randomize_layout</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_randomize_layout</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_randomize_layout</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">randomize_layout</span></code>, when attached to a C structure, se=
lects it
for structure layout field randomization; a compile-time hardening techniqu=
e. A
=E2=80=9Cseed=E2=80=9D value, is specified via the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">-frandomize-layout-seed=3D</span><=
/code> command line flag.
For example:</p>
<div class=3D"highlight-bash notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"nv">SEED</span><span class=3D"o">=3D</span><span c=
lass=3D"sb">`</span>od<span class=3D"w"> </span>-A<span class=3D"w"> </span=
>n<span class=3D"w"> </span>-t<span class=3D"w"> </span>x8<span class=3D"w"=
> </span>-N<span class=3D"w"> </span><span class=3D"m">32</span><span class=
=3D"w"> </span>/dev/urandom<span class=3D"w"> </span><span class=3D"p">|</s=
pan><span class=3D"w"> </span>tr<span class=3D"w"> </span>-d<span class=3D"=
w"> </span><span class=3D"s1">' \n'</span><span class=3D"sb">`</span>
make<span class=3D"w"> </span>...<span class=3D"w"> </span><span class=3D"n=
v">CFLAGS</span><span class=3D"o">=3D</span><span class=3D"s2">"-frandomize=
-layout-seed=3D</span><span class=3D"nv">$SEED</span><span class=3D"s2">"</=
span><span class=3D"w"> </span>...
</pre></div>
</div>
<p>You can also supply the seed in a file with <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">-frandomize-layout-seed-file=3D</span>=
</code>.
For example:</p>
<div class=3D"highlight-bash notranslate"><div class=3D"highlight"><pre><sp=
an></span>od<span class=3D"w"> </span>-A<span class=3D"w"> </span>n<span cl=
ass=3D"w"> </span>-t<span class=3D"w"> </span>x8<span class=3D"w"> </span>-=
N<span class=3D"w"> </span><span class=3D"m">32</span><span class=3D"w"> </=
span>/dev/urandom<span class=3D"w"> </span><span class=3D"p">|</span><span =
class=3D"w"> </span>tr<span class=3D"w"> </span>-d<span class=3D"w"> </span=
><span class=3D"s1">' \n'</span><span class=3D"w"> </span>&gt;<span class=
=3D"w"> </span>/tmp/seed_file.txt
make<span class=3D"w"> </span>...<span class=3D"w"> </span><span class=3D"n=
v">CFLAGS</span><span class=3D"o">=3D</span><span class=3D"s2">"-frandomize=
-layout-seed-file=3D/tmp/seed_file.txt"</span><span class=3D"w"> </span>...
</pre></div>
</div>
<p>The randomization is deterministic based for a given seed, so the entire
program should be compiled with the same seed, but keep the seed safe
otherwise.</p>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">no_randomize_layout</span></code>, when attached to a C structure,
instructs the compiler that this structure should not have its field layout
randomized.</p>
</section>
<section id=3D"id10">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id528" role=3D"doc-backlink">randomize_layout, no_randomize_l=
ayout</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Attrib=
uteReference.html#id10" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id108">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
08" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">randomize_layout</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::randomize_layout</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::randomize_layout</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">randomize_layout</span></code>, when attached to a C structure, se=
lects it
for structure layout field randomization; a compile-time hardening techniqu=
e. A
=E2=80=9Cseed=E2=80=9D value, is specified via the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">-frandomize-layout-seed=3D</span><=
/code> command line flag.
For example:</p>
<div class=3D"highlight-bash notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"nv">SEED</span><span class=3D"o">=3D</span><span c=
lass=3D"sb">`</span>od<span class=3D"w"> </span>-A<span class=3D"w"> </span=
>n<span class=3D"w"> </span>-t<span class=3D"w"> </span>x8<span class=3D"w"=
> </span>-N<span class=3D"w"> </span><span class=3D"m">32</span><span class=
=3D"w"> </span>/dev/urandom<span class=3D"w"> </span><span class=3D"p">|</s=
pan><span class=3D"w"> </span>tr<span class=3D"w"> </span>-d<span class=3D"=
w"> </span><span class=3D"s1">' \n'</span><span class=3D"sb">`</span>
make<span class=3D"w"> </span>...<span class=3D"w"> </span><span class=3D"n=
v">CFLAGS</span><span class=3D"o">=3D</span><span class=3D"s2">"-frandomize=
-layout-seed=3D</span><span class=3D"nv">$SEED</span><span class=3D"s2">"</=
span><span class=3D"w"> </span>...
</pre></div>
</div>
<p>You can also supply the seed in a file with <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">-frandomize-layout-seed-file=3D</span>=
</code>.
For example:</p>
<div class=3D"highlight-bash notranslate"><div class=3D"highlight"><pre><sp=
an></span>od<span class=3D"w"> </span>-A<span class=3D"w"> </span>n<span cl=
ass=3D"w"> </span>-t<span class=3D"w"> </span>x8<span class=3D"w"> </span>-=
N<span class=3D"w"> </span><span class=3D"m">32</span><span class=3D"w"> </=
span>/dev/urandom<span class=3D"w"> </span><span class=3D"p">|</span><span =
class=3D"w"> </span>tr<span class=3D"w"> </span>-d<span class=3D"w"> </span=
><span class=3D"s1">' \n'</span><span class=3D"w"> </span>&gt;<span class=
=3D"w"> </span>/tmp/seed_file.txt
make<span class=3D"w"> </span>...<span class=3D"w"> </span><span class=3D"n=
v">CFLAGS</span><span class=3D"o">=3D</span><span class=3D"s2">"-frandomize=
-layout-seed-file=3D/tmp/seed_file.txt"</span><span class=3D"w"> </span>...
</pre></div>
</div>
<p>The randomization is deterministic based for a given seed, so the entire
program should be compiled with the same seed, but keep the seed safe
otherwise.</p>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">no_randomize_layout</span></code>, when attached to a C structure,
instructs the compiler that this structure should not have its field layout
randomized.</p>
</section>
<section id=3D"selectany">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id529" role=3D"doc-backlink">selectany</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#selectany"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id109">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
09" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">selectany</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::selectany</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::selectany</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sel=
ectany</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute appertains to a global symbol, causing it to have a weak
definition (
<a class=3D"reference external" href=3D"https://llvm.org/docs/LangRef.html#=
linkage-types">linkonce</a>
), allowing the linker to select any definition.</p>
<p>For more information see
<a class=3D"reference external" href=3D"https://gcc.gnu.org/onlinedocs/gcc-=
7.2.0/gcc/Microsoft-Windows-Variable-Attributes.html">gcc documentation</a>
or <a class=3D"reference external" href=3D"https://docs.microsoft.com/pl-pl=
/cpp/cpp/selectany">msvc documentation</a>.</p>
</section>
<section id=3D"transparent-union">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id530" role=3D"doc-backlink">transparent_union</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#tr=
ansparent-union" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id110">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
10" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">transparent_union</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::transparent_union</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::transparent_union</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute can be applied to a union to change the behavior of calls=
 to
functions that have an argument with a transparent union type. The compiler
behavior is changed in the following manner:</p>
<ul class=3D"simple">
<li><p>A value whose type is any member of the transparent union can be pas=
sed as an
argument without the need to cast that value.</p></li>
<li><p>The argument is passed to the function using the calling convention =
of the
first member of the transparent union. Consequently, all the members of the
transparent union should have the same calling convention as its first memb=
er.</p></li>
</ul>
<p>Transparent unions are not supported in C++.</p>
</section>
<section id=3D"trivial-abi">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id531" role=3D"doc-backlink">trivial_abi</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#trivial-=
abi" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id111">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
11" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">trivial_abi</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::trivial_abi</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">tri=
vial_abi</span></code> attribute can be applied to a C++ class, struct, or =
union.
It instructs the compiler to pass and return the type using the C ABI for t=
he
underlying type when the type would otherwise be considered non-trivial for=
 the
purpose of calls.
A class annotated with <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">trivial_abi</span></code> can have non-trivial destructors or
copy/move constructors without automatically becoming non-trivial for the
purposes of calls. For example:</p>
<blockquote>
<div><div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"c1">// A is trivial for the purposes of calls =
because ``trivial_abi`` makes the</span>
<span class=3D"c1">// user-provided special functions trivial.</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>__attribute__</span><span class=3D"p">((</span><span class=3D"n">trivial_a=
bi</span><span class=3D"p">))</span><span class=3D"w"> </span><span class=
=3D"n">A</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"o">~</span><span class=3D"n">A</s=
pan><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"n">A</span><span class=3D"p">(</s=
pan><span class=3D"k">const</span><span class=3D"w"> </span><span class=3D"=
n">A</span><span class=3D"w"> </span><span class=3D"o">&amp;</span><span cl=
ass=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">A</span><span class=3D"p">(</s=
pan><span class=3D"n">A</span><span class=3D"w"> </span><span class=3D"o">&=
amp;&amp;</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">x</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"c1">// B's destructor and copy/move constructor are consider=
ed trivial for the</span>
<span class=3D"c1">// purpose of calls because A is trivial.</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>B</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">A</span><span class=3D"w"> </s=
pan><span class=3D"n">a</span><span class=3D"p">;</span>
<span class=3D"p">};</span>
</pre></div>
</div>
</div></blockquote>
<p>If a type is trivial for the purposes of calls, has a non-trivial destru=
ctor,
and is passed as an argument by value, the convention is that the callee wi=
ll
destroy the object before returning. The lifetime of the copy of the parame=
ter
in the caller ends without a destructor call when the call begins.</p>
<p>If a type is trivial for the purpose of calls, it is assumed to be trivi=
ally
relocatable for the purpose of <code class=3D"docutils literal notranslate"=
><span class=3D"pre">__is_trivially_relocatable</span></code>.</p>
<p>Attribute <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">trivial_abi</span></code> has no effect in the following cases:</p>
<ul class=3D"simple">
<li><p>The class directly declares a virtual base or virtual methods.</p></=
li>
<li><p>Copy constructors and move constructors of the class are all deleted=
.</p></li>
<li><p>The class has a base class that is non-trivial for the purposes of c=
alls.</p></li>
<li><p>The class has a non-static data member whose type is non-trivial for=
 the
purposes of calls, which includes:</p>
<ul>
<li><p>classes that are non-trivial for the purposes of calls</p></li>
<li><p>__weak-qualified types in Objective-C++</p></li>
<li><p>arrays of any of the above</p></li>
</ul>
</li>
</ul>
</section>
<section id=3D"using-if-exists">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id532" role=3D"doc-backlink">using_if_exists</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#usin=
g-if-exists" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id112">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
12" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">using_if_exists</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::using_if_exists</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">usi=
ng_if_exists</span></code> attribute applies to a using-declaration. It all=
ows
programmers to import a declaration that potentially does not exist, instea=
d
deferring any errors to the point of use. For instance:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">namespace</span><span class=3D"w"> </span><span =
class=3D"nn">empty_namespace</span><span class=3D"w"> </span><span class=3D=
"p">{};</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">using_if_exists</span><span class=3D"p">))</span>
<span class=3D"k">using</span><span class=3D"w"> </span><span class=3D"n">e=
mpty_namespace</span><span class=3D"o">::</span><span class=3D"n">does_not_=
exist</span><span class=3D"p">;</span><span class=3D"w"> </span><span class=
=3D"c1">// no error!</span>

<span class=3D"n">does_not_exist</span><span class=3D"w"> </span><span clas=
s=3D"n">x</span><span class=3D"p">;</span><span class=3D"w"> </span><span c=
lass=3D"c1">// error: use of unresolved 'using_if_exists'</span>
</pre></div>
</div>
<p>The C++ spelling of the attribute (<cite>[[clang::using_if_exists]]</cit=
e>) is also
supported as a clang extension, since ISO C++ doesn=E2=80=99t support attri=
butes in this
position. If the entity referred to by the using-declaration is found by na=
me
lookup, the attribute has no effect. This attribute is useful for libraries
(primarily, libc++) that wish to redeclare a set of declarations in another
namespace, when the availability of those declarations is difficult or
impossible to detect at compile time with the preprocessor.</p>
</section>
<section id=3D"weak">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id533" role=3D"doc-backlink">weak</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#weak" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id113">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
13" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">weak</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::weak</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::weak</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>In supported output formats the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">weak</span></code> attribute can be used to
specify that a variable or function should be emitted as a symbol with
<code class=3D"docutils literal notranslate"><span class=3D"pre">weak</span=
></code> (if a definition) or <code class=3D"docutils literal notranslate">=
<span class=3D"pre">extern_weak</span></code> (if a declaration of an
external symbol) <a class=3D"reference external" href=3D"https://llvm.org/d=
ocs/LangRef.html#linkage-types">linkage</a>.</p>
<p>If there is a non-weak definition of the symbol the linker will select
that over the weak. They must have same type and alignment (variables
must also have the same size), but may have a different value.</p>
<p>If there are multiple weak definitions of same symbol, but no non-weak
definition, they should have same type, size, alignment and value, the
linker will select one of them (see also <a class=3D"reference internal" hr=
ef=3D"https://clang.llvm.org/docs/AttributeReference.html#selectany">select=
any</a> attribute).</p>
<p>If the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
weak</span></code> attribute is applied to a <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">const</span></code> qualified variable
definition that variable is no longer consider a compiletime constant
as its value can change during linking (or dynamic linking). This
means that it can e.g no longer be part of an initializer expression.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">const</span><span class=3D"w"> </span><span class=
=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">ANSWER</span>=
<span class=3D"w"> </span><span class=3D"nf">__attribute__</span><span clas=
s=3D"w"> </span><span class=3D"p">((</span><span class=3D"n">weak</span><sp=
an class=3D"p">))</span><span class=3D"w"> </span><span class=3D"o">=3D</sp=
an><span class=3D"w"> </span><span class=3D"mi">42</span><span class=3D"p">=
;</span>

<span class=3D"cm">/* This function may be replaced link-time */</span>
<span class=3D"n">__attribute__</span><span class=3D"w"> </span><span class=
=3D"p">((</span><span class=3D"n">weak</span><span class=3D"p">))</span><sp=
an class=3D"w"> </span><span class=3D"kt">void</span><span class=3D"w"> </s=
pan><span class=3D"n">debug_log</span><span class=3D"p">(</span><span class=
=3D"k">const</span><span class=3D"w"> </span><span class=3D"kt">char</span>=
<span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">msg</=
span><span class=3D"p">)</span>
<span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">fprintf</span><span class=3D=
"p">(</span><span class=3D"n">stderr</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"s">"DEBUG: %s</span><span class=3D"se">\=
n</span><span class=3D"s">"</span><span class=3D"p">,</span><span class=3D"=
w"> </span><span class=3D"n">msg</span><span class=3D"p">);</span>
<span class=3D"p">}</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">ma=
in</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">argc</span><span class=3D"p">,</span><span=
 class=3D"w"> </span><span class=3D"k">const</span><span class=3D"w"> </spa=
n><span class=3D"kt">char</span><span class=3D"w"> </span><span class=3D"o"=
>**</span><span class=3D"n">argv</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">debug_log</span><span class=
=3D"w"> </span><span class=3D"p">(</span><span class=3D"s">"Starting up..."=
</span><span class=3D"p">);</span>

<span class=3D"w">    </span><span class=3D"cm">/* This may print something=
 else than "6 * 7 =3D 42",</span>
<span class=3D"cm">       if there is a non-weak definition of "ANSWER" in<=
/span>
<span class=3D"cm">       an object linked in */</span>
<span class=3D"w">    </span><span class=3D"n">printf</span><span class=3D"=
p">(</span><span class=3D"s">"6 * 7 =3D %d</span><span class=3D"se">\n</spa=
n><span class=3D"s">"</span><span class=3D"p">,</span><span class=3D"w"> </=
span><span class=3D"n">ANSWER</span><span class=3D"p">);</span>

<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
w"> </span><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"w"> </span><span class=3D"p">}</span>
</pre></div>
</div>
<p>If an external declaration is marked weak and that symbol does not
exist during linking (possibly dynamic) the address of the symbol will
evaluate to NULL.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">may_not_exist</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D=
"n">__attribute__</span><span class=3D"w"> </span><span class=3D"p">((</spa=
n><span class=3D"n">weak</span><span class=3D"p">));</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">m=
ain</span><span class=3D"p">(</span><span class=3D"kt">int</span><span clas=
s=3D"w"> </span><span class=3D"n">argc</span><span class=3D"p">,</span><spa=
n class=3D"w"> </span><span class=3D"k">const</span><span class=3D"w"> </sp=
an><span class=3D"kt">char</span><span class=3D"w"> </span><span class=3D"o=
">**</span><span class=3D"n">argv</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">may_not_exist</span><spa=
n class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">        </span><span class=3D"n">may_not_exist</span><spa=
n class=3D"p">();</span>
<span class=3D"w">    </span><span class=3D"p">}</span><span class=3D"w"> <=
/span><span class=3D"k">else</span><span class=3D"w"> </span><span class=3D=
"p">{</span>
<span class=3D"w">        </span><span class=3D"n">printf</span><span class=
=3D"p">(</span><span class=3D"s">"Function did not exist</span><span class=
=3D"se">\n</span><span class=3D"s">"</span><span class=3D"p">);</span>
<span class=3D"w">    </span><span class=3D"p">}</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
w"> </span><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
</section>
<section id=3D"field-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id534" role=3D"doc-backlink">Field Attributes</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#fie=
ld-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<section id=3D"counted-by">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id535" role=3D"doc-backlink">counted_by</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#counted-b=
y" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id114">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
14" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">counted_by</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::counted_by</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::counted_by</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">counted_by</span></code> attribute on the flexible array member=
 of a
structure in C. The argument for the attribute is the name of a field membe=
r
holding the count of elements in the flexible array. This information can b=
e
used to improve the results of the array bound sanitizer and the
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
dynamic_object_size</span></code> builtin. The <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">count</span></code> field member must =
be
within the same non-anonymous, enclosing struct as the flexible array membe=
r.</p>
<p>This example specifies that the flexible array member <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">array</span></code> has the =
number
of elements allocated for it in <code class=3D"docutils literal notranslate=
"><span class=3D"pre">count</span></code>:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">struct</span><span class=3D"w"> </span><span class=
=3D"nc">bar</span><span class=3D"p">;</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">size_t</span><span class=3D"w=
"> </span><span class=3D"n">count</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">char</span><span class=3D"w">=
 </span><span class=3D"n">other</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">struct</span><span class=3D"w"=
> </span><span class=3D"nc">bar</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">array</span><span class=3D"p">[]</span><sp=
an class=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D=
"p">((</span><span class=3D"n">counted_by</span><span class=3D"p">(</span><=
span class=3D"n">count</span><span class=3D"p">)));</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>This establishes a relationship between <code class=3D"docutils literal =
notranslate"><span class=3D"pre">array</span></code> and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">count</span></code>. Specifi=
cally,
<code class=3D"docutils literal notranslate"><span class=3D"pre">array</spa=
n></code> must have at least <code class=3D"docutils literal notranslate"><=
span class=3D"pre">count</span></code> number of elements available. It=E2=
=80=99s the
user=E2=80=99s responsibility to ensure that this relationship is maintaine=
d through
changes to the structure.</p>
<p>In the following example, the allocated array erroneously has fewer elem=
ents
than what=E2=80=99s specified by <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">p-&gt;count</span></code>. This would result in an o=
ut-of-bounds
access not being detected.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define SIZE_INCR 42</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo_alloc</span><span class=3D"p">(</span><span class=3D"kt">size_t</span><=
span class=3D"w"> </span><span class=3D"n">count</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>malloc</span><span class=3D"p">(</span><span class=3D"n">MAX</span><span c=
lass=3D"p">(</span><span class=3D"k">sizeof</span><span class=3D"p">(</span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">foo</span><span class=3D"p">),</span>
<span class=3D"w">                 </span><span class=3D"n">offsetof</span>=
<span class=3D"p">(</span><span class=3D"k">struct</span><span class=3D"w">=
 </span><span class=3D"nc">foo</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">array</span><span class=3D"p">[</span><spa=
n class=3D"mi">0</span><span class=3D"p">])</span><span class=3D"w"> </span=
><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">coun=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span c=
lass=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">bar</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)=
));</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">count</span><s=
pan class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span=
><span class=3D"n">SIZE_INCR</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The next example updates <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">p-&gt;count</span></code>, but breaks the relationship re=
quirement
that <code class=3D"docutils literal notranslate"><span class=3D"pre">p-&gt=
;array</span></code> must have at least <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">p-&gt;count</span></code> number of elements =
available:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define SIZE_INCR 42</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo_alloc</span><span class=3D"p">(</span><span class=3D"kt">size_t</span><=
span class=3D"w"> </span><span class=3D"n">count</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>malloc</span><span class=3D"p">(</span><span class=3D"n">MAX</span><span c=
lass=3D"p">(</span><span class=3D"k">sizeof</span><span class=3D"p">(</span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">foo</span><span class=3D"p">),</span>
<span class=3D"w">                 </span><span class=3D"n">offsetof</span>=
<span class=3D"p">(</span><span class=3D"k">struct</span><span class=3D"w">=
 </span><span class=3D"nc">foo</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">array</span><span class=3D"p">[</span><spa=
n class=3D"mi">0</span><span class=3D"p">])</span><span class=3D"w"> </span=
><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">coun=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span c=
lass=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">bar</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)=
));</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">count</span><s=
pan class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
use_foo</span><span class=3D"p">(</span><span class=3D"kt">int</span><span =
class=3D"w"> </span><span class=3D"n">index</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">val</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">+=3D</span><span class=3D"w"> </span><span class=3D"n">SIZE_INCR</sp=
an><span class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> <=
/span><span class=3D"mi">1</span><span class=3D"p">;</span><span class=3D"w=
"> </span><span class=3D"cm">/* 'count' is now larger than the number of el=
ements of 'array'. */</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">array</span><span class=3D"p">[</span><span class=
=3D"n">index</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">val</sp=
an><span class=3D"p">;</span><span class=3D"w">     </span><span class=3D"c=
m">/* The sanitizer can't properly check this access. */</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this example, an update to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">p-&gt;count</span></code> maintains the relationship
requirement:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">use_foo</span><span class=3D"p">(</span><span class=3D"kt">int</spa=
n><span class=3D"w"> </span><span class=3D"n">index</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">val</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">p</span><span class=3D"o">=
-&gt;</span><span class=3D"n">count</span><span class=3D"w"> </span><span c=
lass=3D"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"mi">0</spa=
n><span class=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
p">;</span>
<span class=3D"w">  </span><span class=3D"o">--</span><span class=3D"n">p</=
span><span class=3D"o">-&gt;</span><span class=3D"n">count</span><span clas=
s=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">array</span><span class=3D"p">[</span><span class=
=3D"n">index</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">val</sp=
an><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"counted-by-or-null">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id536" role=3D"doc-backlink">counted_by_or_null</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#counted-by-or-null" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id115">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
15" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">counted_by_or_null</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::counted_by_or_null</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::counted_by_or_null</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">counted_by</span></code> attribute on the flexible array member=
 of a
structure in C. The argument for the attribute is the name of a field membe=
r
holding the count of elements in the flexible array. This information can b=
e
used to improve the results of the array bound sanitizer and the
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
dynamic_object_size</span></code> builtin. The <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">count</span></code> field member must =
be
within the same non-anonymous, enclosing struct as the flexible array membe=
r.</p>
<p>This example specifies that the flexible array member <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">array</span></code> has the =
number
of elements allocated for it in <code class=3D"docutils literal notranslate=
"><span class=3D"pre">count</span></code>:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">struct</span><span class=3D"w"> </span><span class=
=3D"nc">bar</span><span class=3D"p">;</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">size_t</span><span class=3D"w=
"> </span><span class=3D"n">count</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">char</span><span class=3D"w">=
 </span><span class=3D"n">other</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">struct</span><span class=3D"w"=
> </span><span class=3D"nc">bar</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">array</span><span class=3D"p">[]</span><sp=
an class=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D=
"p">((</span><span class=3D"n">counted_by</span><span class=3D"p">(</span><=
span class=3D"n">count</span><span class=3D"p">)));</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>This establishes a relationship between <code class=3D"docutils literal =
notranslate"><span class=3D"pre">array</span></code> and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">count</span></code>. Specifi=
cally,
<code class=3D"docutils literal notranslate"><span class=3D"pre">array</spa=
n></code> must have at least <code class=3D"docutils literal notranslate"><=
span class=3D"pre">count</span></code> number of elements available. It=E2=
=80=99s the
user=E2=80=99s responsibility to ensure that this relationship is maintaine=
d through
changes to the structure.</p>
<p>In the following example, the allocated array erroneously has fewer elem=
ents
than what=E2=80=99s specified by <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">p-&gt;count</span></code>. This would result in an o=
ut-of-bounds
access not being detected.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define SIZE_INCR 42</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo_alloc</span><span class=3D"p">(</span><span class=3D"kt">size_t</span><=
span class=3D"w"> </span><span class=3D"n">count</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>malloc</span><span class=3D"p">(</span><span class=3D"n">MAX</span><span c=
lass=3D"p">(</span><span class=3D"k">sizeof</span><span class=3D"p">(</span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">foo</span><span class=3D"p">),</span>
<span class=3D"w">                 </span><span class=3D"n">offsetof</span>=
<span class=3D"p">(</span><span class=3D"k">struct</span><span class=3D"w">=
 </span><span class=3D"nc">foo</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">array</span><span class=3D"p">[</span><spa=
n class=3D"mi">0</span><span class=3D"p">])</span><span class=3D"w"> </span=
><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">coun=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span c=
lass=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">bar</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)=
));</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">count</span><s=
pan class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span=
><span class=3D"n">SIZE_INCR</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The next example updates <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">p-&gt;count</span></code>, but breaks the relationship re=
quirement
that <code class=3D"docutils literal notranslate"><span class=3D"pre">p-&gt=
;array</span></code> must have at least <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">p-&gt;count</span></code> number of elements =
available:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define SIZE_INCR 42</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo_alloc</span><span class=3D"p">(</span><span class=3D"kt">size_t</span><=
span class=3D"w"> </span><span class=3D"n">count</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>malloc</span><span class=3D"p">(</span><span class=3D"n">MAX</span><span c=
lass=3D"p">(</span><span class=3D"k">sizeof</span><span class=3D"p">(</span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">foo</span><span class=3D"p">),</span>
<span class=3D"w">                 </span><span class=3D"n">offsetof</span>=
<span class=3D"p">(</span><span class=3D"k">struct</span><span class=3D"w">=
 </span><span class=3D"nc">foo</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">array</span><span class=3D"p">[</span><spa=
n class=3D"mi">0</span><span class=3D"p">])</span><span class=3D"w"> </span=
><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">coun=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span c=
lass=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">bar</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)=
));</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">count</span><s=
pan class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
use_foo</span><span class=3D"p">(</span><span class=3D"kt">int</span><span =
class=3D"w"> </span><span class=3D"n">index</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">val</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">+=3D</span><span class=3D"w"> </span><span class=3D"n">SIZE_INCR</sp=
an><span class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> <=
/span><span class=3D"mi">1</span><span class=3D"p">;</span><span class=3D"w=
"> </span><span class=3D"cm">/* 'count' is now larger than the number of el=
ements of 'array'. */</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">array</span><span class=3D"p">[</span><span class=
=3D"n">index</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">val</sp=
an><span class=3D"p">;</span><span class=3D"w">     </span><span class=3D"c=
m">/* The sanitizer can't properly check this access. */</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this example, an update to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">p-&gt;count</span></code> maintains the relationship
requirement:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">use_foo</span><span class=3D"p">(</span><span class=3D"kt">int</spa=
n><span class=3D"w"> </span><span class=3D"n">index</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">val</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">p</span><span class=3D"o">=
-&gt;</span><span class=3D"n">count</span><span class=3D"w"> </span><span c=
lass=3D"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"mi">0</spa=
n><span class=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
p">;</span>
<span class=3D"w">  </span><span class=3D"o">--</span><span class=3D"n">p</=
span><span class=3D"o">-&gt;</span><span class=3D"n">count</span><span clas=
s=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">array</span><span class=3D"p">[</span><span class=
=3D"n">index</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">val</sp=
an><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"no-unique-address">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id537" role=3D"doc-backlink">no_unique_address</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#no=
-unique-address" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id116">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
16" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">no_=
unique_address</span></code> <br> <code class=3D"docutils literal notransla=
te"><span class=3D"pre">msvc::no_unique_address</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">no_=
unique_address</span></code> attribute allows tail padding in a non-static =
data
member to overlap other members of the enclosing class (and in the special
case when the type is empty, permits it to fully overlap other members).
The field is laid out as if a base class were encountered at the correspond=
ing
point within the class (except that it does not share a vptr with the enclo=
sing
object).</p>
<p>Example usage:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">template</span><span class=3D"o">&lt;</span><spa=
n class=3D"k">typename</span><span class=3D"w"> </span><span class=3D"nc">T=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k=
">typename</span><span class=3D"w"> </span><span class=3D"nc">Alloc</span><=
span class=3D"o">&gt;</span><span class=3D"w"> </span><span class=3D"k">str=
uct</span><span class=3D"w"> </span><span class=3D"nc">my_vector</span><spa=
n class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">T</span><span class=3D"w"> </s=
pan><span class=3D"o">*</span><span class=3D"n">p</span><span class=3D"p">;=
</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">no_=
unique_address</span><span class=3D"p">]]</span><span class=3D"w"> </span><=
span class=3D"n">Alloc</span><span class=3D"w"> </span><span class=3D"n">al=
loc</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"c1">// ...</span>
<span class=3D"p">};</span>
<span class=3D"k">static_assert</span><span class=3D"p">(</span><span class=
=3D"k">sizeof</span><span class=3D"p">(</span><span class=3D"n">my_vector</=
span><span class=3D"o">&lt;</span><span class=3D"kt">int</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">std</span><span =
class=3D"o">::</span><span class=3D"n">allocator</span><span class=3D"o">&l=
t;</span><span class=3D"kt">int</span><span class=3D"o">&gt;&gt;</span><spa=
n class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=3D=3D</s=
pan><span class=3D"w"> </span><span class=3D"k">sizeof</span><span class=3D=
"p">(</span><span class=3D"kt">int</span><span class=3D"o">*</span><span cl=
ass=3D"p">));</span>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">[[no_un=
ique_address]]</span></code> is a standard C++20 attribute. Clang supports =
its use
in C++11 onwards.</p>
<p>On MSVC targets, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">[[no_unique_address]]</span></code> is ignored; use
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[msvc::no=
_unique_address]]</span></code> instead. Currently there is no guarantee of=
 ABI
compatibility or stability with MSVC.</p>
</section>
<section id=3D"preferred-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id538" role=3D"doc-backlink">preferred_type</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#prefe=
rred-type" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id117">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
17" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">preferred_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preferred_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preferred_type</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute allows adjusting the type of a bit-field in debug informa=
tion.
This can be helpful when a bit-field is intended to store an enumeration va=
lue,
but has to be specified as having the enumeration=E2=80=99s underlying type=
 in order to
facilitate compiler optimizations or bit-field packing behavior. Normally, =
the
underlying type is what is emitted in debug information, which can make it =
hard
for debuggers to know to map a bit-field=E2=80=99s value back to a particul=
ar enumeration.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">enum</span><span class=3D"w"> </span><span class=
=3D"nc">Colors</span><span class=3D"w"> </span><span class=3D"p">{</span><s=
pan class=3D"w"> </span><span class=3D"n">Red</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"n">Green</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">Blue</span><span clas=
s=3D"w"> </span><span class=3D"p">};</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>S</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">preferred_type</span>=
<span class=3D"p">(</span><span class=3D"n">Colors</span><span class=3D"p">=
)]]</span><span class=3D"w"> </span><span class=3D"kt">unsigned</span><span=
 class=3D"w"> </span><span class=3D"n">ColorVal</span><span class=3D"w"> </=
span><span class=3D"o">:</span><span class=3D"w"> </span><span class=3D"mi"=
>2</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">preferred_type</span>=
<span class=3D"p">(</span><span class=3D"kt">bool</span><span class=3D"p">)=
]]</span><span class=3D"w"> </span><span class=3D"kt">unsigned</span><span =
class=3D"w"> </span><span class=3D"n">UseAlternateColorSpace</span><span cl=
ass=3D"w"> </span><span class=3D"o">:</span><span class=3D"w"> </span><span=
 class=3D"mi">1</span><span class=3D"p">;</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"n">s</sp=
an><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w">=
 </span><span class=3D"p">{</span><span class=3D"w"> </span><span class=3D"=
n">Green</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"nb">false</span><span class=3D"w"> </span><span class=3D"p">};</span=
>
</pre></div>
</div>
<p>Without the attribute, a debugger is likely to display the value <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">1</span></code> f=
or <code class=3D"docutils literal notranslate"><span class=3D"pre">ColorVa=
l</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">0</spa=
n></code> for <code class=3D"docutils literal notranslate"><span class=3D"p=
re">UseAlternateColorSpace</span></code>. With the attribute, the debugger =
may now
display <code class=3D"docutils literal notranslate"><span class=3D"pre">Gr=
een</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">false</span></code> instead.</p>
<p>This can be used to map a bit-field to an arbitrary type that isn=E2=80=
=99t integral
or an enumeration type. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">A</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">short</span><span class=3D"w"=
> </span><span class=3D"n">a1</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">short</span><span class=3D"w"=
> </span><span class=3D"n">a2</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>B</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">preferred_type</span>=
<span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">)]]</=
span><span class=3D"w"> </span><span class=3D"kt">unsigned</span><span clas=
s=3D"w"> </span><span class=3D"n">b1</span><span class=3D"w"> </span><span =
class=3D"o">:</span><span class=3D"w"> </span><span class=3D"mi">32</span><=
span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </s=
pan><span class=3D"mh">0x000F'000C</span><span class=3D"p">;</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>will associate the type <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">A</span></code> with the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">b1</span></code> bit-field and is intended =
to display
something like this in the debugger:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre><sp=
an></span>Process 2755547 stopped
* thread #1, name =3D 'test-preferred-', stop reason =3D step in
    frame #0: 0x0000555555555148 test-preferred-type`main at test.cxx:13:14
   10   int main()
   11   {
   12       B b;
-&gt; 13       return b.b1;
   14   }
(lldb) v -T
(B) b =3D {
  (A:32) b1 =3D {
    (short) a1 =3D 12
    (short) a2 =3D 15
  }
}
</pre></div>
</div>
<p>Note that debuggers may not be able to handle more complex mappings, and=
 so
this usage is debugger-dependent.</p>
</section>
<section id=3D"require-explicit-initialization">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id539" role=3D"doc-backlink">require_explicit_initialization<=
/a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRef=
erence.html#require-explicit-initialization" title=3D"Link to this heading"=
>=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id118">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
18" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">require_explicit_initialization</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::require_explicit_initialization</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::require_explicit_initialization</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::require_explicit_initialization</span></code> attribute indicates that =
a
field of an aggregate must be initialized explicitly by the user when an ob=
ject
of the aggregate type is constructed. The attribute supports both C and C++=
,
but its usage is invalid on non-aggregates.</p>
<p>Note that this attribute is <em>not</em> a memory safety feature, and is=
 <em>not</em> intended
to guard against use of uninitialized memory.</p>
<p>Rather, it is intended for use in =E2=80=9Cparameter-objects=E2=80=9D, u=
sed to simulate,
for example, the passing of named parameters.
The attribute generates a warning when explicit initializers for such
variables are not provided (this occurs regardless of whether any in-class =
field
initializers exist):</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">Buffer</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"o">*</span><span class=3D"n">address</span><span cla=
ss=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">clang</span><=
span class=3D"o">::</span><span class=3D"n">require_explicit_initialization=
</span><span class=3D"p">]];</span>
<span class=3D"w">  </span><span class=3D"kt">size_t</span><span class=3D"w=
"> </span><span class=3D"n">length</span><span class=3D"w"> </span><span cl=
ass=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</span=
><span class=3D"n">require_explicit_initialization</span><span class=3D"p">=
]]</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>ArrayIOParams</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">size_t</span><span class=3D"w=
"> </span><span class=3D"n">count</span><span class=3D"w"> </span><span cla=
ss=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</span>=
<span class=3D"n">require_explicit_initialization</span><span class=3D"p">]=
];</span>
<span class=3D"w">  </span><span class=3D"kt">size_t</span><span class=3D"w=
"> </span><span class=3D"n">element_size</span><span class=3D"w"> </span><s=
pan class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::=
</span><span class=3D"n">require_explicit_initialization</span><span class=
=3D"p">]];</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">flags</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><span=
 class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"kt">size_t</span><span class=3D"w"> </span><span class=3D"nf=
">ReadArray</span><span class=3D"p">(</span><span class=3D"kt">FILE</span><=
span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">file</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">=
struct</span><span class=3D"w"> </span><span class=3D"nc">Buffer</span><spa=
n class=3D"w"> </span><span class=3D"n">buffer</span><span class=3D"p">,</s=
pan>
<span class=3D"w">                 </span><span class=3D"k">struct</span><s=
pan class=3D"w"> </span><span class=3D"nc">ArrayIOParams</span><span class=
=3D"w"> </span><span class=3D"n">params</span><span class=3D"p">);</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">m=
ain</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">unsigned</span><span class=3D=
"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </span><span cl=
ass=3D"n">buf</span><span class=3D"p">[</span><span class=3D"mi">512</span>=
<span class=3D"p">];</span>
<span class=3D"w">  </span><span class=3D"n">ReadArray</span><span class=3D=
"p">(</span><span class=3D"n">stdin</span><span class=3D"p">,</span><span c=
lass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">buf</span>
<span class=3D"w">    </span><span class=3D"c1">// warning: field 'length' =
is not explicitly initialized</span>
<span class=3D"w">  </span><span class=3D"p">},</span><span class=3D"w"> </=
span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"p">.</span><span class=3D"n">co=
unt</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><sp=
an class=3D"n">buf</span><span class=3D"p">)</span><span class=3D"w"> </spa=
n><span class=3D"o">/</span><span class=3D"w"> </span><span class=3D"k">siz=
eof</span><span class=3D"p">(</span><span class=3D"o">*</span><span class=
=3D"n">buf</span><span class=3D"p">),</span>
<span class=3D"w">    </span><span class=3D"c1">// warning: field 'element_=
size' is not explicitly initialized</span>
<span class=3D"w">    </span><span class=3D"c1">// (Note that a missing ini=
tializer for 'flags' is not diagnosed, because</span>
<span class=3D"w">    </span><span class=3D"c1">// the field is not marked =
as requiring explicit initialization.)</span>
<span class=3D"w">  </span><span class=3D"p">});</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"sized-by">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id540" role=3D"doc-backlink">sized_by</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sized-by" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id119">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
19" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">sized_by</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sized_by</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sized_by</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">counted_by</span></code> attribute on the flexible array member=
 of a
structure in C. The argument for the attribute is the name of a field membe=
r
holding the count of elements in the flexible array. This information can b=
e
used to improve the results of the array bound sanitizer and the
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
dynamic_object_size</span></code> builtin. The <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">count</span></code> field member must =
be
within the same non-anonymous, enclosing struct as the flexible array membe=
r.</p>
<p>This example specifies that the flexible array member <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">array</span></code> has the =
number
of elements allocated for it in <code class=3D"docutils literal notranslate=
"><span class=3D"pre">count</span></code>:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">struct</span><span class=3D"w"> </span><span class=
=3D"nc">bar</span><span class=3D"p">;</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">size_t</span><span class=3D"w=
"> </span><span class=3D"n">count</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">char</span><span class=3D"w">=
 </span><span class=3D"n">other</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">struct</span><span class=3D"w"=
> </span><span class=3D"nc">bar</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">array</span><span class=3D"p">[]</span><sp=
an class=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D=
"p">((</span><span class=3D"n">counted_by</span><span class=3D"p">(</span><=
span class=3D"n">count</span><span class=3D"p">)));</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>This establishes a relationship between <code class=3D"docutils literal =
notranslate"><span class=3D"pre">array</span></code> and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">count</span></code>. Specifi=
cally,
<code class=3D"docutils literal notranslate"><span class=3D"pre">array</spa=
n></code> must have at least <code class=3D"docutils literal notranslate"><=
span class=3D"pre">count</span></code> number of elements available. It=E2=
=80=99s the
user=E2=80=99s responsibility to ensure that this relationship is maintaine=
d through
changes to the structure.</p>
<p>In the following example, the allocated array erroneously has fewer elem=
ents
than what=E2=80=99s specified by <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">p-&gt;count</span></code>. This would result in an o=
ut-of-bounds
access not being detected.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define SIZE_INCR 42</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo_alloc</span><span class=3D"p">(</span><span class=3D"kt">size_t</span><=
span class=3D"w"> </span><span class=3D"n">count</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>malloc</span><span class=3D"p">(</span><span class=3D"n">MAX</span><span c=
lass=3D"p">(</span><span class=3D"k">sizeof</span><span class=3D"p">(</span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">foo</span><span class=3D"p">),</span>
<span class=3D"w">                 </span><span class=3D"n">offsetof</span>=
<span class=3D"p">(</span><span class=3D"k">struct</span><span class=3D"w">=
 </span><span class=3D"nc">foo</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">array</span><span class=3D"p">[</span><spa=
n class=3D"mi">0</span><span class=3D"p">])</span><span class=3D"w"> </span=
><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">coun=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span c=
lass=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">bar</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)=
));</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">count</span><s=
pan class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span=
><span class=3D"n">SIZE_INCR</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The next example updates <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">p-&gt;count</span></code>, but breaks the relationship re=
quirement
that <code class=3D"docutils literal notranslate"><span class=3D"pre">p-&gt=
;array</span></code> must have at least <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">p-&gt;count</span></code> number of elements =
available:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define SIZE_INCR 42</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo_alloc</span><span class=3D"p">(</span><span class=3D"kt">size_t</span><=
span class=3D"w"> </span><span class=3D"n">count</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>malloc</span><span class=3D"p">(</span><span class=3D"n">MAX</span><span c=
lass=3D"p">(</span><span class=3D"k">sizeof</span><span class=3D"p">(</span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">foo</span><span class=3D"p">),</span>
<span class=3D"w">                 </span><span class=3D"n">offsetof</span>=
<span class=3D"p">(</span><span class=3D"k">struct</span><span class=3D"w">=
 </span><span class=3D"nc">foo</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">array</span><span class=3D"p">[</span><spa=
n class=3D"mi">0</span><span class=3D"p">])</span><span class=3D"w"> </span=
><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">coun=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span c=
lass=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">bar</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)=
));</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">count</span><s=
pan class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
use_foo</span><span class=3D"p">(</span><span class=3D"kt">int</span><span =
class=3D"w"> </span><span class=3D"n">index</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">val</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">+=3D</span><span class=3D"w"> </span><span class=3D"n">SIZE_INCR</sp=
an><span class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> <=
/span><span class=3D"mi">1</span><span class=3D"p">;</span><span class=3D"w=
"> </span><span class=3D"cm">/* 'count' is now larger than the number of el=
ements of 'array'. */</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">array</span><span class=3D"p">[</span><span class=
=3D"n">index</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">val</sp=
an><span class=3D"p">;</span><span class=3D"w">     </span><span class=3D"c=
m">/* The sanitizer can't properly check this access. */</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this example, an update to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">p-&gt;count</span></code> maintains the relationship
requirement:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">use_foo</span><span class=3D"p">(</span><span class=3D"kt">int</spa=
n><span class=3D"w"> </span><span class=3D"n">index</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">val</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">p</span><span class=3D"o">=
-&gt;</span><span class=3D"n">count</span><span class=3D"w"> </span><span c=
lass=3D"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"mi">0</spa=
n><span class=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
p">;</span>
<span class=3D"w">  </span><span class=3D"o">--</span><span class=3D"n">p</=
span><span class=3D"o">-&gt;</span><span class=3D"n">count</span><span clas=
s=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">array</span><span class=3D"p">[</span><span class=
=3D"n">index</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">val</sp=
an><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"sized-by-or-null">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id541" role=3D"doc-backlink">sized_by_or_null</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#siz=
ed-by-or-null" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id120">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
20" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">sized_by_or_null</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sized_by_or_null</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sized_by_or_null</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">counted_by</span></code> attribute on the flexible array member=
 of a
structure in C. The argument for the attribute is the name of a field membe=
r
holding the count of elements in the flexible array. This information can b=
e
used to improve the results of the array bound sanitizer and the
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
dynamic_object_size</span></code> builtin. The <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">count</span></code> field member must =
be
within the same non-anonymous, enclosing struct as the flexible array membe=
r.</p>
<p>This example specifies that the flexible array member <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">array</span></code> has the =
number
of elements allocated for it in <code class=3D"docutils literal notranslate=
"><span class=3D"pre">count</span></code>:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">struct</span><span class=3D"w"> </span><span class=
=3D"nc">bar</span><span class=3D"p">;</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">size_t</span><span class=3D"w=
"> </span><span class=3D"n">count</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">char</span><span class=3D"w">=
 </span><span class=3D"n">other</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">struct</span><span class=3D"w"=
> </span><span class=3D"nc">bar</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">array</span><span class=3D"p">[]</span><sp=
an class=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D=
"p">((</span><span class=3D"n">counted_by</span><span class=3D"p">(</span><=
span class=3D"n">count</span><span class=3D"p">)));</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>This establishes a relationship between <code class=3D"docutils literal =
notranslate"><span class=3D"pre">array</span></code> and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">count</span></code>. Specifi=
cally,
<code class=3D"docutils literal notranslate"><span class=3D"pre">array</spa=
n></code> must have at least <code class=3D"docutils literal notranslate"><=
span class=3D"pre">count</span></code> number of elements available. It=E2=
=80=99s the
user=E2=80=99s responsibility to ensure that this relationship is maintaine=
d through
changes to the structure.</p>
<p>In the following example, the allocated array erroneously has fewer elem=
ents
than what=E2=80=99s specified by <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">p-&gt;count</span></code>. This would result in an o=
ut-of-bounds
access not being detected.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define SIZE_INCR 42</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo_alloc</span><span class=3D"p">(</span><span class=3D"kt">size_t</span><=
span class=3D"w"> </span><span class=3D"n">count</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>malloc</span><span class=3D"p">(</span><span class=3D"n">MAX</span><span c=
lass=3D"p">(</span><span class=3D"k">sizeof</span><span class=3D"p">(</span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">foo</span><span class=3D"p">),</span>
<span class=3D"w">                 </span><span class=3D"n">offsetof</span>=
<span class=3D"p">(</span><span class=3D"k">struct</span><span class=3D"w">=
 </span><span class=3D"nc">foo</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">array</span><span class=3D"p">[</span><spa=
n class=3D"mi">0</span><span class=3D"p">])</span><span class=3D"w"> </span=
><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">coun=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span c=
lass=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">bar</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)=
));</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">count</span><s=
pan class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span=
><span class=3D"n">SIZE_INCR</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The next example updates <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">p-&gt;count</span></code>, but breaks the relationship re=
quirement
that <code class=3D"docutils literal notranslate"><span class=3D"pre">p-&gt=
;array</span></code> must have at least <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">p-&gt;count</span></code> number of elements =
available:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define SIZE_INCR 42</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>foo</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo_alloc</span><span class=3D"p">(</span><span class=3D"kt">size_t</span><=
span class=3D"w"> </span><span class=3D"n">count</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>malloc</span><span class=3D"p">(</span><span class=3D"n">MAX</span><span c=
lass=3D"p">(</span><span class=3D"k">sizeof</span><span class=3D"p">(</span=
><span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc=
">foo</span><span class=3D"p">),</span>
<span class=3D"w">                 </span><span class=3D"n">offsetof</span>=
<span class=3D"p">(</span><span class=3D"k">struct</span><span class=3D"w">=
 </span><span class=3D"nc">foo</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">array</span><span class=3D"p">[</span><spa=
n class=3D"mi">0</span><span class=3D"p">])</span><span class=3D"w"> </span=
><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">coun=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
w"> </span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span c=
lass=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc">bar</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)=
));</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">count</span><s=
pan class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
use_foo</span><span class=3D"p">(</span><span class=3D"kt">int</span><span =
class=3D"w"> </span><span class=3D"n">index</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">val</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">count</span><span class=3D"w"> </span><span class=
=3D"o">+=3D</span><span class=3D"w"> </span><span class=3D"n">SIZE_INCR</sp=
an><span class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> <=
/span><span class=3D"mi">1</span><span class=3D"p">;</span><span class=3D"w=
"> </span><span class=3D"cm">/* 'count' is now larger than the number of el=
ements of 'array'. */</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">array</span><span class=3D"p">[</span><span class=
=3D"n">index</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">val</sp=
an><span class=3D"p">;</span><span class=3D"w">     </span><span class=3D"c=
m">/* The sanitizer can't properly check this access. */</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this example, an update to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">p-&gt;count</span></code> maintains the relationship
requirement:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">use_foo</span><span class=3D"p">(</span><span class=3D"kt">int</spa=
n><span class=3D"w"> </span><span class=3D"n">index</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">val</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">p</span><span class=3D"o">=
-&gt;</span><span class=3D"n">count</span><span class=3D"w"> </span><span c=
lass=3D"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"mi">0</spa=
n><span class=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
p">;</span>
<span class=3D"w">  </span><span class=3D"o">--</span><span class=3D"n">p</=
span><span class=3D"o">-&gt;</span><span class=3D"n">count</span><span clas=
s=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"o">-&gt=
;</span><span class=3D"n">array</span><span class=3D"p">[</span><span class=
=3D"n">index</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">val</sp=
an><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
</section>
<section id=3D"function-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id542" role=3D"doc-backlink">Function Attributes</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#function-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<section id=3D"pragma-omp-declare-simd">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id543" role=3D"doc-backlink">#pragma omp declare simd</a><a c=
lass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.=
html#pragma-omp-declare-simd" title=3D"Link to this heading">=C2=B6</a></h3=
>
<table class=3D"docutils align-default" id=3D"id121">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
21" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>`` declare simd``</p></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dec=
lare</span> <span class=3D"pre">simd</span></code> construct can be applied=
 to a function to enable the creation
of one or more versions that can process multiple arguments using SIMD
instructions from a single invocation in a SIMD loop. The <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">declare</span> <span class=
=3D"pre">simd</span></code>
directive is a declarative directive. There may be multiple <code class=3D"=
docutils literal notranslate"><span class=3D"pre">declare</span> <span clas=
s=3D"pre">simd</span></code>
directives for a function. The use of a <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">declare</span> <span class=3D"pre">simd</span=
></code> construct on a function
enables the creation of SIMD versions of the associated function that can b=
e
used to process multiple arguments from a single invocation from a SIMD loo=
p
concurrently.
The syntax of the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">declare</span> <span class=3D"pre">simd</span></code> construct is=
 as follows:</p>
<blockquote>
<div><div class=3D"highlight-none notranslate"><div class=3D"highlight"><pr=
e><span></span>#pragma omp declare simd [clause[[,] clause] ...] new-line
[#pragma omp declare simd [clause[[,] clause] ...] new-line]
[...]
function definition or declaration
</pre></div>
</div>
</div></blockquote>
<p>where clause is one of the following:</p>
<blockquote>
<div><div class=3D"highlight-none notranslate"><div class=3D"highlight"><pr=
e><span></span>simdlen(length)
linear(argument-list[:constant-linear-step])
aligned(argument-list[:alignment])
uniform(argument-list)
inbranch
notinbranch
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"pragma-omp-declare-target">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id544" role=3D"doc-backlink">#pragma omp declare target</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferenc=
e.html#pragma-omp-declare-target" title=3D"Link to this heading">=C2=B6</a>=
</h3>
<table class=3D"docutils align-default" id=3D"id122">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
22" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>`` declare target``</p></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dec=
lare</span> <span class=3D"pre">target</span></code> directive specifies th=
at variables and functions are mapped
to a device for OpenMP offload mechanism.</p>
<p>The syntax of the declare target directive is as follows:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"cp">#pragma omp declare target new-line</span>
<span class=3D"n">declarations</span><span class=3D"o">-</span><span class=
=3D"n">definition</span><span class=3D"o">-</span><span class=3D"n">seq</sp=
an>
<span class=3D"cp">#pragma omp end declare target new-line</span>
</pre></div>
</div>
</div></blockquote>
<p>or</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"cp">#pragma omp declare target (extended-list) n=
ew-line</span>
</pre></div>
</div>
</div></blockquote>
<p>or</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"cp">#pragma omp declare target clause[ [,] claus=
e ... ] new-line</span>
</pre></div>
</div>
</div></blockquote>
<p>where clause is one of the following:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">to</span><span class=3D"p">(</span><span clas=
s=3D"n">extended</span><span class=3D"o">-</span><span class=3D"n">list</sp=
an><span class=3D"p">)</span>
<span class=3D"n">link</span><span class=3D"p">(</span><span class=3D"n">li=
st</span><span class=3D"p">)</span>
<span class=3D"n">device_type</span><span class=3D"p">(</span><span class=
=3D"n">host</span><span class=3D"w"> </span><span class=3D"o">|</span><span=
 class=3D"w"> </span><span class=3D"n">nohost</span><span class=3D"w"> </sp=
an><span class=3D"o">|</span><span class=3D"w"> </span><span class=3D"n">an=
y</span><span class=3D"p">)</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"pragma-omp-declare-variant">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id545" role=3D"doc-backlink">#pragma omp declare variant</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferen=
ce.html#pragma-omp-declare-variant" title=3D"Link to this heading">=C2=B6</=
a></h3>
<table class=3D"docutils align-default" id=3D"id123">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
23" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>`` declare variant``</p></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dec=
lare</span> <span class=3D"pre">variant</span></code> directive declares a =
specialized variant of a base
function and specifies the context in which that specialized variant is use=
d.
The declare variant directive is a declarative directive.
The syntax of the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">declare</span> <span class=3D"pre">variant</span></code> construct=
 is as follows:</p>
<blockquote>
<div><div class=3D"highlight-none notranslate"><div class=3D"highlight"><pr=
e><span></span>#pragma omp declare variant(variant-func-id) clause new-line
[#pragma omp declare variant(variant-func-id) clause new-line]
[...]
function definition or declaration
</pre></div>
</div>
</div></blockquote>
<p>where clause is one of the following:</p>
<blockquote>
<div><div class=3D"highlight-none notranslate"><div class=3D"highlight"><pr=
e><span></span>match(context-selector-specification)
</pre></div>
</div>
</div></blockquote>
<p>and where <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">variant-func-id</span></code> is the name of a function variant that is =
either a
base language identifier or, for C++, a template-id.</p>
<p>Clang provides the following context selector extensions, used via
<code class=3D"docutils literal notranslate"><span class=3D"pre">implementa=
tion=3D{extension(EXTENSION)}</span></code>:</p>
<blockquote>
<div><div class=3D"highlight-none notranslate"><div class=3D"highlight"><pr=
e><span></span>match_all
match_any
match_none
disable_implicit_base
allow_templates
bind_to_declaration
</pre></div>
</div>
</div></blockquote>
<p>The match extensions change when the <em>entire</em> context selector is=
 considered a
match for an OpenMP context. The default is <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">all</span></code>, with <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">none</span></code> no trait=
 in the
selector is allowed to be in the OpenMP context, with <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">any</span></code> a single trai=
t in
both the selector and OpenMP context is sufficient. Only a single match
extension trait is allowed per context selector.
The disable extensions remove default effects of the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">begin</span> <span class=3D"pre"=
>declare</span> <span class=3D"pre">variant</span></code>
applied to a definition. If <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">disable_implicit_base</span></code> is given, we will not
introduce an implicit base function for a variant if no base function was
found. The variant is still generated but will never be called, due to the
absence of a base function and consequently calls to a base function.
The allow extensions change when the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">begin</span> <span class=3D"pre">declare</span> =
<span class=3D"pre">variant</span></code> effect is
applied to a definition. If <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">allow_templates</span></code> is given, template function
definitions are considered as specializations of existing or assumed templa=
te
declarations with the same name. The template parameters for the base funct=
ions
are used to instantiate the specialization. If <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">bind_to_declaration</span></code> is g=
iven,
apply the same variant rules to function declarations. This allows the user=
 to
override declarations with only a function declaration.</p>
</section>
<section id=3D"sv-dispatchthreadid">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id546" role=3D"doc-backlink">SV_DispatchThreadID</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#sv-dispatchthreadid" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id124">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
24" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">SV_=
DispatchThreadID</span></code></p></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">SV_=
DispatchThreadID</span></code> semantic, when applied to an input parameter=
,
specifies a data binding to map the global thread offset within the Dispatc=
h
call (per dimension of the group) to the specified parameter.
When applied to a field of a struct, the data binding is specified to the f=
ield
when the struct is used as a parameter type.
The semantic on the field is ignored when not used as a parameter.
This attribute is only supported in compute shaders.</p>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv-di=
spatchthreadid">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl=
/sv-dispatchthreadid</a></p>
</section>
<section id=3D"sv-groupid">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id547" role=3D"doc-backlink">SV_GroupID</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sv-groupi=
d" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id125">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
25" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">SV_=
GroupID</span></code></p></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">SV_=
GroupID</span></code> semantic, when applied to an input parameter, specifi=
es which
thread group a shader is executing in. This attribute is only supported in =
compute shaders.</p>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv-gr=
oupid">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv-group=
id</a></p>
</section>
<section id=3D"sv-groupindex">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id548" role=3D"doc-backlink">SV_GroupIndex</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sv-gro=
upindex" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id126">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
26" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">SV_=
GroupIndex</span></code></p></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">SV_=
GroupIndex</span></code> semantic, when applied to an input parameter, spec=
ifies a
data binding to map the group index to the specified parameter. This attrib=
ute
is only supported in compute shaders.</p>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv-gr=
oupindex">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv-gr=
oupindex</a></p>
</section>
<section id=3D"sv-groupthreadid">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id549" role=3D"doc-backlink">SV_GroupThreadID</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sv-=
groupthreadid" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id127">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
27" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">SV_=
GroupThreadID</span></code></p></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">SV_=
GroupThreadID</span></code> semantic, when applied to an input parameter, s=
pecifies which
individual thread within a thread group is executing in. This attribute is
only supported in compute shaders.</p>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv-gr=
oupthreadid">https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv=
-groupthreadid</a></p>
</section>
<section id=3D"wavesize">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id550" role=3D"doc-backlink">WaveSize</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#wavesize" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id128">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
28" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Wav=
eSize</span></code> attribute specify a wave size on a shader entry point i=
n order
to indicate either that a shader depends on or strongly prefers a specific =
wave
size.
There=E2=80=99re 2 versions of the attribute: <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">WaveSize</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">RangedWaveSize</span>=
</code>.
The syntax for <code class=3D"docutils literal notranslate"><span class=3D"=
pre">WaveSize</span></code> is:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre><sp=
an></span>``[WaveSize(&lt;numLanes&gt;)]``
</pre></div>
</div>
<p>The allowed wave sizes that an HLSL shader may specify are the powers of=
 2
between 4 and 128, inclusive.
In other words, the set: [4, 8, 16, 32, 64, 128].</p>
<p>The syntax for <code class=3D"docutils literal notranslate"><span class=
=3D"pre">RangedWaveSize</span></code> is:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre><sp=
an></span>``[WaveSize(&lt;minWaveSize&gt;, &lt;maxWaveSize&gt;, [prefWaveSi=
ze])]``
</pre></div>
</div>
<p>Where minWaveSize is the minimum wave size supported by the shader repre=
senting
the beginning of the allowed range, maxWaveSize is the maximum wave size
supported by the shader representing the end of the allowed range, and
prefWaveSize is the optional preferred wave size representing the size expe=
cted
to be the most optimal for this shader.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">WaveSiz=
e</span></code> is available for HLSL shader model 6.6 and later.
<code class=3D"docutils literal notranslate"><span class=3D"pre">RangedWave=
Size</span></code> available for HLSL shader model 6.8 and later.</p>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://microsoft.github.io/DirectX-Specs/d3d/HLSL_SM_6_6_WaveSiz=
e.html">https://microsoft.github.io/DirectX-Specs/d3d/HLSL_SM_6_6_WaveSize.=
html</a>
and <a class=3D"reference external" href=3D"https://microsoft.github.io/hls=
l-specs/proposals/0013-wave-size-range.html">https://microsoft.github.io/hl=
sl-specs/proposals/0013-wave-size-range.html</a></p>
</section>
<section id=3D"noreturn">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id551" role=3D"doc-backlink">_Noreturn</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#noreturn" =
title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id129">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
29" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">_No=
return</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>A function declared as <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">_Noreturn</span></code> shall not return to its caller. The
compiler will generate a diagnostic for a function declared as <code class=
=3D"docutils literal notranslate"><span class=3D"pre">_Noreturn</span></cod=
e>
that appears to be capable of returning to its caller. Despite being a type
specifier, the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">_Noreturn</span></code> attribute cannot be specified on a function
pointer type.</p>
</section>
<section id=3D"funcref">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id552" role=3D"doc-backlink">__funcref</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#funcref" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id130">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
30" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__f=
uncref</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((export_name(&lt;name&gt;)))</span></code>
attribute for the WebAssembly target. This attribute may be attached to a
function declaration, where it modifies how the symbol is to be exported
from the linked WebAssembly.</p>
<p>WebAssembly functions are exported via string name. By default when a sy=
mbol
is exported, the export name for C/C++ symbols are the same as their C/C++
symbol names. This attribute can be used to override the default behavior, =
and
request a specific string name be used instead.</p>
</section>
<section id=3D"abi-tag">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id553" role=3D"doc-backlink">abi_tag</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#abi-tag" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id131">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
31" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">abi_tag</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::abi_tag</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">abi=
_tag</span></code> attribute can be applied to a function, variable, class =
or
inline namespace declaration to modify the mangled name of the entity. It g=
ives
the ability to distinguish between different versions of the same entity bu=
t
with different ABI versions supported. For example, a newer version of a cl=
ass
could have a different set of data members and thus have a different size. =
Using
the <code class=3D"docutils literal notranslate"><span class=3D"pre">abi_ta=
g</span></code> attribute, it is possible to have different mangled names f=
or
a global variable of the class type. Therefore, the old code could keep usi=
ng
the old mangled name and the new code will use the new mangled name with ta=
gs.</p>
</section>
<section id=3D"acquire-capability-acquire-shared-capability">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id554" role=3D"doc-backlink">acquire_capability, acquire_shar=
ed_capability</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/doc=
s/AttributeReference.html#acquire-capability-acquire-shared-capability" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id132">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
32" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">acquire_capability</span></code> <br> <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">acquire_shared_capability</=
span></code> <br> <code class=3D"docutils literal notranslate"><span class=
=3D"pre">exclusive_lock_function</span></code> <br> <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">shared_lock_function</span></code=
></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::acquire_capability</span></code> <br> <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">clang::acquire_shared_capability</span></co=
de></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Marks a function as acquiring a capability.</p>
</section>
<section id=3D"alloc-align">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id555" role=3D"doc-backlink">alloc_align</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#alloc-al=
ign" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id133">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
33" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">alloc_align</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::alloc_align</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::alloc_align</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((alloc_align(&lt;alignment&gt;))</span></code> on a function
declaration to specify that the return value of the function (which must be=
 a
pointer type) is at least as aligned as the value of the indicated paramete=
r. The
parameter is given by its index in the list of formal parameters; the first
parameter has index 1 unless the function is a C++ non-static member functi=
on,
in which case the first parameter has index 2 to account for the implicit <=
code class=3D"docutils literal notranslate"><span class=3D"pre">this</span>=
</code>
parameter.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// The returned pointer has the alignment speci=
fied by the first parameter.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"nf">a</span><span class=3D"p">(</span><span class=3D"=
kt">size_t</span><span class=3D"w"> </span><span class=3D"n">align</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attri=
bute__</span><span class=3D"p">((</span><span class=3D"n">alloc_align</span=
><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">)))=
;</span>

<span class=3D"c1">// The returned pointer has the alignment specified by t=
he second parameter.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"nf">b</span><span class=3D"p">(</span><span class=3D"=
kt">void</span><span class=3D"w"> </span><span class=3D"o">*</span><span cl=
ass=3D"n">v</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"kt">size_t</span><span class=3D"w"> </span><span class=3D"n">alig=
n</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
n">__attribute__</span><span class=3D"p">((</span><span class=3D"n">alloc_a=
lign</span><span class=3D"p">(</span><span class=3D"mi">2</span><span class=
=3D"p">)));</span>

<span class=3D"c1">// The returned pointer has the alignment specified by t=
he second visible</span>
<span class=3D"c1">// parameter, however it must be adjusted for the implic=
it 'this' parameter.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"nf">Foo::b</span><span class=3D"p">(</span><span clas=
s=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*</span><sp=
an class=3D"n">v</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"kt">size_t</span><span class=3D"w"> </span><span class=3D"n"=
>align</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"n">__attribute__</span><span class=3D"p">((</span><span class=3D"n">al=
loc_align</span><span class=3D"p">(</span><span class=3D"mi">3</span><span =
class=3D"p">)));</span>
</pre></div>
</div>
<p>Note that this attribute merely informs the compiler that a function alw=
ays
returns a sufficiently aligned pointer. It does not cause the compiler to
emit code to enforce that alignment. The behavior is undefined if the retur=
ned
pointer is not sufficiently aligned.</p>
</section>
<section id=3D"alloc-size">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id556" role=3D"doc-backlink">alloc_size</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#alloc-siz=
e" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id134">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
34" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">alloc_size</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::alloc_size</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::alloc_size</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">all=
oc_size</span></code> attribute can be placed on functions that return poin=
ters in
order to hint to the compiler how many bytes of memory will be available at=
 the
returned pointer. <code class=3D"docutils literal notranslate"><span class=
=3D"pre">alloc_size</span></code> takes one or two arguments.</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
oc_size(N)</span></code> implies that argument number N equals the number o=
f
available bytes at the returned pointer.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
oc_size(N,</span> <span class=3D"pre">M)</span></code> implies that the pro=
duct of argument number N and
argument number M equals the number of available bytes at the returned
pointer.</p></li>
</ul>
<p>Argument numbers are 1-based.</p>
<p>An example of how to use <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">alloc_size</span></code></p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"nf">my_malloc</span><span class=3D"p">(</span=
><span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">a=
</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n=
">__attribute__</span><span class=3D"p">((</span><span class=3D"n">alloc_si=
ze</span><span class=3D"p">(</span><span class=3D"mi">1</span><span class=
=3D"p">)));</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"nf">my_calloc</span><span class=3D"p">(</span><span c=
lass=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">a</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">int</=
span><span class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p">=
)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</span><sp=
an class=3D"p">((</span><span class=3D"n">alloc_size</span><span class=3D"p=
">(</span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"mi">2</span><span class=3D"p">)));</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">m=
ain</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"o">*</span><span class=3D"k">const</span><span class=
=3D"w"> </span><span class=3D"n">p</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">my_malloc</=
span><span class=3D"p">(</span><span class=3D"mi">100</span><span class=3D"=
p">);</span>
<span class=3D"w">  </span><span class=3D"n">assert</span><span class=3D"p"=
>(</span><span class=3D"n">__builtin_object_size</span><span class=3D"p">(<=
/span><span class=3D"n">p</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"mi">0</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">=3D=3D</span><span class=3D"w"> </span><sp=
an class=3D"mi">100</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"o">*</span><span class=3D"k">const</span><span class=
=3D"w"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">my_calloc</=
span><span class=3D"p">(</span><span class=3D"mi">20</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"mi">5</span><span class=
=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">assert</span><span class=3D"p"=
>(</span><span class=3D"n">__builtin_object_size</span><span class=3D"p">(<=
/span><span class=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"mi">0</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">=3D=3D</span><span class=3D"w"> </span><sp=
an class=3D"mi">100</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>This attribute works differently in clang than it does in GCC.
Specifically, clang will only trace <code class=3D"docutils literal notrans=
late"><span class=3D"pre">const</span></code> pointers (as above); we give =
up
on pointers that are not marked as <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">const</span></code>. In the vast majority of cases=
,
this is unimportant, because LLVM has support for the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">alloc_size</span></code>
attribute. However, this may cause mildly unintuitive behavior when used wi=
th
other attributes, such as <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">enable_if</span></code>.</p>
</div>
</section>
<section id=3D"allocator">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id557" role=3D"doc-backlink">allocator</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#allocator"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id135">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
35" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
ocator</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
eclspec(allocator)</span></code> attribute is applied to functions that all=
ocate
memory, such as operator new in C++. When CodeView debug information is emi=
tted
(enabled by <code class=3D"docutils literal notranslate"><span class=3D"pre=
">clang</span> <span class=3D"pre">-gcodeview</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">clang-cl</span> <span=
 class=3D"pre">/Z7</span></code>), Clang will attempt to
record the code offset of heap allocation call sites in the debug info. It =
will
also record the type being allocated using some local heuristics. The Visua=
l
Studio debugger uses this information to <a class=3D"reference external" hr=
ef=3D"https://docs.microsoft.com/en-us/visualstudio/profiling/memory-usage"=
>profile memory usage</a>.</p>
<p>This attribute does not affect optimizations in any way, unlike GCC=E2=
=80=99s
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((malloc))</span></code>.</p>
</section>
<section id=3D"always-inline-force-inline">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id558" role=3D"doc-backlink">always_inline, __force_inline</a=
><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefer=
ence.html#always-inline-force-inline" title=3D"Link to this heading">=C2=B6=
</a></h3>
<table class=3D"docutils align-default" id=3D"id136">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
36" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">always_inline</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::always_inline</span></code> <br> <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">clang::always_inline</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::always_inline</span></code> <br> <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">clang::always_inline</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__f=
orceinline</span></code></p></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Inlining heuristics are disabled and inlining is always attempted regard=
less of
optimization level.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang=
::always_inline]]</span></code> spelling can be used as a statement attribu=
te; other
spellings of the attribute are not supported on statements. If a statement =
is
marked <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::always_inline]]</span></code> and contains calls, the compiler attemp=
ts
to inline those calls.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">example</span><span class=3D"p">(</span><span class=3D"kt">void</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{<=
/span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">always_inline</span><=
span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"n">foo</=
span><span class=3D"p">();</span><span class=3D"w"> </span><span class=3D"c=
1">// attempts to inline foo</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">always_inline</span><=
span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"n">i</sp=
an><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w">=
 </span><span class=3D"n">bar</span><span class=3D"p">();</span><span class=
=3D"w"> </span><span class=3D"c1">// attempts to inline bar</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">always_inline</span><=
span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"k">retur=
n</span><span class=3D"w"> </span><span class=3D"n">f</span><span class=3D"=
p">(</span><span class=3D"mi">42</span><span class=3D"p">,</span><span clas=
s=3D"w"> </span><span class=3D"n">baz</span><span class=3D"p">(</span><span=
 class=3D"n">bar</span><span class=3D"p">()));</span><span class=3D"w"> </s=
pan><span class=3D"c1">// attempts to inline everything</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>A declaration statement, which is a statement, is not a statement that c=
an have an
attribute associated with it (the attribute applies to the declaration, not=
 the
statement in that case). So this use case will not work:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">example</span><span class=3D"p">(</span><span class=3D"kt">void</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{<=
/span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">always_inline</span><=
span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"kt">int<=
/span><span class=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">bar</span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This attribute does not guarantee that inline substitution actually occu=
rs.</p>
<p>&lt;ins&gt;Note: applying this attribute to a coroutine at the <cite>-O0=
</cite> optimization level
has no effect; other optimization levels may only partially inline and resu=
lt in a
diagnostic.&lt;/ins&gt;</p>
<p>See also <a class=3D"reference external" href=3D"https://docs.microsoft.=
com/en-us/cpp/cpp/inline-functions-cpp">the Microsoft Docs on Inline Functi=
ons</a>, <a class=3D"reference external" href=3D"https://gcc.gnu.org/online=
docs/gcc/Common-Function-Attributes.html">the GCC Common Function
Attribute docs</a>, and <a class=3D"reference external" href=3D"https://gcc=
.gnu.org/onlinedocs/gcc/Inline.html">the GCC Inline docs</a>.</p>
</section>
<section id=3D"artificial">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id559" role=3D"doc-backlink">artificial</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#artificia=
l" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id137">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
37" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">artificial</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::artificial</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::artificial</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">art=
ificial</span></code> attribute can be applied to an inline function. If su=
ch a
function is inlined, the attribute indicates that debuggers should associat=
e
the resulting instructions with the call site, rather than with the
corresponding line within the inlined callee.</p>
</section>
<section id=3D"assert-capability-assert-shared-capability">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id560" role=3D"doc-backlink">assert_capability, assert_shared=
_capability</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/=
AttributeReference.html#assert-capability-assert-shared-capability" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id138">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
38" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">assert_capability</span></code> <br> <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">assert_shared_capability</sp=
an></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::assert_capability</span></code> <br> <code class=3D"docutils literal no=
translate"><span class=3D"pre">clang::assert_shared_capability</span></code=
></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Marks a function that dynamically tests whether a capability is held, an=
d halts
the program if it is not held.</p>
</section>
<section id=3D"assume">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id561" role=3D"doc-backlink">assume</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#assume" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id139">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
39" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">omp=
::assume</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">[[omp::assume("assumption")]]</span></code> attribute to
provide additional information to the optimizer. The string-literal, here
=E2=80=9Cassumption=E2=80=9D, will be attached to the function declaration =
such that later
analysis and optimization passes can assume the =E2=80=9Cassumption=E2=80=
=9D to hold.
This is similar to <a class=3D"reference internal" href=3D"https://clang.ll=
vm.org/docs/LanguageExtensions.html#langext-builtin-assume"><span class=3D"=
std std-ref">__builtin_assume</span></a> but
instead of an expression that can be assumed to be non-zero, the assumption=
 is
expressed as a string and it holds for the entire function.</p>
<p>A function can have multiple assume attributes and they propagate from p=
rior
declarations to later definitions. Multiple assumptions are aggregated into=
 a
single comma separated string. Thus, one can provide multiple assumptions v=
ia
a comma separated string, i.a.,
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[omp::ass=
ume("assumption1,assumption2")]]</span></code>.</p>
<p>While LLVM plugins might provide more assumption strings, the default LL=
VM
optimization passes are aware of the following assumptions:</p>
<blockquote>
<div><div class=3D"highlight-none notranslate"><div class=3D"highlight"><pr=
e><span></span>"omp_no_openmp"
"omp_no_openmp_routines"
"omp_no_parallelism"
</pre></div>
</div>
</div></blockquote>
<p>The OpenMP standard defines the meaning of OpenMP assumptions (=E2=80=9C=
omp_XYZ=E2=80=9D is
spelled =E2=80=9CXYZ=E2=80=9D in the <a class=3D"reference external" href=
=3D"https://www.openmp.org/spec-html/5.1/openmpsu37.html#x56-560002.5.2">Op=
enMP 5.1 Standard</a>).</p>
</section>
<section id=3D"assume-aligned">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id562" role=3D"doc-backlink">assume_aligned</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#assum=
e-aligned" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id140">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
40" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">assume_aligned</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::assume_aligned</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::assume_aligned</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((assume_aligned(&lt;alignment&gt;[,&lt;offset&gt;]))</span></cod=
e> on a function
declaration to specify that the return value of the function (which must be=
 a
pointer type) has the specified offset, in bytes, from an address with the
specified alignment. The offset is taken to be zero if omitted.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// The returned pointer value has 32-byte align=
ment.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"nf">a</span><span class=3D"p">()</span><span class=3D=
"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</spa=
n><span class=3D"n">assume_aligned</span><span class=3D"w"> </span><span cl=
ass=3D"p">(</span><span class=3D"mi">32</span><span class=3D"p">)));</span>

<span class=3D"c1">// The returned pointer value is 4 bytes greater than an=
 address having</span>
<span class=3D"c1">// 32-byte alignment.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"nf">b</span><span class=3D"p">()</span><span class=3D=
"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</spa=
n><span class=3D"n">assume_aligned</span><span class=3D"w"> </span><span cl=
ass=3D"p">(</span><span class=3D"mi">32</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"mi">4</span><span class=3D"p">)));</s=
pan>
</pre></div>
</div>
<p>Note that this attribute provides information to the compiler regarding =
a
condition that the code already ensures is true. It does not cause the comp=
iler
to enforce the provided alignment assumption.</p>
</section>
<section id=3D"availability">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id563" role=3D"doc-backlink">availability</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#availab=
ility" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id141">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
41" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">availability</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::availability</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::availability</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ava=
ilability</span></code> attribute can be placed on declarations to describe=
 the
lifecycle of that declaration relative to operating system versions. Consid=
er
the function declaration for a hypothetical function <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">f</span></code>:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">f</span><span class=3D"p">(</span><span class=3D"kt">void</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attri=
bute__</span><span class=3D"p">((</span><span class=3D"n">availability</spa=
n><span class=3D"p">(</span><span class=3D"n">macos</span><span class=3D"p"=
>,</span><span class=3D"n">introduced</span><span class=3D"o">=3D</span><sp=
an class=3D"mf">10.4</span><span class=3D"p">,</span><span class=3D"n">depr=
ecated</span><span class=3D"o">=3D</span><span class=3D"mf">10.6</span><spa=
n class=3D"p">,</span><span class=3D"n">obsoleted</span><span class=3D"o">=
=3D</span><span class=3D"mf">10.7</span><span class=3D"p">)));</span>
</pre></div>
</div>
<p>The availability attribute states that <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">f</span></code> was introduced in macOS 10.=
4,
deprecated in macOS 10.6, and obsoleted in macOS 10.7. This information
is used by Clang to determine when it is safe to use <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">f</span></code>: for example, if
Clang is instructed to compile code for macOS 10.5, a call to <code class=
=3D"docutils literal notranslate"><span class=3D"pre">f()</span></code>
succeeds. If Clang is instructed to compile code for macOS 10.6, the call
succeeds but Clang emits a warning specifying that the function is deprecat=
ed.
Finally, if Clang is instructed to compile code for macOS 10.7, the call
fails because <code class=3D"docutils literal notranslate"><span class=3D"p=
re">f()</span></code> is no longer available.</p>
<p>Clang is instructed to compile code for a minimum deployment version usi=
ng
the <code class=3D"docutils literal notranslate"><span class=3D"pre">-targe=
t</span></code> or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-mtargetos</span></code> command line arguments. For example,
macOS 10.7 would be specified as <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-target</span> <span class=3D"pre">x86_64-apple-maco=
s10.7</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">-mtargetos=
=3Dmacos10.7</span></code>. Variants like Mac Catalyst are specified as
<code class=3D"docutils literal notranslate"><span class=3D"pre">-target</s=
pan> <span class=3D"pre">arm64-apple-ios15.0-macabi</span></code> or <code =
class=3D"docutils literal notranslate"><span class=3D"pre">-mtargetos=3Dios=
15.0-macabi</span></code></p>
<p>The availability attribute is a comma-separated list starting with the
platform name and then including clauses specifying important milestones in=
 the
declaration=E2=80=99s lifetime (in any order) along with additional informa=
tion. Those
clauses can be:</p>
<dl class=3D"simple">
<dt>introduced=3D<em>version</em></dt><dd><p>The first version in which thi=
s declaration was introduced.</p>
</dd>
<dt>deprecated=3D<em>version</em></dt><dd><p>The first version in which thi=
s declaration was deprecated, meaning that
users should migrate away from this API.</p>
</dd>
<dt>obsoleted=3D<em>version</em></dt><dd><p>The first version in which this=
 declaration was obsoleted, meaning that it
was removed completely and can no longer be used.</p>
</dd>
<dt>unavailable</dt><dd><p>This declaration is never available on this plat=
form.</p>
</dd>
<dt>message=3D<em>string-literal</em></dt><dd><p>Additional message text th=
at Clang will provide when emitting a warning or
error about use of a deprecated or obsoleted declaration. Useful to direct
users to replacement APIs.</p>
</dd>
<dt>replacement=3D<em>string-literal</em></dt><dd><p>Additional message tex=
t that Clang will use to provide Fix-It when emitting
a warning about use of a deprecated declaration. The Fix-It will replace
the deprecated declaration with the new declaration specified.</p>
</dd>
<dt>environment=3D<em>identifier</em></dt><dd><p>Target environment in whic=
h this declaration is available. If present,
the availability attribute applies only to targets with the same platform
and environment. The parameter is currently supported only in HLSL.</p>
</dd>
</dl>
<p>Multiple availability attributes can be placed on a declaration, which m=
ay
correspond to different platforms. For most platforms, the availability
attribute with the platform corresponding to the target platform will be us=
ed;
any others will be ignored. However, the availability for <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">watchOS</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">tvOS</span=
></code> can be implicitly inferred from an <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">iOS</span></code> availability attribute.
Any explicit availability attributes for those platforms are still preferre=
d over
the implicitly inferred availability attributes. If no availability attribu=
te
specifies availability for the current target platform, the availability
attributes are ignored. Supported platforms are:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">iOS</sp=
an></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">macOS</spa=
n></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">tvOS</span=
></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">watchOS</s=
pan></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">iOSApplica=
tionExtension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">macOSAppli=
cationExtension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">tvOSApplic=
ationExtension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">watchOSApp=
licationExtension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">macCatalys=
t</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">macCatalys=
tApplicationExtension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">visionOS</=
span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">visionOSAp=
plicationExtension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">driverkit<=
/span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">swift</spa=
n></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">android</s=
pan></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">fuchsia</s=
pan></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">ohos</span=
></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">zos</span>=
</code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">ShaderMode=
l</span></code></p>
<p>Some platforms have alias names:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">ios</sp=
an></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">macos</spa=
n></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">macosx</sp=
an> <span class=3D"pre">(deprecated)</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">tvos</span=
></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">watchos</s=
pan></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">ios_app_ex=
tension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">macos_app_=
extension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">macosx_app=
_extension</span> <span class=3D"pre">(deprecated)</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">tvos_app_e=
xtension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">watchos_ap=
p_extension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">maccatalys=
t</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">maccatalys=
t_app_extension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">visionos</=
span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">visionos_a=
pp_extension</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">shadermode=
l</span></code></p>
<p>Supported environment names for the ShaderModel platform:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">pixel</=
span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">vertex</sp=
an></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">geometry</=
span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">hull</span=
></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">domain</sp=
an></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">compute</s=
pan></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">raygenerat=
ion</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">intersecti=
on</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">anyhit</sp=
an></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">closesthit=
</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">miss</span=
></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">callable</=
span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">mesh</span=
></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">amplificat=
ion</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">library</s=
pan></code></p>
<p>A declaration can typically be used even when deploying back to a platfo=
rm
version prior to when the declaration was introduced. When this happens, th=
e
declaration is <a class=3D"reference external" href=3D"https://developer.ap=
ple.com/library/mac/#documentation/MacOSX/Conceptual/BPFrameworks/Concepts/=
WeakLinking.html">weakly linked</a>,
as if the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
weak_import</span></code> attribute were added to the declaration. A
weakly-linked declaration may or may not be present a run-time, and a progr=
am
can determine whether the declaration is present by checking whether the
address of that declaration is non-NULL.</p>
<p>The flag <code class=3D"docutils literal notranslate"><span class=3D"pre=
">strict</span></code> disallows using API when deploying back to a
platform version prior to when the declaration was introduced. An
attempt to use such API before its introduction causes a hard error.
Weakly-linking is almost always a better API choice, since it allows
users to query availability at runtime.</p>
<p>If there are multiple declarations of the same entity, the availability
attributes must either match on a per-platform basis or later
declarations must not have availability attributes for that
platform. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">g</span><span class=3D"p">(</span><span class=3D"kt">void</span><sp=
an class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attrib=
ute__</span><span class=3D"p">((</span><span class=3D"n">availability</span=
><span class=3D"p">(</span><span class=3D"n">macos</span><span class=3D"p">=
,</span><span class=3D"n">introduced</span><span class=3D"o">=3D</span><spa=
n class=3D"mf">10.4</span><span class=3D"p">)));</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
g</span><span class=3D"p">(</span><span class=3D"kt">void</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">availability</span><span c=
lass=3D"p">(</span><span class=3D"n">macos</span><span class=3D"p">,</span>=
<span class=3D"n">introduced</span><span class=3D"o">=3D</span><span class=
=3D"mf">10.4</span><span class=3D"p">)));</span><span class=3D"w"> </span><=
span class=3D"c1">// okay, matches</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
g</span><span class=3D"p">(</span><span class=3D"kt">void</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">availability</span><span c=
lass=3D"p">(</span><span class=3D"n">ios</span><span class=3D"p">,</span><s=
pan class=3D"n">introduced</span><span class=3D"o">=3D</span><span class=3D=
"mf">4.0</span><span class=3D"p">)));</span><span class=3D"w"> </span><span=
 class=3D"c1">// okay, adds a new platform</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
g</span><span class=3D"p">(</span><span class=3D"kt">void</span><span class=
=3D"p">);</span><span class=3D"w"> </span><span class=3D"c1">// okay, inher=
its both macos and ios availability from above.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
g</span><span class=3D"p">(</span><span class=3D"kt">void</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">availability</span><span c=
lass=3D"p">(</span><span class=3D"n">macos</span><span class=3D"p">,</span>=
<span class=3D"n">introduced</span><span class=3D"o">=3D</span><span class=
=3D"mf">10.5</span><span class=3D"p">)));</span><span class=3D"w"> </span><=
span class=3D"c1">// error: mismatch</span>
</pre></div>
</div>
<p>When one method overrides another, the overriding method can be more wid=
ely available than the overridden method, e.g.,:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"k">@interface</span> <span class=3D"nc">A</span>
<span class=3D"p">-</span> <span class=3D"p">(</span><span class=3D"kt">id<=
/span><span class=3D"p">)</span><span class=3D"nf">method</span><span class=
=3D"w"> </span><span class=3D"bp">__attribute__</span><span class=3D"p">((<=
/span><span class=3D"n">availability</span><span class=3D"p">(</span><span =
class=3D"n">macos</span><span class=3D"p">,</span><span class=3D"n">introdu=
ced</span><span class=3D"o">=3D</span><span class=3D"mf">10.4</span><span c=
lass=3D"p">)));</span>
<span class=3D"p">-</span> <span class=3D"p">(</span><span class=3D"kt">id<=
/span><span class=3D"p">)</span><span class=3D"nf">method2</span><span clas=
s=3D"w"> </span><span class=3D"bp">__attribute__</span><span class=3D"p">((=
</span><span class=3D"n">availability</span><span class=3D"p">(</span><span=
 class=3D"n">macos</span><span class=3D"p">,</span><span class=3D"n">introd=
uced</span><span class=3D"o">=3D</span><span class=3D"mf">10.4</span><span =
class=3D"p">)));</span>
<span class=3D"k">@end</span>

<span class=3D"k">@interface</span> <span class=3D"nc">B</span> : <span cla=
ss=3D"nc">A</span>
<span class=3D"p">-</span> <span class=3D"p">(</span><span class=3D"kt">id<=
/span><span class=3D"p">)</span><span class=3D"nf">method</span><span class=
=3D"w"> </span><span class=3D"bp">__attribute__</span><span class=3D"p">((<=
/span><span class=3D"n">availability</span><span class=3D"p">(</span><span =
class=3D"n">macos</span><span class=3D"p">,</span><span class=3D"n">introdu=
ced</span><span class=3D"o">=3D</span><span class=3D"mf">10.3</span><span c=
lass=3D"p">)));</span><span class=3D"w"> </span><span class=3D"c1">// okay:=
 method moved into base class later</span>
<span class=3D"p">-</span> <span class=3D"p">(</span><span class=3D"kt">id<=
/span><span class=3D"p">)</span><span class=3D"nf">method</span><span class=
=3D"w"> </span><span class=3D"bp">__attribute__</span><span class=3D"p">((<=
/span><span class=3D"n">availability</span><span class=3D"p">(</span><span =
class=3D"n">macos</span><span class=3D"p">,</span><span class=3D"n">introdu=
ced</span><span class=3D"o">=3D</span><span class=3D"mf">10.5</span><span c=
lass=3D"p">)));</span><span class=3D"w"> </span><span class=3D"c1">// error=
: this method was available via the base class in 10.4</span>
<span class=3D"k">@end</span>
</pre></div>
</div>
<p>Starting with the macOS 10.12 SDK, the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">API_AVAILABLE</span></code> macro from
<code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;os/ava=
ilability.h&gt;</span></code> can simplify the spelling:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"k">@interface</span> <span class=3D"nc">A</span>
<span class=3D"p">-</span> <span class=3D"p">(</span><span class=3D"kt">id<=
/span><span class=3D"p">)</span><span class=3D"nf">method</span><span class=
=3D"w"> </span><span class=3D"n">API_AVAILABLE</span><span class=3D"p">(</s=
pan><span class=3D"n">macos</span><span class=3D"p">(</span><span class=3D"=
mf">10.11</span><span class=3D"p">)));</span>
<span class=3D"p">-</span> <span class=3D"p">(</span><span class=3D"kt">id<=
/span><span class=3D"p">)</span><span class=3D"nf">otherMethod</span><span =
class=3D"w"> </span><span class=3D"n">API_AVAILABLE</span><span class=3D"p"=
>(</span><span class=3D"n">macos</span><span class=3D"p">(</span><span clas=
s=3D"mf">10.11</span><span class=3D"p">),</span><span class=3D"w"> </span><=
span class=3D"n">ios</span><span class=3D"p">(</span><span class=3D"mf">11.=
0</span><span class=3D"p">));</span>
<span class=3D"k">@end</span>
</pre></div>
</div>
<p>Availability attributes can also be applied using a <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">#pragma</span> <span class=3D"=
pre">clang</span> <span class=3D"pre">attribute</span></code>.
Any explicit availability attribute whose platform corresponds to the targe=
t
platform is applied to a declaration regardless of the availability attribu=
tes
specified in the pragma. For example, in the code below,
<code class=3D"docutils literal notranslate"><span class=3D"pre">hasExplici=
tAvailabilityAttribute</span></code> will use the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">macOS</span></code> availability
attribute that is specified with the declaration, whereas
<code class=3D"docutils literal notranslate"><span class=3D"pre">getsThePra=
gmaAvailabilityAttribute</span></code> will use the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">macOS</span></code> availability
attribute that is applied by the pragma.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#pragma clang attribute push (__attribute__((avai=
lability(macOS, introduced=3D10.12))), apply_to=3Dfunction)</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
getsThePragmaAvailabilityAttribute</span><span class=3D"p">(</span><span cl=
ass=3D"kt">void</span><span class=3D"p">);</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
hasExplicitAvailabilityAttribute</span><span class=3D"p">(</span><span clas=
s=3D"kt">void</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"n">__attribute__</span><span class=3D"p">((</span><span class=
=3D"n">availability</span><span class=3D"p">(</span><span class=3D"n">macos=
</span><span class=3D"p">,</span><span class=3D"n">introduced</span><span c=
lass=3D"o">=3D</span><span class=3D"mf">10.4</span><span class=3D"p">)));</=
span>
<span class=3D"cp">#pragma clang attribute pop</span>
</pre></div>
</div>
<p>For platforms like <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">watchOS</span></code> and <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">tvOS</span></code>, whose availability attribut=
es can
be implicitly inferred from an <code class=3D"docutils literal notranslate"=
><span class=3D"pre">iOS</span></code> availability attribute, the logic is
slightly more complex. The explicit and the pragma-applied availability
attributes whose platform corresponds to the target platform are applied as
described in the previous paragraph. However, the implicitly inferred attri=
butes
are applied to a declaration only when there is no explicit or pragma-appli=
ed
availability attribute whose platform corresponds to the target platform. F=
or
example, the function below will receive the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">tvOS</span></code> availability from the
pragma rather than using the inferred <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">iOS</span></code> availability from the declara=
tion:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#pragma clang attribute push (__attribute__((avai=
lability(tvOS, introduced=3D12.0))), apply_to=3Dfunction)</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
getsThePragmaTVOSAvailabilityAttribute</span><span class=3D"p">(</span><spa=
n class=3D"kt">void</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"n">__attribute__</span><span class=3D"p">((</span><span c=
lass=3D"n">availability</span><span class=3D"p">(</span><span class=3D"n">i=
OS</span><span class=3D"p">,</span><span class=3D"n">introduced</span><span=
 class=3D"o">=3D</span><span class=3D"mf">11.0</span><span class=3D"p">)));=
</span>
<span class=3D"cp">#pragma clang attribute pop</span>
</pre></div>
</div>
<p>The compiler is also able to apply implicitly inferred attributes from a=
 pragma
as well. For example, when targeting <code class=3D"docutils literal notran=
slate"><span class=3D"pre">tvOS</span></code>, the function below will rece=
ive
a <code class=3D"docutils literal notranslate"><span class=3D"pre">tvOS</sp=
an></code> availability attribute that is implicitly inferred from the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">iOS</span></co=
de>
availability attribute applied by the pragma:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#pragma clang attribute push (__attribute__((avai=
lability(iOS, introduced=3D12.0))), apply_to=3Dfunction)</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
infersTVOSAvailabilityFromPragma</span><span class=3D"p">(</span><span clas=
s=3D"kt">void</span><span class=3D"p">);</span>
<span class=3D"cp">#pragma clang attribute pop</span>
</pre></div>
</div>
<p>The implicit attributes that are inferred from explicitly specified attr=
ibutes
whose platform corresponds to the target platform are applied to the declar=
ation
even if there is an availability attribute that can be inferred from a prag=
ma.
For example, the function below will receive the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">tvOS,</span> <span class=3D"pre">int=
roduced=3D11.0</span></code>
availability that is inferred from the attribute on the declaration rather =
than
inferring availability from the pragma:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#pragma clang attribute push (__attribute__((avai=
lability(iOS, unavailable))), apply_to=3Dfunction)</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
infersTVOSAvailabilityFromAttributeNextToDeclaration</span><span class=3D"p=
">(</span><span class=3D"kt">void</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">availability</span><span class=3D"p">(</=
span><span class=3D"n">iOS</span><span class=3D"p">,</span><span class=3D"n=
">introduced</span><span class=3D"o">=3D</span><span class=3D"mf">11.0</spa=
n><span class=3D"p">)));</span>
<span class=3D"cp">#pragma clang attribute pop</span>
</pre></div>
</div>
<p>Also see the documentation for <a class=3D"reference external" href=3D"h=
ttp://clang.llvm.org/docs/LanguageExtensions.html#objective-c-available">@a=
vailable</a></p>
</section>
<section id=3D"btf-decl-tag">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id564" role=3D"doc-backlink">btf_decl_tag</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#btf-dec=
l-tag" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id142">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
42" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">btf_decl_tag</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::btf_decl_tag</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::btf_decl_tag</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((btf_decl_tag("ARGUMENT")))</span></code> attribu=
te for
all targets. This attribute may be attached to a struct/union, struct/union
field, function, function parameter, variable or typedef declaration. If -g=
 is
specified, the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">ARGUMENT</span></code> info will be preserved in IR and be emitted to
dwarf. For BPF targets, the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">ARGUMENT</span></code> info will be emitted to .BTF ELF
section too.</p>
</section>
<section id=3D"callback">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id565" role=3D"doc-backlink">callback</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#callback" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id143">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
43" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">callback</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::callback</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::callback</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cal=
lback</span></code> attribute specifies that the annotated function may inv=
oke the
specified callback zero or more times. The callback, as well as the passed
arguments, are identified by their parameter name or position (starting wit=
h
1!) in the annotated function. The first position in the attribute identifi=
es
the callback callee, the following positions declare describe its arguments=
.
The callback callee is required to be callable with the number, and order, =
of
the specified arguments. The index <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">0</span></code>, or the identifier <code class=3D"=
docutils literal notranslate"><span class=3D"pre">this</span></code>, is us=
ed to
represent an implicit =E2=80=9Cthis=E2=80=9D pointer in class methods. If t=
here is no implicit
=E2=80=9Cthis=E2=80=9D pointer it shall not be referenced. The index =E2=80=
=98-1=E2=80=99, or the name =E2=80=9C__=E2=80=9D,
represents an unknown callback callee argument. This can be a value which i=
s
not present in the declared parameter list, or one that is, but is potentia=
lly
inspected, captured, or modified. Parameter names and indices can be mixed =
in
the callback attribute.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cal=
lback</span></code> attribute, which is directly translated to <code class=
=3D"docutils literal notranslate"><span class=3D"pre">callback</span></code=
>
metadata &lt;<a class=3D"reference external" href=3D"http://llvm.org/docs/L=
angRef.html#callback-metadata">http://llvm.org/docs/LangRef.html#callback-m=
etadata</a>&gt;, make the
connection between the call to the annotated function and the callback call=
ee.
This can enable interprocedural optimizations which were otherwise impossib=
le.
If a function parameter is mentioned in the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">callback</span></code> attribute, through=
 its
position, it is undefined if that parameter is used for anything other than=
 the
actual callback. Inspected, captured, or modified parameters shall not be
listed in the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">callback</span></code> metadata.</p>
<p>Example encodings for the callback performed by <code class=3D"docutils =
literal notranslate"><span class=3D"pre">pthread_create</span></code> are s=
hown
below. The explicit attribute annotation indicates that the third parameter
(<code class=3D"docutils literal notranslate"><span class=3D"pre">start_rou=
tine</span></code>) is called zero or more times by the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">pthread_create</span></code> =
function,
and that the fourth parameter (<code class=3D"docutils literal notranslate"=
><span class=3D"pre">arg</span></code>) is passed along. Note that the call=
back
behavior of <code class=3D"docutils literal notranslate"><span class=3D"pre=
">pthread_create</span></code> is automatically recognized by Clang. In add=
ition,
the declarations of <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">__kmpc_fork_teams</span></code> and <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">__kmpc_fork_call</span></code>, generat=
ed for
<code class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</s=
pan> <span class=3D"pre">omp</span> <span class=3D"pre">target</span> <span=
 class=3D"pre">teams</span></code> and <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">#pragma</span> <span class=3D"pre">omp</span> =
<span class=3D"pre">parallel</span></code>, respectively, are also
automatically recognized as broker functions. Further functions might be ad=
ded
in the future.</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">__attribute__</span><span class=3D"p">((</spa=
n><span class=3D"n">callback</span><span class=3D"w"> </span><span class=3D=
"p">(</span><span class=3D"n">start_routine</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"n">arg</span><span class=3D"p">))=
)</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">pt=
hread_create</span><span class=3D"p">(</span><span class=3D"n">pthread_t</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"kr">=
thread</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"k">const</span><span class=3D"w"> </span><span class=3D"n">pthread_att=
r_t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">attr</span><span class=3D"p">,</span>
<span class=3D"w">                   </span><span class=3D"kt">void</span><=
span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">(</spa=
n><span class=3D"o">*</span><span class=3D"n">start_routine</span><span cla=
ss=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">(</span><span =
class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*</span=
><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D"kt">vo=
id</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D=
"n">arg</span><span class=3D"p">);</span>

<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">callback</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"mi">3</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"mi">4</span><span class=3D"p">)))</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">pt=
hread_create</span><span class=3D"p">(</span><span class=3D"n">pthread_t</s=
pan><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"kr">=
thread</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"k">const</span><span class=3D"w"> </span><span class=3D"n">pthread_att=
r_t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">attr</span><span class=3D"p">,</span>
<span class=3D"w">                   </span><span class=3D"kt">void</span><=
span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">(</spa=
n><span class=3D"o">*</span><span class=3D"n">start_routine</span><span cla=
ss=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">(</span><span =
class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*</span=
><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D"kt">vo=
id</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D=
"n">arg</span><span class=3D"p">);</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"carries-dependency">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id566" role=3D"doc-backlink">carries_dependency</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#carries-dependency" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id144">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
44" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">carries_dependency</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">car=
ries_dependency</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">car=
ries_dependency</span></code> attribute specifies dependency propagation in=
to and
out of functions.</p>
<p>When specified on a function or Objective-C method, the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">carries_dependency</span><=
/code>
attribute means that the return value carries a dependency out of the funct=
ion,
so that the implementation need not constrain ordering upon return from tha=
t
function. Implementations of the function and its caller may choose to pres=
erve
dependencies instead of emitting memory ordering instructions such as fence=
s.</p>
<p>Note, this attribute does not change the meaning of the program, but may=
 result
in generation of more efficient code.</p>
</section>
<section id=3D"cf-consumed">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id567" role=3D"doc-backlink">cf_consumed</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#cf-consu=
med" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id145">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
45" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cf_consumed</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_consumed</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_consumed</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"cf-returns-not-retained">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id568" role=3D"doc-backlink">cf_returns_not_retained</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#cf-returns-not-retained" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id146">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
46" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cf_returns_not_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_returns_not_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_returns_not_retained</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"cf-returns-retained">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id569" role=3D"doc-backlink">cf_returns_retained</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#cf-returns-retained" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id147">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
47" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cf_returns_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_returns_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_returns_retained</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"cfi-canonical-jump-table">
<span id=3D"langext-cfi-canonical-jump-table"></span><h3><a class=3D"toc-ba=
ckref" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id570" r=
ole=3D"doc-backlink">cfi_canonical_jump_table</a><a class=3D"headerlink" hr=
ef=3D"https://clang.llvm.org/docs/AttributeReference.html#cfi-canonical-jum=
p-table" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id148">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
48" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cfi_canonical_jump_table</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cfi_canonical_jump_table</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cfi_canonical_jump_table</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((cfi_canonical_jump_table))</span></code> on a function declarat=
ion to
make the function=E2=80=99s CFI jump table canonical. See <a class=3D"refer=
ence internal" href=3D"https://clang.llvm.org/docs/ControlFlowIntegrity.htm=
l#cfi-canonical-jump-tables"><span class=3D"std std-ref">the CFI documentat=
ion</span></a> for more details.</p>
</section>
<section id=3D"clang-builtin-alias-clang-builtin-alias">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id571" role=3D"doc-backlink">clang::builtin_alias, clang_buil=
tin_alias</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/At=
tributeReference.html#clang-builtin-alias-clang-builtin-alias" title=3D"Lin=
k to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id149">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
49" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">clang_builtin_alias</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::builtin_alias</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::builtin_alias</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute is used in the implementation of the C intrinsics.
It allows the C intrinsic functions to be declared using the names defined
in target builtins, and still be recognized as clang builtins equivalent to=
 the
underlying name. For example, <code class=3D"docutils literal notranslate">=
<span class=3D"pre">riscv_vector.h</span></code> declares the function <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">vadd</span></c=
ode>
with <code class=3D"docutils literal notranslate"><span class=3D"pre">__att=
ribute__((clang_builtin_alias(__builtin_rvv_vadd_vv_i8m1)))</span></code>.
This ensures that both functions are recognized as that clang builtin,
and in the latter case, the choice of which builtin to identify the
function as can be deferred until after overload resolution.</p>
<p>This attribute can only be used to set up the aliases for certain ARM/RI=
SC-V
C intrinsic functions; it is intended for use only inside <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">arm_*.h</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">riscv_*.h<=
/span></code> and is not a general mechanism for declaring arbitrary aliase=
s
for clang builtin functions.</p>
</section>
<section id=3D"clang-arm-builtin-alias">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id572" role=3D"doc-backlink">clang_arm_builtin_alias</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#clang-arm-builtin-alias" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id150">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
50" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">__clang_arm_builtin_alias</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::__clang_arm_builtin_alias</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::__clang_arm_builtin_alias</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute is used in the implementation of the ACLE intrinsics.
It allows the intrinsic functions to
be declared using the names defined in ACLE, and still be recognized
as clang builtins equivalent to the underlying name. For example,
<code class=3D"docutils literal notranslate"><span class=3D"pre">arm_mve.h<=
/span></code> declares the function <code class=3D"docutils literal notrans=
late"><span class=3D"pre">vaddq_u32</span></code> with
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((__clang_arm_mve_alias(__builtin_arm_mve_vaddq_u32)))</span></code>,
and similarly, one of the type-overloaded declarations of <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">vaddq</span></code>
will have the same attribute. This ensures that both functions are
recognized as that clang builtin, and in the latter case, the choice
of which builtin to identify the function as can be deferred until
after overload resolution.</p>
<p>This attribute can only be used to set up the aliases for certain Arm
intrinsic functions; it is intended for use only inside <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">arm_*.h</span></code>
and is not a general mechanism for declaring arbitrary aliases for
clang builtin functions.</p>
<p>In order to avoid duplicating the attribute definitions for similar
purpose for other architecture, there is a general form for the
attribute <cite>clang_builtin_alias</cite>.</p>
</section>
<section id=3D"clspv-libclc-builtin">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id573" role=3D"doc-backlink">clspv_libclc_builtin</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#clspv-libclc-builtin" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id151">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
51" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">clspv_libclc_builtin</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::clspv_libclc_builtin</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::clspv_libclc_builtin</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Attribute used by <a class=3D"reference external" href=3D"https://github=
.com/google/clspv">clspv</a> (OpenCL-C to Vulkan SPIR-V compiler) to identi=
fy functions coming from <a class=3D"reference external" href=3D"https://li=
bclc.llvm.org/">libclc</a> (OpenCL-C builtin library).</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">__attribute__</span><span class=3D"p">((</span><span class=3D"n">cl=
spv_libclc_builtin</span><span class=3D"p">))</span><span class=3D"w"> </sp=
an><span class=3D"n">libclc_builtin</span><span class=3D"p">()</span><span =
class=3D"w"> </span><span class=3D"p">{}</span>
</pre></div>
</div>
</section>
<section id=3D"cmse-nonsecure-entry">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id574" role=3D"doc-backlink">cmse_nonsecure_entry</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#cmse-nonsecure-entry" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id152">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
52" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cmse_nonsecure_entry</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute declares a function that can be called from non-secure st=
ate, or
from secure state. Entering from and returning to non-secure state would sw=
itch
to and from secure state, respectively, and prevent flow of information
to non-secure state, except via return values. See <a class=3D"reference ex=
ternal" href=3D"https://developer.arm.com/docs/ecm0359818/latest/">ARMv8-M =
Security Extensions:
Requirements on Development Tools - Engineering Specification Documentation=
</a> for more information.</p>
</section>
<section id=3D"code-seg">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id575" role=3D"doc-backlink">code_seg</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#code-seg" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id153">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
53" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cod=
e_seg</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
eclspec(code_seg)</span></code> attribute enables the placement of code int=
o separate
named segments that can be paged or locked in memory individually. This att=
ribute
is used to control the placement of instantiated templates and compiler-gen=
erated
code. See the documentation for <a class=3D"reference external" href=3D"htt=
p://msdn.microsoft.com/en-us/library/dn636922.aspx">__declspec(code_seg)</a=
> on MSDN.</p>
</section>
<section id=3D"cold">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id576" role=3D"doc-backlink">cold</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#cold" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id154">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
54" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cold</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::cold</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::cold</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((cold))</span></code> marks a function as cold, as a manual alternat=
ive to PGO hotness data.
If PGO data is available, the profile count based hotness overrides the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">__attribute__=
((cold))</span></code> annotation (unlike <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">__attribute__((hot))</span></code>).</p>
</section>
<section id=3D"constructor">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id577" role=3D"doc-backlink">constructor</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#construc=
tor" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id155">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
55" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">constructor</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::constructor</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::constructor</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">con=
structor</span></code> attribute causes the function to be called before en=
tering
<code class=3D"docutils literal notranslate"><span class=3D"pre">main()</sp=
an></code>, and the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">destructor</span></code> attribute causes the function to be call=
ed
after returning from <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">main()</span></code> or when the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">exit()</span></code> function has been
called. Note, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">quick_exit()</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">_Exit()</span></code>, and <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">abort()</span></code> prevent a func=
tion
marked <code class=3D"docutils literal notranslate"><span class=3D"pre">des=
tructor</span></code> from being called.</p>
<p>The constructor or destructor function should not accept any arguments a=
nd its
return type should be <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">void</span></code>.</p>
<p>The attributes accept an optional argument used to specify the priority =
order
in which to execute constructor and destructor functions. The priority is
given as an integer constant expression between 101 and 65535 (inclusive).
Priorities outside of that range are reserved for use by the implementation=
. A
lower value indicates a higher priority of initialization. Note that only t=
he
relative ordering of values is important. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><=
span class=3D"n">constructor</span><span class=3D"p">(</span><span class=3D=
"mi">200</span><span class=3D"p">)))</span><span class=3D"w"> </span><span =
class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">foo</sp=
an><span class=3D"p">(</span><span class=3D"kt">void</span><span class=3D"p=
">);</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">constructor</span><span class=3D"p">(</span><span class=3D"mi">101<=
/span><span class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"=
kt">void</span><span class=3D"w"> </span><span class=3D"n">bar</span><span =
class=3D"p">(</span><span class=3D"kt">void</span><span class=3D"p">);</spa=
n>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">bar()</=
span></code> will be called before <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">foo()</span></code>, and both will be called befor=
e
<code class=3D"docutils literal notranslate"><span class=3D"pre">main()</sp=
an></code>. If no argument is given to the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">constructor</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">destructor</span></co=
de>
attribute, they default to the value <code class=3D"docutils literal notran=
slate"><span class=3D"pre">65535</span></code>.</p>
</section>
<section id=3D"convergent">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id578" role=3D"doc-backlink">convergent</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#convergen=
t" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id156">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
56" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">convergent</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::convergent</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::convergent</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">con=
vergent</span></code> attribute can be placed on a function declaration. It=
 is
translated into the LLVM <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">convergent</span></code> attribute, which indicates that the=
 call
instructions of a function with this attribute cannot be made control-depen=
dent
on any additional values.</p>
<p>In languages designed for SPMD/SIMT programming model, e.g. OpenCL or CU=
DA,
the call instructions of a function with this attribute must be executed by
all work items or threads in a work group or sub group.</p>
<p>This attribute is different from <code class=3D"docutils literal notrans=
late"><span class=3D"pre">noduplicate</span></code> because it allows dupli=
cating
function calls if it can be proved that the duplicated function calls are
not made control-dependent on any additional values, e.g., unrolling a loop
executed by all work items.</p>
<p>Sample usage:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">convfunc</span><span class=3D"p">(</span><span class=3D"kt">void</s=
pan><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">_=
_attribute__</span><span class=3D"p">((</span><span class=3D"n">convergent<=
/span><span class=3D"p">));</span>
<span class=3D"c1">// Setting it as a C++11 attribute is also valid in a C+=
+ program.</span>
<span class=3D"c1">// void convfunc(void) [[clang::convergent]];</span>
</pre></div>
</div>
</section>
<section id=3D"cpu-dispatch">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id579" role=3D"doc-backlink">cpu_dispatch</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#cpu-dis=
patch" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id157">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
57" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cpu_dispatch</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cpu_dispatch</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cpu_dispatch</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cpu=
_dispatch</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cpu=
_specific</span></code> and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">cpu_dispatch</span></code> attributes are used to define =
and
resolve multiversioned functions. This form of multiversioning provides a
mechanism for declaring versions across translation units and manually
specifying the resolved function list. A specified CPU defines a set of min=
imum
features that are required for the function to be called. The result of thi=
s is
that future processors execute the most restrictive version of the function=
 the
new processor can execute.</p>
<p>In addition, unlike the ICC implementation of this feature, the selectio=
n of the
version does not consider the manufacturer or microarchitecture of the proc=
essor.
It tests solely the list of features that are both supported by the specifi=
ed
processor and present in the compiler-rt library. This can be surprising at=
 times,
as the runtime processor may be from a completely different manufacturer, a=
s long
as it supports the same feature set.</p>
<p>This can additionally be surprising, as some processors are indistringui=
shable from
others based on the list of testable features. When this happens, the varia=
nt
is selected in an unspecified manner.</p>
<p>Function versions are defined with <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">cpu_specific</span></code>, which takes one or =
more CPU
names as a parameter. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"c1">// Declares and defines the ivybridge version of =
single_cpu.</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_specific</span><span class=3D"p">(</span><span class=3D"n">ivyb=
ridge</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">s=
ingle_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><sp=
an class=3D"p">){}</span>

<span class=3D"c1">// Declares and defines the atom version of single_cpu.<=
/span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_specific</span><span class=3D"p">(</span><span class=3D"n">atom=
</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">s=
ingle_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><sp=
an class=3D"p">){}</span>

<span class=3D"c1">// Declares and defines both the ivybridge and atom vers=
ion of multi_cpu.</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_specific</span><span class=3D"p">(</span><span class=3D"n">ivyb=
ridge</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">atom</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">m=
ulti_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><spa=
n class=3D"p">){}</span>
</pre></div>
</div>
<p>A dispatching (or resolving) function can be declared anywhere in a proj=
ect=E2=80=99s
source code with <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cpu_dispatch</span></code>. This attribute takes one or more CPU n=
ames
as a parameter (like <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">cpu_specific</span></code>). Functions marked with <code class=
=3D"docutils literal notranslate"><span class=3D"pre">cpu_dispatch</span></=
code>
are not expected to be defined, only declared. If such a marked function ha=
s a
definition, any side effects of the function are ignored; trivial function
bodies are permissible for ICC compatibility.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"c1">// Creates a resolver for single_cpu above.</span=
>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_dispatch</span><span class=3D"p">(</span><span class=3D"n">ivyb=
ridge</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">atom</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">s=
ingle_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><sp=
an class=3D"p">){}</span>

<span class=3D"c1">// Creates a resolver for multi_cpu, but adds a 3rd vers=
ion defined in another</span>
<span class=3D"c1">// translation unit.</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_dispatch</span><span class=3D"p">(</span><span class=3D"n">ivyb=
ridge</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">atom</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">sandybridge</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">m=
ulti_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><spa=
n class=3D"p">){}</span>
</pre></div>
</div>
<p>Note that it is possible to have a resolving function that dispatches ba=
sed on
more or fewer options than are present in the program. Specifying fewer wil=
l
result in the omitted options not being considered during resolution. Speci=
fying
a version for resolution that isn=E2=80=99t defined in the program will res=
ult in a
linking failure.</p>
<p>It is also possible to specify a CPU name of <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">generic</span></code> which will be r=
esolved
if the executing processor doesn=E2=80=99t satisfy the features required in=
 the CPU
name. The behavior of a program executing on a processor that doesn=E2=80=
=99t satisfy
any option of a multiversioned function is undefined.</p>
</section>
<section id=3D"cpu-specific">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id580" role=3D"doc-backlink">cpu_specific</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#cpu-spe=
cific" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id158">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
58" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cpu_specific</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cpu_specific</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cpu_specific</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cpu=
_specific</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cpu=
_specific</span></code> and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">cpu_dispatch</span></code> attributes are used to define =
and
resolve multiversioned functions. This form of multiversioning provides a
mechanism for declaring versions across translation units and manually
specifying the resolved function list. A specified CPU defines a set of min=
imum
features that are required for the function to be called. The result of thi=
s is
that future processors execute the most restrictive version of the function=
 the
new processor can execute.</p>
<p>In addition, unlike the ICC implementation of this feature, the selectio=
n of the
version does not consider the manufacturer or microarchitecture of the proc=
essor.
It tests solely the list of features that are both supported by the specifi=
ed
processor and present in the compiler-rt library. This can be surprising at=
 times,
as the runtime processor may be from a completely different manufacturer, a=
s long
as it supports the same feature set.</p>
<p>This can additionally be surprising, as some processors are indistringui=
shable from
others based on the list of testable features. When this happens, the varia=
nt
is selected in an unspecified manner.</p>
<p>Function versions are defined with <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">cpu_specific</span></code>, which takes one or =
more CPU
names as a parameter. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"c1">// Declares and defines the ivybridge version of =
single_cpu.</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_specific</span><span class=3D"p">(</span><span class=3D"n">ivyb=
ridge</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">s=
ingle_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><sp=
an class=3D"p">){}</span>

<span class=3D"c1">// Declares and defines the atom version of single_cpu.<=
/span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_specific</span><span class=3D"p">(</span><span class=3D"n">atom=
</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">s=
ingle_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><sp=
an class=3D"p">){}</span>

<span class=3D"c1">// Declares and defines both the ivybridge and atom vers=
ion of multi_cpu.</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_specific</span><span class=3D"p">(</span><span class=3D"n">ivyb=
ridge</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">atom</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">m=
ulti_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><spa=
n class=3D"p">){}</span>
</pre></div>
</div>
<p>A dispatching (or resolving) function can be declared anywhere in a proj=
ect=E2=80=99s
source code with <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cpu_dispatch</span></code>. This attribute takes one or more CPU n=
ames
as a parameter (like <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">cpu_specific</span></code>). Functions marked with <code class=
=3D"docutils literal notranslate"><span class=3D"pre">cpu_dispatch</span></=
code>
are not expected to be defined, only declared. If such a marked function ha=
s a
definition, any side effects of the function are ignored; trivial function
bodies are permissible for ICC compatibility.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"c1">// Creates a resolver for single_cpu above.</span=
>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_dispatch</span><span class=3D"p">(</span><span class=3D"n">ivyb=
ridge</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">atom</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">s=
ingle_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><sp=
an class=3D"p">){}</span>

<span class=3D"c1">// Creates a resolver for multi_cpu, but adds a 3rd vers=
ion defined in another</span>
<span class=3D"c1">// translation unit.</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">cpu_dispatch</span><span class=3D"p">(</span><span class=3D"n">ivyb=
ridge</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">atom</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">sandybridge</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">m=
ulti_cpu</span><span class=3D"p">(</span><span class=3D"kt">void</span><spa=
n class=3D"p">){}</span>
</pre></div>
</div>
<p>Note that it is possible to have a resolving function that dispatches ba=
sed on
more or fewer options than are present in the program. Specifying fewer wil=
l
result in the omitted options not being considered during resolution. Speci=
fying
a version for resolution that isn=E2=80=99t defined in the program will res=
ult in a
linking failure.</p>
<p>It is also possible to specify a CPU name of <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">generic</span></code> which will be r=
esolved
if the executing processor doesn=E2=80=99t satisfy the features required in=
 the CPU
name. The behavior of a program executing on a processor that doesn=E2=80=
=99t satisfy
any option of a multiversioned function is undefined.</p>
</section>
<section id=3D"destructor">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id581" role=3D"doc-backlink">destructor</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#destructo=
r" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id159">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
59" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">destructor</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::destructor</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::destructor</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">con=
structor</span></code> attribute causes the function to be called before en=
tering
<code class=3D"docutils literal notranslate"><span class=3D"pre">main()</sp=
an></code>, and the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">destructor</span></code> attribute causes the function to be call=
ed
after returning from <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">main()</span></code> or when the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">exit()</span></code> function has been
called. Note, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">quick_exit()</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">_Exit()</span></code>, and <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">abort()</span></code> prevent a func=
tion
marked <code class=3D"docutils literal notranslate"><span class=3D"pre">des=
tructor</span></code> from being called.</p>
<p>The constructor or destructor function should not accept any arguments a=
nd its
return type should be <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">void</span></code>.</p>
<p>The attributes accept an optional argument used to specify the priority =
order
in which to execute constructor and destructor functions. The priority is
given as an integer constant expression between 101 and 65535 (inclusive).
Priorities outside of that range are reserved for use by the implementation=
. A
lower value indicates a higher priority of initialization. Note that only t=
he
relative ordering of values is important. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><=
span class=3D"n">constructor</span><span class=3D"p">(</span><span class=3D=
"mi">200</span><span class=3D"p">)))</span><span class=3D"w"> </span><span =
class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">foo</sp=
an><span class=3D"p">(</span><span class=3D"kt">void</span><span class=3D"p=
">);</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">constructor</span><span class=3D"p">(</span><span class=3D"mi">101<=
/span><span class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"=
kt">void</span><span class=3D"w"> </span><span class=3D"n">bar</span><span =
class=3D"p">(</span><span class=3D"kt">void</span><span class=3D"p">);</spa=
n>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">bar()</=
span></code> will be called before <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">foo()</span></code>, and both will be called befor=
e
<code class=3D"docutils literal notranslate"><span class=3D"pre">main()</sp=
an></code>. If no argument is given to the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">constructor</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">destructor</span></co=
de>
attribute, they default to the value <code class=3D"docutils literal notran=
slate"><span class=3D"pre">65535</span></code>.</p>
</section>
<section id=3D"diagnose-as-builtin">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id582" role=3D"doc-backlink">diagnose_as_builtin</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#diagnose-as-builtin" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id160">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
60" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">diagnose_as_builtin</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::diagnose_as_builtin</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::diagnose_as_builtin</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dia=
gnose_as_builtin</span></code> attribute indicates that Fortify diagnostics=
 are to
be applied to the declared function as if it were the function specified by=
 the
attribute. The builtin function whose diagnostics are to be mimicked should=
 be
given. In addition, the order in which arguments should be applied must als=
o
be given.</p>
<p>For example, the attribute can be used as follows.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><sp=
an class=3D"n">diagnose_as_builtin</span><span class=3D"p">(</span><span cl=
ass=3D"n">__builtin_memset</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"mi">3</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"mi">2</span><span class=3D"p">,</span><span c=
lass=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"n">mymemset</span><span class=3D"p">(</span><span cla=
ss=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">n</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">int</sp=
an><span class=3D"w"> </span><span class=3D"n">c</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"kt">void</span><span class=
=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">s</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// ...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This indicates that calls to <code class=3D"docutils literal notranslate=
"><span class=3D"pre">mymemset</span></code> should be diagnosed as if they=
 were
calls to <code class=3D"docutils literal notranslate"><span class=3D"pre">_=
_builtin_memset</span></code>. The arguments <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">3,</span> <span class=3D"pre">2,</span> =
<span class=3D"pre">1</span></code> indicate by index the
order in which arguments of <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">mymemset</span></code> should be applied to
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
memset</span></code>. The third argument should be applied first, then the
second, and then the first. Thus (when Fortify warnings are enabled) the ca=
ll
<code class=3D"docutils literal notranslate"><span class=3D"pre">mymemset(n=
,</span> <span class=3D"pre">c,</span> <span class=3D"pre">s)</span></code>=
 will diagnose overflows as if it were the call
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
memset(s,</span> <span class=3D"pre">c,</span> <span class=3D"pre">n)</span=
></code>.</p>
<p>For variadic functions, the variadic arguments must come in the same ord=
er as
they would to the builtin function, after all normal arguments. For instanc=
e,
to diagnose a new function as if it were <cite>sscanf</cite>, we can use th=
e attribute as
follows.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><sp=
an class=3D"n">diagnose_as_builtin</span><span class=3D"p">(</span><span cl=
ass=3D"n">sscanf</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"mi">2</span><span class=3D"p">)))</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">my=
sscanf</span><span class=3D"p">(</span><span class=3D"k">const</span><span =
class=3D"w"> </span><span class=3D"kt">char</span><span class=3D"w"> </span=
><span class=3D"o">*</span><span class=3D"n">str</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"k">const</span><span class=
=3D"w"> </span><span class=3D"kt">char</span><span class=3D"w"> </span><spa=
n class=3D"o">*</span><span class=3D"n">format</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"p">...)</span><span class=3D"w=
">  </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// ...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Then the call <cite>mysscanf(=E2=80=9Cabc def=E2=80=9D, =E2=80=9C%4s %4s=
=E2=80=9D, buf1, buf2)</cite> will be diagnosed as
if it were the call <cite>sscanf(=E2=80=9Cabc def=E2=80=9D, =E2=80=9C%4s %4=
s=E2=80=9D, buf1, buf2)</cite>.</p>
<p>This attribute cannot be applied to non-static member functions.</p>
</section>
<section id=3D"diagnose-if">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id583" role=3D"doc-backlink">diagnose_if</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#diagnose=
-if" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id161">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
61" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">diagnose_if</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dia=
gnose_if</span></code> attribute can be placed on function declarations to =
emit
warnings or errors at compile-time if calls to the attributed function meet
certain user-defined criteria. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"n">abs</span><span class=3D"p">(</span><span class=3D"kt">int</span><sp=
an class=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">diagnose_if</span><span class=3D"p">(</s=
pan><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">&=
gt;=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">"Redundant abs=
 call"</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"s">"warning"</span><span class=3D"p">)));</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">mu=
st_abs</span><span class=3D"p">(</span><span class=3D"kt">int</span><span c=
lass=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">diagnose_if</span><span class=3D"p">(</s=
pan><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">&=
gt;=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">"Redundant abs=
 call"</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"s">"error"</span><span class=3D"p">)));</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">va=
l</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"n">abs</span><span class=3D"p">(</span><span =
class=3D"mi">1</span><span class=3D"p">);</span><span class=3D"w"> </span><=
span class=3D"c1">// warning: Redundant abs call</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">va=
l2</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"n">must_abs</span><span class=3D"p">(</span><=
span class=3D"mi">1</span><span class=3D"p">);</span><span class=3D"w"> </s=
pan><span class=3D"c1">// error: Redundant abs call</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">va=
l3</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"n">abs</span><span class=3D"p">(</span><span =
class=3D"n">val</span><span class=3D"p">);</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">va=
l4</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"n">must_abs</span><span class=3D"p">(</span><=
span class=3D"n">val</span><span class=3D"p">);</span><span class=3D"w"> </=
span><span class=3D"c1">// Because run-time checks are not emitted for</spa=
n>
<span class=3D"w">                          </span><span class=3D"c1">// di=
agnose_if attributes, this executes without</span>
<span class=3D"w">                          </span><span class=3D"c1">// is=
sue.</span>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">diagnos=
e_if</span></code> is closely related to <code class=3D"docutils literal no=
translate"><span class=3D"pre">enable_if</span></code>, with a few key diff=
erences:</p>
<ul class=3D"simple">
<li><p>Overload resolution is not aware of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">diagnose_if</span></code> attributes: they=
=E2=80=99re
considered only after we select the best candidate from a given candidate s=
et.</p></li>
<li><p>Function declarations that differ only in their <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">diagnose_if</span></code> attr=
ibutes are
considered to be redeclarations of the same function (not overloads).</p></=
li>
<li><p>If the condition provided to <code class=3D"docutils literal notrans=
late"><span class=3D"pre">diagnose_if</span></code> cannot be evaluated, no
diagnostic will be emitted.</p></li>
</ul>
<p>Otherwise, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">diagnose_if</span></code> is essentially the logical negation of <code =
class=3D"docutils literal notranslate"><span class=3D"pre">enable_if</span>=
</code>.</p>
<p>As a result of bullet number two, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">diagnose_if</span></code> attributes will stack =
on the
same function. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"n">foo</span><span class=3D"p">()</span><span class=3D"w"> </span><span=
 class=3D"n">__attribute__</span><span class=3D"p">((</span><span class=3D"=
n">diagnose_if</span><span class=3D"p">(</span><span class=3D"mi">1</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">"diag1=
"</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
s">"warning"</span><span class=3D"p">)));</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">fo=
o</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D=
"n">__attribute__</span><span class=3D"p">((</span><span class=3D"n">diagno=
se_if</span><span class=3D"p">(</span><span class=3D"mi">1</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">"diag2"</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">"warni=
ng"</span><span class=3D"p">)));</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">ba=
r</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"n">foo</span><span class=3D"p">();</span><spa=
n class=3D"w"> </span><span class=3D"c1">// warning: diag1</span>
<span class=3D"w">                 </span><span class=3D"c1">// warning: di=
ag2</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"p">(<=
/span><span class=3D"o">*</span><span class=3D"n">fooptr</span><span class=
=3D"p">)(</span><span class=3D"kt">void</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </spa=
n><span class=3D"n">foo</span><span class=3D"p">;</span><span class=3D"w"> =
</span><span class=3D"c1">// warning: diag1</span>
<span class=3D"w">                           </span><span class=3D"c1">// w=
arning: diag2</span>

<span class=3D"n">constexpr</span><span class=3D"w"> </span><span class=3D"=
kt">int</span><span class=3D"w"> </span><span class=3D"n">supportsAPILevel<=
/span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=3D=
"w"> </span><span class=3D"n">N</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </span><span cl=
ass=3D"k">return</span><span class=3D"w"> </span><span class=3D"n">N</span>=
<span class=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> <=
/span><span class=3D"mi">5</span><span class=3D"p">;</span><span class=3D"w=
"> </span><span class=3D"p">}</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">ba=
z</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">diagnose_if</span><span class=3D"p">(</s=
pan><span class=3D"o">!</span><span class=3D"n">supportsAPILevel</span><spa=
n class=3D"p">(</span><span class=3D"mi">10</span><span class=3D"p">),</spa=
n>
<span class=3D"w">                             </span><span class=3D"s">"Up=
grade to API level 10 to use baz"</span><span class=3D"p">,</span><span cla=
ss=3D"w"> </span><span class=3D"s">"error"</span><span class=3D"p">)));</sp=
an>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">ba=
z</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">diagnose_if</span><span class=3D"p">(</s=
pan><span class=3D"o">!</span><span class=3D"n">a</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"s">"0 is not recommended."<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"s"=
>"warning"</span><span class=3D"p">)));</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"p">(<=
/span><span class=3D"o">*</span><span class=3D"n">bazptr</span><span class=
=3D"p">)(</span><span class=3D"kt">int</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span=
><span class=3D"n">baz</span><span class=3D"p">;</span><span class=3D"w"> <=
/span><span class=3D"c1">// error: Upgrade to API level 10 to use baz</span=
>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">v<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"n">baz</span><span class=3D"p">(</span><span clas=
s=3D"mi">0</span><span class=3D"p">);</span><span class=3D"w"> </span><span=
 class=3D"c1">// error: Upgrade to API level 10 to use baz</span>
</pre></div>
</div>
<p>Query for this feature with <code class=3D"docutils literal notranslate"=
><span class=3D"pre">__has_attribute(diagnose_if)</span></code>.</p>
</section>
<section id=3D"disable-sanitizer-instrumentation">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id584" role=3D"doc-backlink">disable_sanitizer_instrumentatio=
n</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#disable-sanitizer-instrumentation" title=3D"Link to this head=
ing">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id162">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
62" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">disable_sanitizer_instrumentation</span></code></p></td=
>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::disable_sanitizer_instrumentation</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::disable_sanitizer_instrumentation</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>disable_sanitizer_instrumentation</span></code> attribute on a function,
Objective-C method, or global variable, to specify that no sanitizer
instrumentation should be applied.</p>
<p>This is not the same as <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__attribute__((no_sanitize(...)))</span></code>, which dep=
ending
on the tool may still insert instrumentation to prevent false positive repo=
rts.</p>
</section>
<section id=3D"disable-tail-calls">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id585" role=3D"doc-backlink">disable_tail_calls</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#disable-tail-calls" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id163">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
63" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">disable_tail_calls</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::disable_tail_calls</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::disable_tail_calls</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dis=
able_tail_calls</span></code> attribute instructs the backend to not perfor=
m tail
call optimization inside the marked function.</p>
<p>For example:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"kt">int</span><span class=3D"w"> </span><span cl=
ass=3D"nf">callee</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan><span class=3D"p">);</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">f=
oo</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">(=
(</span><span class=3D"n">disable_tail_calls</span><span class=3D"p">))</sp=
an><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">callee</span><span class=3D"p">(</span><span cla=
ss=3D"n">a</span><span class=3D"p">);</span><span class=3D"w"> </span><span=
 class=3D"c1">// This call is not tail-call optimized.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
<p>Marking virtual functions as <code class=3D"docutils literal notranslate=
"><span class=3D"pre">disable_tail_calls</span></code> is legal.</p>
<blockquote>
<div><div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"kt">int</span><span class=3D"w"> </span><span =
class=3D"nf">callee</span><span class=3D"p">(</span><span class=3D"kt">int<=
/span><span class=3D"p">);</span>

<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"nc">=
Base</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"k">public</span><span class=3D"o">:</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">disable_tail_calls</s=
pan><span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"k">=
virtual</span><span class=3D"w"> </span><span class=3D"kt">int</span><span =
class=3D"w"> </span><span class=3D"n">foo1</span><span class=3D"p">()</span=
><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
w"> </span><span class=3D"n">callee</span><span class=3D"p">();</span><span=
 class=3D"w"> </span><span class=3D"c1">// This call is not tail-call optim=
ized.</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">};</span>

<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"nc">=
Derived1</span><span class=3D"w"> </span><span class=3D"o">:</span><span cl=
ass=3D"w"> </span><span class=3D"k">public</span><span class=3D"w"> </span>=
<span class=3D"n">Base</span><span class=3D"w"> </span><span class=3D"p">{<=
/span>
<span class=3D"k">public</span><span class=3D"o">:</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">foo1</span><span class=3D"p">()</span><span class=
=3D"w"> </span><span class=3D"k">override</span><span class=3D"w"> </span><=
span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
w"> </span><span class=3D"n">callee</span><span class=3D"p">();</span><span=
 class=3D"w"> </span><span class=3D"c1">// This call is tail-call optimized=
.</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">};</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"enable-if">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id586" role=3D"doc-backlink">enable_if</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#enable-if"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id164">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
64" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">enable_if</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>Some features of this attribute are experimental. The meaning of
multiple enable_if attributes on a single declaration is subject to change =
in
a future version of clang. Also, the ABI is not standardized and the name
mangling may change in future versions. To avoid that, use asm labels.</p>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ena=
ble_if</span></code> attribute can be placed on function declarations to co=
ntrol
which overload is selected based on the values of the function=E2=80=99s ar=
guments.
When combined with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">overloadable</span></code> attribute, this feature is also
available in C.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">isdigit</span><span class=3D"p">(</span><span class=3D"kt">int</spa=
n><span class=3D"w"> </span><span class=3D"n">c</span><span class=3D"p">);<=
/span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">is=
digit</span><span class=3D"p">(</span><span class=3D"kt">int</span><span cl=
ass=3D"w"> </span><span class=3D"n">c</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p=
">((</span><span class=3D"n">enable_if</span><span class=3D"p">(</span><spa=
n class=3D"n">c</span><span class=3D"w"> </span><span class=3D"o">&lt;=3D</=
span><span class=3D"w"> </span><span class=3D"mi">-1</span><span class=3D"w=
"> </span><span class=3D"o">||</span><span class=3D"w"> </span><span class=
=3D"n">c</span><span class=3D"w"> </span><span class=3D"o">&gt;</span><span=
 class=3D"w"> </span><span class=3D"mi">255</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"s">"chosen when 'c' is out of ran=
ge"</span><span class=3D"p">)))</span><span class=3D"w"> </span><span class=
=3D"n">__attribute__</span><span class=3D"p">((</span><span class=3D"n">una=
vailable</span><span class=3D"p">(</span><span class=3D"s">"'c' must have t=
he value of an unsigned char or EOF"</span><span class=3D"p">)));</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo</span><span class=3D"p">(</span><span class=3D"kt">char</span><span cla=
ss=3D"w"> </span><span class=3D"n">c</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">isdigit</span><span class=3D"p=
">(</span><span class=3D"n">c</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">isdigit</span><span class=3D"p=
">(</span><span class=3D"mi">10</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">isdigit</span><span class=3D"p=
">(</span><span class=3D"mi">-10</span><span class=3D"p">);</span><span cla=
ss=3D"w">  </span><span class=3D"c1">// results in a compile-time error.</s=
pan>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The enable_if attribute takes two arguments, the first is an expression =
written
in terms of the function parameters, the second is a string explaining why =
this
overload candidate could not be selected to be displayed in diagnostics. Th=
e
expression is part of the function signature for the purposes of determinin=
g
whether it is a redeclaration (following the rules used when determining
whether a C++ template specialization is ODR-equivalent), but is not part o=
f
the type.</p>
<p>The enable_if expression is evaluated as if it were the body of a
bool-returning constexpr function declared with the arguments of the functi=
on
it is being applied to, then called with the parameters at the call site. I=
f the
result is false or could not be determined through constant expression
evaluation, then this overload will not be chosen and the provided string m=
ay
be used in a diagnostic if the compile fails as a result.</p>
<p>Because the enable_if expression is an unevaluated context, there are no=
 global
state changes, nor the ability to pass information from the enable_if
expression to the function body. For example, suppose we want calls to
strnlen(strbuf, maxlen) to resolve to strnlen_chk(strbuf, maxlen, size of
strbuf) only if the size of strbuf can be determined:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><=
span class=3D"n">always_inline</span><span class=3D"p">))</span>
<span class=3D"k">static</span><span class=3D"w"> </span><span class=3D"kr"=
>inline</span><span class=3D"w"> </span><span class=3D"kt">size_t</span><sp=
an class=3D"w"> </span><span class=3D"n">strnlen</span><span class=3D"p">(<=
/span><span class=3D"k">const</span><span class=3D"w"> </span><span class=
=3D"kt">char</span><span class=3D"w"> </span><span class=3D"o">*</span><spa=
n class=3D"n">s</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"kt">size_t</span><span class=3D"w"> </span><span class=3D"n">=
maxlen</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">overloadable</span><span class=3D"p">))<=
/span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">enable_if</span><span class=3D"p">(</spa=
n><span class=3D"n">__builtin_object_size</span><span class=3D"p">(</span><=
span class=3D"n">s</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"mi">0</span><span class=3D"p">)</span><span class=3D"w"> <=
/span><span class=3D"o">!=3D</span><span class=3D"w"> </span><span class=3D=
"mi">-1</span><span class=3D"p">))),</span>
<span class=3D"w">                           </span><span class=3D"s">"chos=
en when the buffer size is known but 'maxlen' is not"</span><span class=3D"=
p">)))</span>
<span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">strnlen_chk</span><span class=3D"p">(</span><spa=
n class=3D"n">s</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"n">maxlen</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">__builtin_object_size</span><span class=3D"p">(</s=
pan><span class=3D"n">s</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"mi">0</span><span class=3D"p">));</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Multiple enable_if attributes may be applied to a single declaration. In=
 this
case, the enable_if expressions are evaluated from left to right in the
following manner. First, the candidates whose enable_if expressions evaluat=
e to
false or cannot be evaluated are discarded. If the remaining candidates do =
not
share ODR-equivalent enable_if expressions, the overload resolution is
ambiguous. Otherwise, enable_if overload resolution continues with the next
enable_if attribute on the candidates that have not been discarded and have
remaining enable_if attributes. In this way, we pick the most specific
overload out of a number of viable overloads using enable_if.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"n">f</span><span class=3D"p">()</span><span class=3D"w"> </span><span =
class=3D"n">__attribute__</span><span class=3D"p">((</span><span class=3D"n=
">enable_if</span><span class=3D"p">(</span><span class=3D"nb">true</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">""</sp=
an><span class=3D"p">)));</span><span class=3D"w">  </span><span class=3D"c=
1">// #1</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D"=
n">__attribute__</span><span class=3D"p">((</span><span class=3D"n">enable_=
if</span><span class=3D"p">(</span><span class=3D"nb">true</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">""</span><span =
class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"n">__attribu=
te__</span><span class=3D"p">((</span><span class=3D"n">enable_if</span><sp=
an class=3D"p">(</span><span class=3D"nb">true</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"s">""</span><span class=3D"p">=
)));</span><span class=3D"w">  </span><span class=3D"c1">// #2</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">g=
</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </span><s=
pan class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </span=
><span class=3D"n">__attribute__</span><span class=3D"p">((</span><span cla=
ss=3D"n">enable_if</span><span class=3D"p">(</span><span class=3D"n">i</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">""<=
/span><span class=3D"p">)));</span><span class=3D"w">  </span><span class=
=3D"c1">// #1</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">g=
</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </span><s=
pan class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </span=
><span class=3D"n">__attribute__</span><span class=3D"p">((</span><span cla=
ss=3D"n">enable_if</span><span class=3D"p">(</span><span class=3D"n">j</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">""<=
/span><span class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"=
n">__attribute__</span><span class=3D"p">((</span><span class=3D"n">enable_=
if</span><span class=3D"p">(</span><span class=3D"nb">true</span><span clas=
s=3D"p">)));</span><span class=3D"w">  </span><span class=3D"c1">// #2</spa=
n>
</pre></div>
</div>
<p>In this example, a call to f() is always resolved to #2, as the first en=
able_if
expression is ODR-equivalent for both declarations, but #1 does not have an=
other
enable_if expression to continue evaluating, so the next round of evaluatio=
n has
only a single candidate. In a call to g(1, 1), the call is ambiguous even t=
hough
#2 has more enable_if attributes, because the first enable_if expressions a=
re
not ODR-equivalent.</p>
<p>Query for this feature with <code class=3D"docutils literal notranslate"=
><span class=3D"pre">__has_attribute(enable_if)</span></code>.</p>
<p>Note that functions with one or more <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">enable_if</span></code> attributes may not ha=
ve
their address taken, unless all of the conditions specified by said
<code class=3D"docutils literal notranslate"><span class=3D"pre">enable_if<=
/span></code> are constants that evaluate to <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">true</span></code>. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">const</span><span class=3D"w"> </span><span class=
=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">TrueConstant<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">;</span>
<span class=3D"k">const</span><span class=3D"w"> </span><span class=3D"kt">=
int</span><span class=3D"w"> </span><span class=3D"n">FalseConstant</span><=
span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </s=
pan><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">f<=
/span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=3D=
"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</=
span><span class=3D"n">enable_if</span><span class=3D"p">(</span><span clas=
s=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">&gt;</span><spa=
n class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"s">""</span><span class=3D"p">)));=
</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">g<=
/span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=3D=
"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</=
span><span class=3D"n">enable_if</span><span class=3D"p">(</span><span clas=
s=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">=3D=3D</span><s=
pan class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"w"> </spa=
n><span class=3D"o">||</span><span class=3D"w"> </span><span class=3D"n">a<=
/span><span class=3D"w"> </span><span class=3D"o">!=3D</span><span class=3D=
"w"> </span><span class=3D"mi">0</span><span class=3D"p">,</span><span clas=
s=3D"w"> </span><span class=3D"s">""</span><span class=3D"p">)));</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">h<=
/span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=3D=
"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</=
span><span class=3D"n">enable_if</span><span class=3D"p">(</span><span clas=
s=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"s">""</span><span class=3D"p">)));</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">i<=
/span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=3D=
"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</=
span><span class=3D"n">enable_if</span><span class=3D"p">(</span><span clas=
s=3D"n">TrueConstant</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"s">""</span><span class=3D"p">)));</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">j<=
/span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=3D=
"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</=
span><span class=3D"n">enable_if</span><span class=3D"p">(</span><span clas=
s=3D"n">FalseConstant</span><span class=3D"p">,</span><span class=3D"w"> </=
span><span class=3D"s">""</span><span class=3D"p">)));</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
fn</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"n=
">ptr</span><span class=3D"p">)(</span><span class=3D"kt">int</span><span c=
lass=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">ptr</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
o">&amp;</span><span class=3D"n">f</span><span class=3D"p">;</span><span cl=
ass=3D"w"> </span><span class=3D"c1">// error: 'a &gt; 0' is not always tru=
e</span>
<span class=3D"w">  </span><span class=3D"n">ptr</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
o">&amp;</span><span class=3D"n">g</span><span class=3D"p">;</span><span cl=
ass=3D"w"> </span><span class=3D"c1">// error: 'a =3D=3D 0 || a !=3D 0' is =
not a truthy constant</span>
<span class=3D"w">  </span><span class=3D"n">ptr</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
o">&amp;</span><span class=3D"n">h</span><span class=3D"p">;</span><span cl=
ass=3D"w"> </span><span class=3D"c1">// OK: 1 is a truthy constant</span>
<span class=3D"w">  </span><span class=3D"n">ptr</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
o">&amp;</span><span class=3D"n">i</span><span class=3D"p">;</span><span cl=
ass=3D"w"> </span><span class=3D"c1">// OK: 'TrueConstant' is a truthy cons=
tant</span>
<span class=3D"w">  </span><span class=3D"n">ptr</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
o">&amp;</span><span class=3D"n">j</span><span class=3D"p">;</span><span cl=
ass=3D"w"> </span><span class=3D"c1">// error: 'FalseConstant' is a constan=
t, but not truthy</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Because <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>enable_if</span></code> evaluation happens during overload resolution,
<code class=3D"docutils literal notranslate"><span class=3D"pre">enable_if<=
/span></code> may give unintuitive results when used with templates, depend=
ing
on when overloads are resolved. In the example below, clang will emit a
diagnostic about no viable overloads for <code class=3D"docutils literal no=
translate"><span class=3D"pre">foo</span></code> in <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">bar</span></code>, but not in <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">baz</span></c=
ode>:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">double</span><span class=3D"w"> </span><span cl=
ass=3D"n">foo</span><span class=3D"p">(</span><span class=3D"kt">int</span>=
<span class=3D"w"> </span><span class=3D"n">i</span><span class=3D"p">)</sp=
an><span class=3D"w"> </span><span class=3D"n">__attribute__</span><span cl=
ass=3D"p">((</span><span class=3D"n">enable_if</span><span class=3D"p">(</s=
pan><span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">&=
gt;</span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"s">""</span><span c=
lass=3D"p">)));</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"n">foo</span><span class=3D"p">(</span><span class=3D=
"kt">int</span><span class=3D"w"> </span><span class=3D"n">i</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__=
</span><span class=3D"p">((</span><span class=3D"n">enable_if</span><span c=
lass=3D"p">(</span><span class=3D"n">i</span><span class=3D"w"> </span><spa=
n class=3D"o">&lt;=3D</span><span class=3D"w"> </span><span class=3D"mi">0<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"s"=
>""</span><span class=3D"p">)));</span>
<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"kt">int</span><span class=3D"w"> </span><span c=
lass=3D"n">I</span><span class=3D"o">&gt;</span>
<span class=3D"k">auto</span><span class=3D"w"> </span><span class=3D"n">ba=
r</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D=
"p">{</span><span class=3D"w"> </span><span class=3D"k">return</span><span =
class=3D"w"> </span><span class=3D"n">foo</span><span class=3D"p">(</span><=
span class=3D"n">I</span><span class=3D"p">);</span><span class=3D"w"> </sp=
an><span class=3D"p">}</span>

<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> </span><sp=
an class=3D"nc">T</span><span class=3D"o">&gt;</span>
<span class=3D"k">auto</span><span class=3D"w"> </span><span class=3D"n">ba=
z</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D=
"p">{</span><span class=3D"w"> </span><span class=3D"k">return</span><span =
class=3D"w"> </span><span class=3D"n">foo</span><span class=3D"p">(</span><=
span class=3D"n">T</span><span class=3D"o">::</span><span class=3D"n">numbe=
r</span><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D=
"p">}</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>WithNumber</span><span class=3D"w"> </span><span class=3D"p">{</span><span=
 class=3D"w"> </span><span class=3D"k">constexpr</span><span class=3D"w"> <=
/span><span class=3D"k">static</span><span class=3D"w"> </span><span class=
=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">number</span>=
<span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </=
span><span class=3D"mi">1</span><span class=3D"p">;</span><span class=3D"w"=
> </span><span class=3D"p">};</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
callThem</span><span class=3D"p">()</span><span class=3D"w"> </span><span c=
lass=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">bar</span><span class=3D"o">&l=
t;</span><span class=3D"k">sizeof</span><span class=3D"p">(</span><span cla=
ss=3D"n">WithNumber</span><span class=3D"p">)</span><span class=3D"o">&gt;<=
/span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"n">baz</span><span class=3D"o">&l=
t;</span><span class=3D"n">WithNumber</span><span class=3D"o">&gt;</span><s=
pan class=3D"p">();</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This is because, in <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">bar</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">foo</span></code> is resolved prior to template
instantiation, so the value for <code class=3D"docutils literal notranslate=
"><span class=3D"pre">I</span></code> isn=E2=80=99t known (thus, both <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">enable_if</span=
></code>
conditions for <code class=3D"docutils literal notranslate"><span class=3D"=
pre">foo</span></code> fail). However, in <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">baz</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">foo</span></code> is resolved duri=
ng
template instantiation, so the value for <code class=3D"docutils literal no=
translate"><span class=3D"pre">T::number</span></code> is known.</p>
</section>
<section id=3D"enforce-tcb">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id587" role=3D"doc-backlink">enforce_tcb</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#enforce-=
tcb" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id165">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
65" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">enforce_tcb</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::enforce_tcb</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::enforce_tcb</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<dl class=3D"simple">
<dt>The <code class=3D"docutils literal notranslate"><span class=3D"pre">en=
force_tcb</span></code> attribute can be placed on functions to enforce tha=
t a</dt><dd><p>trusted compute base (TCB) does not call out of the TCB. Thi=
s generates a
warning every time a function not marked with an <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">enforce_tcb</span></code> attribute =
is
called from a function with the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">enforce_tcb</span></code> attribute. A function may b=
e a
part of multiple TCBs. Invocations through function pointers are currently
not checked. Builtins are considered to a part of every TCB.</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">enf=
orce_tcb(Name)</span></code> indicates that this function is a part of the =
TCB named <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Name</span></code></p></li>
</ul>
</dd>
</dl>
</section>
<section id=3D"enforce-tcb-leaf">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id588" role=3D"doc-backlink">enforce_tcb_leaf</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#enf=
orce-tcb-leaf" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id166">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
66" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">enforce_tcb_leaf</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::enforce_tcb_leaf</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::enforce_tcb_leaf</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<dl class=3D"simple">
<dt>The <code class=3D"docutils literal notranslate"><span class=3D"pre">en=
force_tcb_leaf</span></code> attribute satisfies the requirement enforced b=
y</dt><dd><p><code class=3D"docutils literal notranslate"><span class=3D"pr=
e">enforce_tcb</span></code> for the marked function to be in the named TCB=
 but does not
continue to check the functions called from within the leaf function.</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">enf=
orce_tcb_leaf(Name)</span></code> indicates that this function is a part of=
 the TCB named <code class=3D"docutils literal notranslate"><span class=3D"=
pre">Name</span></code></p></li>
</ul>
</dd>
</dl>
</section>
<section id=3D"error-warning">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id589" role=3D"doc-backlink">error, warning</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#error=
-warning" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id167">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
67" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">error</span></code> <br> <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">warning</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::error</span></code> <br> <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">gnu::warning</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::error</span></code> <br> <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">gnu::warning</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">err=
or</span></code> and <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">warning</span></code> function attributes can be used to specify=
 a
custom diagnostic to be emitted when a call to such a function is not
eliminated via optimizations. This can be used to create compile time
assertions that depend on optimizations, while providing diagnostics
pointing to precise locations of the call site in the source.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><=
span class=3D"n">warning</span><span class=3D"p">(</span><span class=3D"s">=
"oh no"</span><span class=3D"p">)))</span><span class=3D"w"> </span><span c=
lass=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">dontcall=
</span><span class=3D"p">();</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">someCompileTimeAssertionTh=
atsTrue</span><span class=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"n">dontcall</span><span class=
=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1">// Warning</s=
pan>

<span class=3D"w">  </span><span class=3D"n">dontcall</span><span class=3D"=
p">();</span><span class=3D"w"> </span><span class=3D"c1">// Warning</span>

<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">someCompileTimeAssertionTh=
atsFalse</span><span class=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"n">dontcall</span><span class=
=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1">// No Warning=
</span>
<span class=3D"w">  </span><span class=3D"k">sizeof</span><span class=3D"p"=
>(</span><span class=3D"n">dontcall</span><span class=3D"p">());</span><spa=
n class=3D"w"> </span><span class=3D"c1">// No Warning</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"exclude-from-explicit-instantiation">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id590" role=3D"doc-backlink">exclude_from_explicit_instantiat=
ion</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Attribut=
eReference.html#exclude-from-explicit-instantiation" title=3D"Link to this =
heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id168">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
68" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">exclude_from_explicit_instantiation</span></code></p></=
td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::exclude_from_explicit_instantiation</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::exclude_from_explicit_instantiation</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">exc=
lude_from_explicit_instantiation</span></code> attribute opts-out a member =
of a
class template from being part of explicit template instantiations of that
class template. This means that an explicit instantiation will not instanti=
ate
members of the class template marked with the attribute, but also that code
where an extern template declaration of the enclosing class template is vis=
ible
will not take for granted that an external instantiation of the class templ=
ate
would provide those members (which would otherwise be a link error, since t=
he
explicit instantiation won=E2=80=99t provide those members). For example, l=
et=E2=80=99s say we
don=E2=80=99t want the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">data()</span></code> method to be part of libc++=E2=80=99s ABI=
. To make sure it
is not exported from the dylib, we give it hidden visibility:</p>
<blockquote>
<div><div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"c1">// in &lt;string&gt;</span>
<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"k">class</span><span class=3D"w"> </span><span =
class=3D"nc">CharT</span><span class=3D"o">&gt;</span>
<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"nc">=
basic_string</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"k">public</span><span class=3D"o">:</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">__visibility__</span><span class=3D"p">(=
</span><span class=3D"s">"hidden"</span><span class=3D"p">)))</span>
<span class=3D"w">  </span><span class=3D"k">const</span><span class=3D"w">=
 </span><span class=3D"n">value_type</span><span class=3D"o">*</span><span =
class=3D"w"> </span><span class=3D"n">data</span><span class=3D"p">()</span=
><span class=3D"w"> </span><span class=3D"k">const</span><span class=3D"w">=
 </span><span class=3D"k">noexcept</span><span class=3D"w"> </span><span cl=
ass=3D"p">{</span><span class=3D"w"> </span><span class=3D"p">...</span><sp=
an class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"p">};</span>

<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"k=
">class</span><span class=3D"w"> </span><span class=3D"nc">basic_string</sp=
an><span class=3D"o">&lt;</span><span class=3D"kt">char</span><span class=
=3D"o">&gt;</span><span class=3D"p">;</span>
</pre></div>
</div>
</div></blockquote>
<p>Since an explicit template instantiation declaration for <code class=3D"=
docutils literal notranslate"><span class=3D"pre">basic_string&lt;char&gt;<=
/span></code>
is provided, the compiler is free to assume that <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">basic_string&lt;char&gt;::data()</sp=
an></code>
will be provided by another translation unit, and it is free to produce an
external call to this function. However, since <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">data()</span></code> has hidden visibi=
lity
and the explicit template instantiation is provided in a shared library (as
opposed to simply another translation unit), <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">basic_string&lt;char&gt;::data()</span><=
/code>
won=E2=80=99t be found and a link error will ensue. This happens because th=
e compiler
assumes that <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">basic_string&lt;char&gt;::data()</span></code> is part of the explicit t=
emplate
instantiation declaration, when it really isn=E2=80=99t. To tell the compil=
er that
<code class=3D"docutils literal notranslate"><span class=3D"pre">data()</sp=
an></code> is not part of the explicit template instantiation declaration, =
the
<code class=3D"docutils literal notranslate"><span class=3D"pre">exclude_fr=
om_explicit_instantiation</span></code> attribute can be used:</p>
<blockquote>
<div><div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"c1">// in &lt;string&gt;</span>
<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"o=
">&lt;</span><span class=3D"k">class</span><span class=3D"w"> </span><span =
class=3D"nc">CharT</span><span class=3D"o">&gt;</span>
<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"nc">=
basic_string</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"k">public</span><span class=3D"o">:</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">__visibility__</span><span class=3D"p">(=
</span><span class=3D"s">"hidden"</span><span class=3D"p">)))</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">exclude_from_explicit_instantiation</spa=
n><span class=3D"p">))</span>
<span class=3D"w">  </span><span class=3D"k">const</span><span class=3D"w">=
 </span><span class=3D"n">value_type</span><span class=3D"o">*</span><span =
class=3D"w"> </span><span class=3D"n">data</span><span class=3D"p">()</span=
><span class=3D"w"> </span><span class=3D"k">const</span><span class=3D"w">=
 </span><span class=3D"k">noexcept</span><span class=3D"w"> </span><span cl=
ass=3D"p">{</span><span class=3D"w"> </span><span class=3D"p">...</span><sp=
an class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"p">};</span>

<span class=3D"k">template</span><span class=3D"w"> </span><span class=3D"k=
">class</span><span class=3D"w"> </span><span class=3D"nc">basic_string</sp=
an><span class=3D"o">&lt;</span><span class=3D"kt">char</span><span class=
=3D"o">&gt;</span><span class=3D"p">;</span>
</pre></div>
</div>
</div></blockquote>
<p>Now, the compiler won=E2=80=99t assume that <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">basic_string&lt;char&gt;::data()</span=
></code> is provided
externally despite there being an explicit template instantiation declarati=
on:
the compiler will implicitly instantiate <code class=3D"docutils literal no=
translate"><span class=3D"pre">basic_string&lt;char&gt;::data()</span></cod=
e> in the
TUs where it is used.</p>
<p>This attribute can be used on static and non-static member functions of =
class
templates, static data members of class templates and member classes of cla=
ss
templates.</p>
</section>
<section id=3D"export-name">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id591" role=3D"doc-backlink">export_name</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#export-n=
ame" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id169">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
69" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">export_name</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::export_name</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::export_name</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((export_name(&lt;name&gt;)))</span></code>
attribute for the WebAssembly target. This attribute may be attached to a
function declaration, where it modifies how the symbol is to be exported
from the linked WebAssembly.</p>
<p>WebAssembly functions are exported via string name. By default when a sy=
mbol
is exported, the export name for C/C++ symbols are the same as their C/C++
symbol names. This attribute can be used to override the default behavior, =
and
request a specific string name be used instead.</p>
</section>
<section id=3D"flatten">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id592" role=3D"doc-backlink">flatten</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#flatten" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id170">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
70" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">flatten</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::flatten</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::flatten</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">fla=
tten</span></code> attribute causes calls within the attributed function to
be inlined unless it is impossible to do so, for example if the body of the
callee is unavailable or if the callee has the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">noinline</span></code> attribute.</p>
</section>
<section id=3D"force-align-arg-pointer">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id593" role=3D"doc-backlink">force_align_arg_pointer</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#force-align-arg-pointer" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id171">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
71" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">force_align_arg_pointer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::force_align_arg_pointer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::force_align_arg_pointer</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Use this attribute to force stack alignment.</p>
<p>Legacy x86 code uses 4-byte stack alignment. Newer aligned SSE instructi=
ons
(like =E2=80=98movaps=E2=80=99) that work with the stack require operands t=
o be 16-byte aligned.
This attribute realigns the stack in the function prologue to make sure the
stack can be used with SSE instructions.</p>
<p>Note that the x86_64 ABI forces 16-byte stack alignment at the call site=
.
Because of this, =E2=80=98force_align_arg_pointer=E2=80=99 is not needed on=
 x86_64, except in
rare cases where the caller does not align the stack properly (e.g. flow
jumps from i386 arch code).</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">__attribute__</span><span class=3D"w"> </span=
><span class=3D"p">((</span><span class=3D"n">force_align_arg_pointer</span=
><span class=3D"p">))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
</span><span class=3D"w"> </span><span class=3D"p">()</span><span class=3D"=
w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"format">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id594" role=3D"doc-backlink">format</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#format" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id172">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
72" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">format</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::format</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::format</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">format</span></code> attribute, which indicates that the functi=
on
accepts (among other possibilities) a <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">printf</span></code> or <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">scanf</span></code>-like format s=
tring
and corresponding arguments or a <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">va_list</span></code> that contains these arguments.=
</p>
<p>Please see <a class=3D"reference external" href=3D"http://gcc.gnu.org/on=
linedocs/gcc/Function-Attributes.html">GCC documentation about format attri=
bute</a> to find details
about attribute syntax.</p>
<p>Clang implements two kinds of checks with this attribute.</p>
<ol class=3D"arabic">
<li><p>Clang checks that the function with the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">format</span></code> attribute is call=
ed with
a format string that uses format specifiers that are allowed, and that
arguments match the format string. This is the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">-Wformat</span></code> warning, it is
on by default.</p></li>
<li><p>Clang checks that the format string argument is a literal string. Th=
is is
the <code class=3D"docutils literal notranslate"><span class=3D"pre">-Wform=
at-nonliteral</span></code> warning, it is off by default.</p>
<p>Clang implements this mostly the same way as GCC, but there is a differe=
nce
for functions that accept a <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">va_list</span></code> argument (for example, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">vprintf</span></code>=
).
GCC does not emit <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-Wformat-nonliteral</span></code> warning for calls to such
functions. Clang does not warn if the format string comes from a function
parameter, where the function is annotated with a compatible attribute,
otherwise it warns. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><sp=
an class=3D"n">__format__</span><span class=3D"w"> </span><span class=3D"p"=
>(</span><span class=3D"n">__scanf__</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"mi">3</span><span class=3D"p">)))</s=
pan>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
oo</span><span class=3D"p">(</span><span class=3D"k">const</span><span clas=
s=3D"w"> </span><span class=3D"kt">char</span><span class=3D"o">*</span><sp=
an class=3D"w"> </span><span class=3D"n">s</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"kt">char</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">buf</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"p">...)</span><span cl=
ass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">va_list</span><span class=3D"=
w"> </span><span class=3D"n">ap</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">va_start</span><span class=3D"=
p">(</span><span class=3D"n">ap</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">buf</span><span class=3D"p">);</span>

<span class=3D"w">  </span><span class=3D"n">vprintf</span><span class=3D"p=
">(</span><span class=3D"n">s</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">ap</span><span class=3D"p">);</span><span =
class=3D"w"> </span><span class=3D"c1">// warning: format string is not a s=
tring literal</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this case we warn because <code class=3D"docutils literal notranslate=
"><span class=3D"pre">s</span></code> contains a format string for a
<code class=3D"docutils literal notranslate"><span class=3D"pre">scanf</spa=
n></code>-like function, but it is passed to a <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">printf</span></code>-like function.</p=
>
<p>If the attribute is removed, clang still warns, because the format strin=
g is
not a string literal.</p>
<p>Another example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><sp=
an class=3D"n">__format__</span><span class=3D"w"> </span><span class=3D"p"=
>(</span><span class=3D"n">__printf__</span><span class=3D"p">,</span><span=
 class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"mi">3</span><span class=3D"p">)))</=
span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
oo</span><span class=3D"p">(</span><span class=3D"k">const</span><span clas=
s=3D"w"> </span><span class=3D"kt">char</span><span class=3D"o">*</span><sp=
an class=3D"w"> </span><span class=3D"n">s</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"kt">char</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">buf</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"p">...)</span><span cl=
ass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">va_list</span><span class=3D"=
w"> </span><span class=3D"n">ap</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">va_start</span><span class=3D"=
p">(</span><span class=3D"n">ap</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">buf</span><span class=3D"p">);</span>

<span class=3D"w">  </span><span class=3D"n">vprintf</span><span class=3D"p=
">(</span><span class=3D"n">s</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">ap</span><span class=3D"p">);</span><span =
class=3D"w"> </span><span class=3D"c1">// warning</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this case Clang does not warn because the format string <code class=
=3D"docutils literal notranslate"><span class=3D"pre">s</span></code> and
the corresponding arguments are annotated. If the arguments are
incorrect, the caller of <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">foo</span></code> will receive a warning.</p>
</li>
</ol>
<p>As an extension to GCC=E2=80=99s behavior, Clang accepts the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">format</span></code> =
attribute on
non-variadic functions. Clang checks non-variadic format functions for the =
same
classes of issues that can be found on variadic functions, as controlled by=
 the
same warning flags, except that the types of formatted arguments is forced =
by
the function signature. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><sp=
an class=3D"n">__format__</span><span class=3D"p">(</span><span class=3D"n"=
>__printf__</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"mi">2</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
mt</span><span class=3D"p">(</span><span class=3D"k">const</span><span clas=
s=3D"w"> </span><span class=3D"kt">char</span><span class=3D"w"> </span><sp=
an class=3D"o">*</span><span class=3D"n">s</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"k">const</span><span class=3D"w"> =
</span><span class=3D"kt">char</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">a</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </span><s=
pan class=3D"n">b</span><span class=3D"p">);</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
bar</span><span class=3D"p">(</span><span class=3D"kt">void</span><span cla=
ss=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">fmt</span><span class=3D"p">(<=
/span><span class=3D"s">"%s %i"</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"s">"hello"</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"mi">123</span><span class=3D"p">);</=
span><span class=3D"w"> </span><span class=3D"c1">// OK</span>
<span class=3D"w">  </span><span class=3D"n">fmt</span><span class=3D"p">(<=
/span><span class=3D"s">"%i %g"</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"s">"hello"</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"mi">123</span><span class=3D"p">);</=
span><span class=3D"w"> </span><span class=3D"c1">// warning: arguments don=
't match format</span>
<span class=3D"w">  </span><span class=3D"k">extern</span><span class=3D"w"=
> </span><span class=3D"k">const</span><span class=3D"w"> </span><span clas=
s=3D"kt">char</span><span class=3D"w"> </span><span class=3D"o">*</span><sp=
an class=3D"n">fmt</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">fmt</span><span class=3D"p">(<=
/span><span class=3D"n">fmt</span><span class=3D"p">,</span><span class=3D"=
w"> </span><span class=3D"s">"hello"</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"mi">123</span><span class=3D"p">);</span=
><span class=3D"w"> </span><span class=3D"c1">// warning: format string is =
not a string literal</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>When using the format attribute on a variadic function, the first data p=
arameter
_must_ be the index of the ellipsis in the parameter list. Clang will gener=
ate
a diagnostic otherwise, as it wouldn=E2=80=99t be possible to forward that =
argument list
to <cite>printf</cite>-family functions. For instance, this is an error:</p=
>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><sp=
an class=3D"n">__format__</span><span class=3D"p">(</span><span class=3D"n"=
>__printf__</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"mi">2</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
mt</span><span class=3D"p">(</span><span class=3D"k">const</span><span clas=
s=3D"w"> </span><span class=3D"kt">char</span><span class=3D"w"> </span><sp=
an class=3D"o">*</span><span class=3D"n">s</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> <=
/span><span class=3D"n">b</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"p">...);</span>
<span class=3D"c1">// ^ error: format attribute parameter 3 is out of bound=
s</span>
<span class=3D"c1">// (must be __printf__, 1, 3)</span>
</pre></div>
</div>
<p>Using the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">format</span></code> attribute on a non-variadic function emits a GCC
compatibility diagnostic.</p>
</section>
<section id=3D"function-return">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id595" role=3D"doc-backlink">function_return</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#func=
tion-return" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id173">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
73" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">function_return</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::function_return</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::function_return</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">function_return</span></code> can replace return instructions with=
 jumps to
target-specific symbols. This attribute supports 2 possible values,
corresponding to the values supported by the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">-mfunction-return=3D</span></code> comma=
nd
line flag:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((function_return("keep")))</span></code> to disable related tran=
sforms.
This is useful for undoing global setting from <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">-mfunction-return=3D</span></code> loc=
ally
for individual functions.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((function_return("thunk-extern")))</span></code> to replace retu=
rns with
jumps, while NOT emitting the thunk.</p></li>
</ul>
<p>The values <code class=3D"docutils literal notranslate"><span class=3D"p=
re">thunk</span></code> and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">thunk-inline</span></code> from GCC are not supported.</p=
>
<p>The symbol used for <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">thunk-extern</span></code> is target specific:
* X86: <code class=3D"docutils literal notranslate"><span class=3D"pre">__x=
86_return_thunk</span></code></p>
<p>As such, this function attribute is currently only supported on X86 targ=
ets.</p>
</section>
<section id=3D"gnu-inline">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id596" role=3D"doc-backlink">gnu_inline</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#gnu-inlin=
e" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id174">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
74" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">gnu_inline</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::gnu_inline</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::gnu_inline</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
_inline</span></code> changes the meaning of <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">extern</span> <span class=3D"pre">inline=
</span></code> to use GNU inline
semantics, meaning:</p>
<ul class=3D"simple">
<li><p>If any declaration that is declared <code class=3D"docutils literal =
notranslate"><span class=3D"pre">inline</span></code> is not declared <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">extern</span></=
code>,
then the <code class=3D"docutils literal notranslate"><span class=3D"pre">i=
nline</span></code> keyword is just a hint. In particular, an out-of-line
definition is still emitted for a function with external linkage, even if a=
ll
call sites are inlined, unlike in C99 and C++ inline semantics.</p></li>
<li><p>If all declarations that are declared <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">inline</span></code> are also declared
<code class=3D"docutils literal notranslate"><span class=3D"pre">extern</sp=
an></code>, then the function body is present only for inlining and no
out-of-line version is emitted.</p></li>
</ul>
<p>Some important consequences: <code class=3D"docutils literal notranslate=
"><span class=3D"pre">static</span> <span class=3D"pre">inline</span></code=
> emits an out-of-line
version if needed, a plain <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">inline</span></code> definition emits an out-of-line versi=
on
always, and an <code class=3D"docutils literal notranslate"><span class=3D"=
pre">extern</span> <span class=3D"pre">inline</span></code> definition (in =
a header) followed by a
(non-<code class=3D"docutils literal notranslate"><span class=3D"pre">exter=
n</span></code>) <code class=3D"docutils literal notranslate"><span class=
=3D"pre">inline</span></code> declaration in a source file emits an out-of-=
line
version of the function in that source file but provides the function body =
for
inlining to all includers of the header.</p>
<p>Either <code class=3D"docutils literal notranslate"><span class=3D"pre">=
__GNUC_GNU_INLINE__</span></code> (GNU inline semantics) or
<code class=3D"docutils literal notranslate"><span class=3D"pre">__GNUC_STD=
C_INLINE__</span></code> (C99 semantics) will be defined (they are mutually
exclusive). If <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__GNUC_STDC_INLINE__</span></code> is defined, then the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">gnu_inline</span></code>
function attribute can be used to get GNU inline semantics on a per functio=
n
basis. If <code class=3D"docutils literal notranslate"><span class=3D"pre">=
__GNUC_GNU_INLINE__</span></code> is defined, then the translation unit is
already being compiled with GNU inline semantics as the implied default. It=
 is
unspecified which macro is defined in a C++ compilation.</p>
<p>GNU inline semantics are the default behavior with <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">-std=3Dgnu89</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">-std=3Dc89=
</span></code>, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">-std=3Dc94</span></code>, or <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">-fgnu89-inline</span></code>.</p>
</section>
<section id=3D"guard">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id597" role=3D"doc-backlink">guard</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#guard" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id175">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
75" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">guard</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::guard</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::guard</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gua=
rd</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Code can indicate CFG checks are not wanted with the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">__declspec(guard(nocf))</span=
></code>
attribute. This directs the compiler to not insert any CFG checks for the e=
ntire
function. This approach is typically used only sparingly in specific situat=
ions
where the programmer has manually inserted =E2=80=9CCFG-equivalent=E2=80=9D=
 protection. The
programmer knows that they are calling through some read-only function tabl=
e
whose address is obtained through read-only memory references and for which=
 the
index is masked to the function table limit. This approach may also be appl=
ied
to small wrapper functions that are not inlined and that do nothing more th=
an
make a call through a function pointer. Since incorrect usage of this direc=
tive
can compromise the security of CFG, the programmer must be very careful usi=
ng
the directive. Typically, this usage is limited to very small functions tha=
t
only call one function.</p>
<p><cite>Control Flow Guard documentation &lt;https://docs.microsoft.com/en=
-us/windows/win32/secbp/pe-metadata&gt;</cite></p>
</section>
<section id=3D"hot">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id598" role=3D"doc-backlink">hot</a><a class=3D"headerlink" h=
ref=3D"https://clang.llvm.org/docs/AttributeReference.html#hot" title=3D"Li=
nk to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id176">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
76" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">hot</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::hot</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::hot</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((hot))</span></code> marks a function as hot, as a manual alternativ=
e to PGO hotness data.
If PGO data is available, the annotation <code class=3D"docutils literal no=
translate"><span class=3D"pre">__attribute__((hot))</span></code> overrides=
 the profile count based hotness (unlike <code class=3D"docutils literal no=
translate"><span class=3D"pre">__attribute__((cold))</span></code>).</p>
</section>
<section id=3D"hybrid-patchable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id599" role=3D"doc-backlink">hybrid_patchable</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#hyb=
rid-patchable" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id177">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
77" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">hybrid_patchable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::hybrid_patchable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::hybrid_patchable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">hyb=
rid_patchable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">hyb=
rid_patchable</span></code> attribute declares an ARM64EC function with an =
additional
x86-64 thunk, which may be patched at runtime.</p>
<p>For more information see
<a class=3D"reference external" href=3D"https://learn.microsoft.com/en-us/w=
indows/arm/arm64ec-abi">ARM64EC ABI documentation</a>.</p>
</section>
<section id=3D"ifunc">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id600" role=3D"doc-backlink">ifunc</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#ifunc" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id178">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
78" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ifunc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::ifunc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::ifunc</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((ifunc("resolver")))</span></code> is used to mark that the address =
of a
declaration should be resolved at runtime by calling a resolver function.</=
p>
<p>The symbol name of the resolver function is given in quotes. A function =
with
this name (after mangling) must be defined in the current translation unit;=
 it
may be <code class=3D"docutils literal notranslate"><span class=3D"pre">sta=
tic</span></code>. The resolver function should return a pointer.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ifu=
nc</span></code> attribute may only be used on a function declaration. A fu=
nction
declaration with an <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">ifunc</span></code> attribute is considered to be a definition of=
 the
declared entity. The entity must not have weak linkage; for example, in C++=
,
it cannot be applied to a declaration if a definition at that location woul=
d be
considered inline.</p>
<p>Not all targets support this attribute:</p>
<ul class=3D"simple">
<li><p>ELF target support depends on both the linker and runtime linker, an=
d is
available in at least lld 4.0 and later, binutils 2.20.1 and later, glibc
v2.11.1 and later, and FreeBSD 9.1 and later.</p></li>
<li><p>Mach-O targets support it, but with slightly different semantics: th=
e resolver
is run at first call, instead of at load time by the runtime linker.</p></l=
i>
<li><p>Windows target supports it on AArch64, but with different semantics:=
 the
<code class=3D"docutils literal notranslate"><span class=3D"pre">ifunc</spa=
n></code> is replaced with a global function pointer, and the call is repla=
ced
with an indirect call. The function pointer is initialized by a constructor
that calls the resolver.</p></li>
<li><p>Baremetal target supports it on AVR.</p></li>
<li><p>Other targets currently do not support this attribute.</p></li>
</ul>
</section>
<section id=3D"import-module">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id601" role=3D"doc-backlink">import_module</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#import=
-module" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id179">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
79" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">import_module</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::import_module</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::import_module</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((import_module(&lt;module_name&gt;)))</span></cod=
e>
attribute for the WebAssembly target. This attribute may be attached to a
function declaration, where it modifies how the symbol is to be imported
within the WebAssembly linking environment.</p>
<p>WebAssembly imports use a two-level namespace scheme, consisting of a mo=
dule
name, which typically identifies a module from which to import, and a field
name, which typically identifies a field from that module to import. By
default, module names for C/C++ symbols are assigned automatically by the
linker. This attribute can be used to override the default behavior, and
request a specific module name be used instead.</p>
</section>
<section id=3D"import-name">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id602" role=3D"doc-backlink">import_name</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#import-n=
ame" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id180">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
80" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">import_name</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::import_name</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::import_name</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((import_name(&lt;name&gt;)))</span></code>
attribute for the WebAssembly target. This attribute may be attached to a
function declaration, where it modifies how the symbol is to be imported
within the WebAssembly linking environment.</p>
<p>WebAssembly imports use a two-level namespace scheme, consisting of a mo=
dule
name, which typically identifies a module from which to import, and a field
name, which typically identifies a field from that module to import. By
default, field names for C/C++ symbols are the same as their C/C++ symbol
names. This attribute can be used to override the default behavior, and
request a specific field name be used instead.</p>
</section>
<section id=3D"internal-linkage">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id603" role=3D"doc-backlink">internal_linkage</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#int=
ernal-linkage" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id181">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
81" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">internal_linkage</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::internal_linkage</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::internal_linkage</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">int=
ernal_linkage</span></code> attribute changes the linkage type of the decla=
ration
to internal. This is similar to C-style <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">static</span></code>, but can be used on clas=
ses
and class methods. When applied to a class definition, this attribute affec=
ts
all methods and static data members of that class. This can be used to cont=
ain
the ABI of a C++ library by excluding unwanted class methods from the expor=
t
tables.</p>
</section>
<section id=3D"interrupt-arm">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id604" role=3D"doc-backlink">interrupt (ARM)</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#inte=
rrupt-arm" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id182">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
82" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((interrupt("TYPE")))</span></code> attr=
ibute on
ARM targets. This attribute may be attached to a function definition and
instructs the backend to generate appropriate function entry/exit code so t=
hat
it can be used directly as an interrupt service routine.</p>
<p>The parameter passed to the interrupt attribute is optional, but if
provided it must be a string literal with one of the following values: =E2=
=80=9CIRQ=E2=80=9D,
=E2=80=9CFIQ=E2=80=9D, =E2=80=9CSWI=E2=80=9D, =E2=80=9CABORT=E2=80=9D, =E2=
=80=9CUNDEF=E2=80=9D.</p>
<p>The semantics are as follows:</p>
<ul>
<li><p>If the function is AAPCS, Clang instructs the backend to realign the=
 stack to
8 bytes on entry. This is a general requirement of the AAPCS at public
interfaces, but may not hold when an exception is taken. Doing this allows
other AAPCS functions to be called.</p></li>
<li><p>If the CPU is M-class this is all that needs to be done since the ar=
chitecture
itself is designed in such a way that functions obeying the normal AAPCS AB=
I
constraints are valid exception handlers.</p></li>
<li><p>If the CPU is not M-class, the prologue and epilogue are modified to=
 save all
non-banked registers that are used, so that upon return the user-mode state
will not be corrupted. Note that to avoid unnecessary overhead, only
general-purpose (integer) registers are saved in this way. If VFP operation=
s
are needed, that state must be saved manually.</p>
<p>Specifically, interrupt kinds other than =E2=80=9CFIQ=E2=80=9D will save=
 all core registers
except =E2=80=9Clr=E2=80=9D and =E2=80=9Csp=E2=80=9D. =E2=80=9CFIQ=E2=80=9D=
 interrupts will save r0-r7.</p>
</li>
<li><p>If the CPU is not M-class, the return instruction is changed to one =
of the
canonical sequences permitted by the architecture for exception return. Whe=
re
possible the function itself will make the necessary =E2=80=9Clr=E2=80=9D a=
djustments so that
the =E2=80=9Cpreferred return address=E2=80=9D is selected.</p>
<p>Unfortunately the compiler is unable to make this guarantee for an =E2=
=80=9CUNDEF=E2=80=9D
handler, where the offset from =E2=80=9Clr=E2=80=9D to the preferred return=
 address depends on
the execution state of the code which generated the exception. In this case
a sequence equivalent to =E2=80=9Cmovs pc, lr=E2=80=9D will be used.</p>
</li>
</ul>
</section>
<section id=3D"interrupt-avr">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id605" role=3D"doc-backlink">interrupt (AVR)</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#inte=
rrupt-avr" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id183">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
83" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((interrupt))</span></code> attribute on
AVR targets. This attribute may be attached to a function definition and in=
structs
the backend to generate appropriate function entry/exit code so that it can=
 be used
directly as an interrupt service routine.</p>
<p>On the AVR, the hardware globally disables interrupts when an interrupt =
is executed.
The first instruction of an interrupt handler declared with this attribute =
is a SEI
instruction to re-enable interrupts. See also the signal attribute that
does not insert a SEI instruction.</p>
</section>
<section id=3D"interrupt-mips">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id606" role=3D"doc-backlink">interrupt (MIPS)</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#int=
errupt-mips" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id184">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
84" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((interrupt("ARGUMENT")))</span></code> =
attribute on
MIPS targets. This attribute may be attached to a function definition and i=
nstructs
the backend to generate appropriate function entry/exit code so that it can=
 be used
directly as an interrupt service routine.</p>
<p>By default, the compiler will produce a function prologue and epilogue s=
uitable for
an interrupt service routine that handles an External Interrupt Controller =
(eic)
generated interrupt. This behavior can be explicitly requested with the =E2=
=80=9Ceic=E2=80=9D
argument.</p>
<p>Otherwise, for use with vectored interrupt mode, the argument passed sho=
uld be
of the form =E2=80=9Cvector=3DLEVEL=E2=80=9D where LEVEL is one of the foll=
owing values:
=E2=80=9Csw0=E2=80=9D, =E2=80=9Csw1=E2=80=9D, =E2=80=9Chw0=E2=80=9D, =E2=80=
=9Chw1=E2=80=9D, =E2=80=9Chw2=E2=80=9D, =E2=80=9Chw3=E2=80=9D, =E2=80=9Chw4=
=E2=80=9D, =E2=80=9Chw5=E2=80=9D. The compiler will
then set the interrupt mask to the corresponding level which will mask all
interrupts up to and including the argument.</p>
<p>The semantics are as follows:</p>
<ul class=3D"simple">
<li><p>The prologue is modified so that the Exception Program Counter (EPC)=
 and
Status coprocessor registers are saved to the stack. The interrupt mask is
set so that the function can only be interrupted by a higher priority
interrupt. The epilogue will restore the previous values of EPC and Status.=
</p></li>
<li><p>The prologue and epilogue are modified to save and restore all non-k=
ernel
registers as necessary.</p></li>
<li><p>The FPU is disabled in the prologue, as the floating pointer registe=
rs are not
spilled to the stack.</p></li>
<li><p>The function return sequence is changed to use an exception return i=
nstruction.</p></li>
<li><p>The parameter sets the interrupt mask for the function corresponding=
 to the
interrupt level specified. If no mask is specified the interrupt mask
defaults to =E2=80=9Ceic=E2=80=9D.</p></li>
</ul>
</section>
<section id=3D"interrupt-risc-v">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id607" role=3D"doc-backlink">interrupt (RISC-V)</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#interrupt-risc-v" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id185">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
85" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((interrupt))</span></code> attribute on=
 RISCV
targets. This attribute may be attached to a function definition and instru=
cts
the backend to generate appropriate function entry/exit code so that it can=
 be
used directly as an interrupt service routine.</p>
<p>Permissible values for this parameter are <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">user</span></code>, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">supervisor</span></code>,
and <code class=3D"docutils literal notranslate"><span class=3D"pre">machin=
e</span></code>. If there is no parameter, then it defaults to machine.</p>
<p>Repeated interrupt attribute on the same declaration will cause a warnin=
g
to be emitted. In case of repeated declarations, the last one prevails.</p>
<p>Refer to:
<a class=3D"reference external" href=3D"https://gcc.gnu.org/onlinedocs/gcc/=
RISC-V-Function-Attributes.html">https://gcc.gnu.org/onlinedocs/gcc/RISC-V-=
Function-Attributes.html</a>
<a class=3D"reference external" href=3D"https://riscv.org/specifications/pr=
ivileged-isa/">https://riscv.org/specifications/privileged-isa/</a>
The RISC-V Instruction Set Manual Volume II: Privileged Architecture
Version 1.10.</p>
</section>
<section id=3D"interrupt-x86">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id608" role=3D"doc-backlink">interrupt (X86)</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#inte=
rrupt-x86" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id186">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
86" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((interrupt))</span></code> attribute on=
 X86
targets. This attribute may be attached to a function definition and instru=
cts
the backend to generate appropriate function entry/exit code so that it can=
 be
used directly as an interrupt service routine.</p>
<p>Interrupt handlers have access to the stack frame pushed onto the stack =
by the processor,
and return using the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">IRET</span></code> instruction. All registers in an interrupt ha=
ndler are callee-saved.
Exception handlers also have access to the error code pushed onto the stack=
 by the processor,
when applicable.</p>
<p>An interrupt handler must take the following arguments:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">__attribute__</span><span class=3D"w"> </span=
><span class=3D"p">((</span><span class=3D"n">interrupt</span><span class=
=3D"p">))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"k=
">struct</span><span class=3D"w"> </span><span class=3D"nc">stack_frame</sp=
an><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">fr=
ame</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Where <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
truct</span> <span class=3D"pre">stack_frame</span></code> is a suitable st=
ruct matching the stack frame pushed by the
processor.</p>
</div></blockquote>
<p>An exception handler must take the following arguments:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">__attribute__</span><span class=3D"w"> </span=
><span class=3D"p">((</span><span class=3D"n">interrupt</span><span class=
=3D"p">))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">g=
</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"k=
">struct</span><span class=3D"w"> </span><span class=3D"nc">stack_frame</sp=
an><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">fr=
ame</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"kt">unsigned</span><span class=3D"w"> </span><span class=3D"kt">long</s=
pan><span class=3D"w"> </span><span class=3D"n">code</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>On 32-bit targets, the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">code</span></code> argument should be of type <code class=
=3D"docutils literal notranslate"><span class=3D"pre">unsigned</span> <span=
 class=3D"pre">int</span></code>.</p>
</div></blockquote>
<p>Exception handlers should only be used when an error code is pushed by t=
he processor.
Using the incorrect handler type will crash the system.</p>
<p>Interrupt and exception handlers cannot be called by other functions and=
 must have return type <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">void</span></code>.</p>
<p>Interrupt and exception handlers should only call functions with the =E2=
=80=98no_caller_saved_registers=E2=80=99
attribute, or should be compiled with the =E2=80=98-mgeneral-regs-only=E2=
=80=99 flag to avoid saving unused
non-GPR registers.</p>
</section>
<section id=3D"lifetime-capture-by">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id609" role=3D"doc-backlink">lifetime_capture_by</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#lifetime-capture-by" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id187">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
87" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">lifetime_capture_by</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::lifetime_capture_by</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Similar to <a class=3D"reference external" href=3D"https://clang.llvm.or=
g/docs/AttributeReference.html#lifetimebound">lifetimebound</a>, the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">lifetime_capture=
_by(X)</span></code> attribute on a
function parameter or implicit object parameter indicates that the capturin=
g
entity <code class=3D"docutils literal notranslate"><span class=3D"pre">X</=
span></code> may refer to the object referred by that parameter.</p>
<p>Below is a list of types of the parameters and what they=E2=80=99re cons=
idered to refer to:</p>
<ul class=3D"simple">
<li><p>A reference param (of non-view type) is considered to refer to its r=
eferenced object.</p></li>
<li><p>A pointer param (of non-view type) is considered to refer to its poi=
ntee.</p></li>
<li><p>View type param (type annotated with <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">[[gsl::Pointer()]]</span></code>) is cons=
idered to refer
to its pointee (gsl owner). This holds true even if the view type appears a=
s a reference
in the parameter. For example, both <code class=3D"docutils literal notrans=
late"><span class=3D"pre">std::string_view</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">const</spa=
n> <span class=3D"pre">std::string_view</span> <span class=3D"pre">&amp;</s=
pan></code> are considered to refer to a <code class=3D"docutils literal no=
translate"><span class=3D"pre">std::string</span></code>.</p></li>
<li><p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
td::initializer_list&lt;T&gt;</span></code> is considered to refer to its u=
nderlying array.</p></li>
<li><p>Aggregates (arrays and simple <code class=3D"docutils literal notran=
slate"><span class=3D"pre">struct</span></code>s) are considered to refer t=
o all
objects that their transitive subobjects refer to.</p></li>
</ul>
<p>Clang would diagnose when a temporary object is used as an argument to s=
uch an
annotated parameter.
In this case, the capturing entity <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">X</span></code> could capture a dangling reference=
 to this
temporary object.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">addToSet</span><span class=3D"p">(</span><span class=3D"n">std</sp=
an><span class=3D"o">::</span><span class=3D"n">string_view</span><span cla=
ss=3D"w"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span =
class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</sp=
an><span class=3D"n">lifetime_capture_by</span><span class=3D"p">(</span><s=
pan class=3D"n">s</span><span class=3D"p">)]],</span><span class=3D"w"> </s=
pan><span class=3D"n">std</span><span class=3D"o">::</span><span class=3D"n=
">set</span><span class=3D"o">&lt;</span><span class=3D"n">std</span><span =
class=3D"o">::</span><span class=3D"n">string_view</span><span class=3D"o">=
&gt;&amp;</span><span class=3D"w"> </span><span class=3D"n">s</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">s</span><span class=3D"p">.</s=
pan><span class=3D"n">insert</span><span class=3D"p">(</span><span class=3D=
"n">a</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
use</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">set</span><span class=3D"o">&lt;</span><span class=
=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">string_view</=
span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span class=3D"=
n">s</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">addToSet</span><span class=3D"=
p">(</span><span class=3D"n">std</span><span class=3D"o">::</span><span cla=
ss=3D"n">string</span><span class=3D"p">(),</span><span class=3D"w"> </span=
><span class=3D"n">s</span><span class=3D"p">);</span><span class=3D"w"> </=
span><span class=3D"c1">// Warning: object whose reference is captured by '=
s' will be destroyed at the end of the full-expression.</span>
<span class=3D"w">  </span><span class=3D"c1">//       ^^^^^^^^^^^^^</span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">string</span><span class=3D"w"> </span><span class=
=3D"n">local</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">addToSet</span><span class=3D"=
p">(</span><span class=3D"n">local</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"n">s</span><span class=3D"p">);</span><spa=
n class=3D"w"> </span><span class=3D"c1">// Ok.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The capturing entity <code class=3D"docutils literal notranslate"><span =
class=3D"pre">X</span></code> can be one of the following:</p>
<ul>
<li><p>Another (named) function parameter.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">addToSet</span><span class=3D"p">(</span><span class=3D"n">std</sp=
an><span class=3D"o">::</span><span class=3D"n">string_view</span><span cla=
ss=3D"w"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span =
class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</sp=
an><span class=3D"n">lifetime_capture_by</span><span class=3D"p">(</span><s=
pan class=3D"n">s</span><span class=3D"p">)]],</span><span class=3D"w"> </s=
pan><span class=3D"n">std</span><span class=3D"o">::</span><span class=3D"n=
">set</span><span class=3D"o">&lt;</span><span class=3D"n">std</span><span =
class=3D"o">::</span><span class=3D"n">string_view</span><span class=3D"o">=
&gt;&amp;</span><span class=3D"w"> </span><span class=3D"n">s</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">s</span><span class=3D"p">.</s=
pan><span class=3D"n">insert</span><span class=3D"p">(</span><span class=3D=
"n">a</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">thi=
s</span></code> (in case of member functions).</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">class</span><span class=3D"w"> </span><span clas=
s=3D"nc">S</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"nf">addToSet</span><span class=3D"p">(</span><span c=
lass=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">string_vi=
ew</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=3D=
"w"> </span><span class=3D"p">[[</span><span class=3D"n">clang</span><span =
class=3D"o">::</span><span class=3D"n">lifetime_capture_by</span><span clas=
s=3D"p">(</span><span class=3D"k">this</span><span class=3D"p">)]])</span><=
span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">s</span><span class=3D"p">.<=
/span><span class=3D"n">insert</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">set</span><span class=3D"o">&lt;</span><span class=
=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">string_view</=
span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span class=3D"=
n">s</span><span class=3D"p">;</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>Note: When applied to a constructor parameter, <cite>[[clang::lifetime_c=
apture_by(this)]]</cite> is just an alias of <cite>[[clang::lifetimebound]]=
</cite>.</p>
</li>
<li><p><cite>global</cite>, <cite>unknown</cite>.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">std</span><span class=3D"o">::</span><span class=
=3D"n">set</span><span class=3D"o">&lt;</span><span class=3D"n">std</span><=
span class=3D"o">::</span><span class=3D"n">string_view</span><span class=
=3D"o">&gt;</span><span class=3D"w"> </span><span class=3D"n">s</span><span=
 class=3D"p">;</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
addToSet</span><span class=3D"p">(</span><span class=3D"n">std</span><span =
class=3D"o">::</span><span class=3D"n">string_view</span><span class=3D"w">=
 </span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"=
p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</span><span =
class=3D"n">lifetime_capture_by</span><span class=3D"p">(</span><span class=
=3D"n">global</span><span class=3D"p">)]])</span><span class=3D"w"> </span>=
<span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">s</span><span class=3D"p">.</s=
pan><span class=3D"n">insert</span><span class=3D"p">(</span><span class=3D=
"n">a</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
addSomewhere</span><span class=3D"p">(</span><span class=3D"n">std</span><s=
pan class=3D"o">::</span><span class=3D"n">string_view</span><span class=3D=
"w"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span class=
=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</span><s=
pan class=3D"n">lifetime_capture_by</span><span class=3D"p">(</span><span c=
lass=3D"n">unknown</span><span class=3D"p">)]]);</span>
</pre></div>
</div>
</li>
</ul>
<p>The attribute can be applied to the implicit <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">this</span></code> parameter of a mem=
ber
function by writing the attribute after the function type:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">S</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">const</span><span class=3D"w">=
 </span><span class=3D"kt">char</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"nf">data</span><span class=3D"p">(</span><spa=
n class=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">set</s=
pan><span class=3D"o">&lt;</span><span class=3D"n">S</span><span class=3D"o=
">*&gt;&amp;</span><span class=3D"w"> </span><span class=3D"n">s</span><spa=
n class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">[[</span>=
<span class=3D"n">clang</span><span class=3D"o">::</span><span class=3D"n">=
lifetime_capture_by</span><span class=3D"p">(</span><span class=3D"n">s</sp=
an><span class=3D"p">)]]</span><span class=3D"w"> </span><span class=3D"p">=
{</span>
<span class=3D"w">    </span><span class=3D"n">s</span><span class=3D"p">.<=
/span><span class=3D"n">insert</span><span class=3D"p">(</span><span class=
=3D"k">this</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>The attribute supports specifying more than one capturing entities:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">addToSets</span><span class=3D"p">(</span><span class=3D"n">std</s=
pan><span class=3D"o">::</span><span class=3D"n">string_view</span><span cl=
ass=3D"w"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span=
 class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</s=
pan><span class=3D"n">lifetime_capture_by</span><span class=3D"p">(</span><=
span class=3D"n">s1</span><span class=3D"p">,</span><span class=3D"w"> </sp=
an><span class=3D"n">s2</span><span class=3D"p">)]],</span>
<span class=3D"w">               </span><span class=3D"n">std</span><span c=
lass=3D"o">::</span><span class=3D"n">set</span><span class=3D"o">&lt;</spa=
n><span class=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">=
string_view</span><span class=3D"o">&gt;&amp;</span><span class=3D"w"> </sp=
an><span class=3D"n">s1</span><span class=3D"p">,</span>
<span class=3D"w">               </span><span class=3D"n">std</span><span c=
lass=3D"o">::</span><span class=3D"n">set</span><span class=3D"o">&lt;</spa=
n><span class=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">=
string_view</span><span class=3D"o">&gt;&amp;</span><span class=3D"w"> </sp=
an><span class=3D"n">s2</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">s1</span><span class=3D"p">.</=
span><span class=3D"n">insert</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">s2</span><span class=3D"p">.</=
span><span class=3D"n">insert</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Limitation: The capturing entity <code class=3D"docutils literal notrans=
late"><span class=3D"pre">X</span></code> is not used by the analysis and i=
s
used for documentation purposes only. This is because the analysis is
statement-local and only detects use of a temporary as an argument to the
annotated parameter.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">addToSet</span><span class=3D"p">(</span><span class=3D"n">std</sp=
an><span class=3D"o">::</span><span class=3D"n">string_view</span><span cla=
ss=3D"w"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span =
class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</sp=
an><span class=3D"n">lifetime_capture_by</span><span class=3D"p">(</span><s=
pan class=3D"n">s</span><span class=3D"p">)]],</span><span class=3D"w"> </s=
pan><span class=3D"n">std</span><span class=3D"o">::</span><span class=3D"n=
">set</span><span class=3D"o">&lt;</span><span class=3D"n">std</span><span =
class=3D"o">::</span><span class=3D"n">string_view</span><span class=3D"o">=
&gt;&amp;</span><span class=3D"w"> </span><span class=3D"n">s</span><span c=
lass=3D"p">);</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
use</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">set</span><span class=3D"o">&lt;</span><span class=
=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">string_view</=
span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span class=3D"=
n">s</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">foo</span><span class=3D"p=
">())</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">std</span><span class=3D"o">=
::</span><span class=3D"n">string</span><span class=3D"w"> </span><span cla=
ss=3D"n">str</span><span class=3D"p">;</span>
<span class=3D"w">    </span><span class=3D"n">addToSet</span><span class=
=3D"p">(</span><span class=3D"n">str</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">s</span><span class=3D"p">);</span><s=
pan class=3D"w"> </span><span class=3D"c1">// Not detected.</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"id11">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id610" role=3D"doc-backlink">lifetimebound</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id11" =
title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id188">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
88" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">lifetimebound</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::lifetimebound</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">lif=
etimebound</span></code> attribute on a function parameter or implicit obje=
ct
parameter indicates that objects that are referred to by that parameter may
also be referred to by the return value of the annotated function (or, for =
a
parameter of a constructor, by the value of the constructed object).</p>
<p>By default, a reference is considered to refer to its referenced object,=
 a
pointer is considered to refer to its pointee, a <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">std::initializer_list&lt;T&gt;</span=
></code>
is considered to refer to its underlying array, and aggregates (arrays and
simple <code class=3D"docutils literal notranslate"><span class=3D"pre">str=
uct</span></code>s) are considered to refer to all objects that their
transitive subobjects refer to.</p>
<p>Clang warns if it is able to detect that an object or reference refers t=
o
another object with a shorter lifetime. For example, Clang will warn if a
function returns a reference to a local variable, or if a reference is boun=
d to
a temporary object whose lifetime is not extended. By using the
<code class=3D"docutils literal notranslate"><span class=3D"pre">lifetimebo=
und</span></code> attribute, this determination can be extended to look thr=
ough
user-declared functions. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">#include</span><span class=3D"w"> </span><span =
class=3D"cpf">&lt;map&gt;</span>
<span class=3D"cp">#include</span><span class=3D"w"> </span><span class=3D"=
cpf">&lt;string&gt;</span>

<span class=3D"k">using</span><span class=3D"w"> </span><span class=3D"k">n=
amespace</span><span class=3D"w"> </span><span class=3D"nn">std</span><span=
 class=3D"o">::</span><span class=3D"nn">literals</span><span class=3D"p">;=
</span>

<span class=3D"c1">// Returns m[key] if key is present, or default_value if=
 not.</span>
<span class=3D"k">template</span><span class=3D"o">&lt;</span><span class=
=3D"k">typename</span><span class=3D"w"> </span><span class=3D"nc">T</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">typen=
ame</span><span class=3D"w"> </span><span class=3D"nc">U</span><span class=
=3D"o">&gt;</span>
<span class=3D"k">const</span><span class=3D"w"> </span><span class=3D"n">U=
</span><span class=3D"w"> </span><span class=3D"o">&amp;</span><span class=
=3D"n">get_or_default</span><span class=3D"p">(</span><span class=3D"k">con=
st</span><span class=3D"w"> </span><span class=3D"n">std</span><span class=
=3D"o">::</span><span class=3D"n">map</span><span class=3D"o">&lt;</span><s=
pan class=3D"n">T</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">U</span><span class=3D"o">&gt;</span><span class=3D"w"> =
</span><span class=3D"o">&amp;</span><span class=3D"n">m</span><span class=
=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">clang</span><sp=
an class=3D"o">::</span><span class=3D"n">lifetimebound</span><span class=
=3D"p">]],</span>
<span class=3D"w">                        </span><span class=3D"k">const</s=
pan><span class=3D"w"> </span><span class=3D"n">T</span><span class=3D"w"> =
</span><span class=3D"o">&amp;</span><span class=3D"n">key</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"cm">/* note, not l=
ifetimebound */</span>
<span class=3D"w">                        </span><span class=3D"k">const</s=
pan><span class=3D"w"> </span><span class=3D"n">U</span><span class=3D"w"> =
</span><span class=3D"o">&amp;</span><span class=3D"n">default_value</span>=
<span class=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">clan=
g</span><span class=3D"o">::</span><span class=3D"n">lifetimebound</span><s=
pan class=3D"p">]])</span><span class=3D"w"> </span><span class=3D"p">{</sp=
an>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"k">auto</span><span class=3D"=
w"> </span><span class=3D"n">iter</span><span class=3D"w"> </span><span cla=
ss=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">m</span><spa=
n class=3D"p">.</span><span class=3D"n">find</span><span class=3D"p">(</spa=
n><span class=3D"n">key</span><span class=3D"p">);</span><span class=3D"w">=
 </span><span class=3D"n">iter</span><span class=3D"w"> </span><span class=
=3D"o">!=3D</span><span class=3D"w"> </span><span class=3D"n">m</span><span=
 class=3D"p">.</span><span class=3D"n">end</span><span class=3D"p">())</spa=
n><span class=3D"w"> </span><span class=3D"k">return</span><span class=3D"w=
"> </span><span class=3D"n">iter</span><span class=3D"o">-&gt;</span><span =
class=3D"n">second</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">else</span><span class=3D"w"> =
</span><span class=3D"k">return</span><span class=3D"w"> </span><span class=
=3D"n">default_value</span><span class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">ma=
in</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">map</span><span class=3D"o">&lt;</span><span class=
=3D"n">std</span><span class=3D"o">::</span><span class=3D"n">string</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">std</=
span><span class=3D"o">::</span><span class=3D"n">string</span><span class=
=3D"o">&gt;</span><span class=3D"w"> </span><span class=3D"n">m</span><span=
 class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"c1">// warning: temporary bound t=
o local reference 'val1' will be destroyed</span>
<span class=3D"w">  </span><span class=3D"c1">// at the end of the full-exp=
ression</span>
<span class=3D"w">  </span><span class=3D"k">const</span><span class=3D"w">=
 </span><span class=3D"n">std</span><span class=3D"o">::</span><span class=
=3D"n">string</span><span class=3D"w"> </span><span class=3D"o">&amp;</span=
><span class=3D"n">val1</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">get_or_default</span>=
<span class=3D"p">(</span><span class=3D"n">m</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"s">"foo"</span><span class=3D"n=
">s</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"s">"bar"</span><span class=3D"n">s</span><span class=3D"p">);</span>

<span class=3D"w">  </span><span class=3D"c1">// No warning in this case.</=
span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">string</span><span class=3D"w"> </span><span class=
=3D"n">def_val</span><span class=3D"w"> </span><span class=3D"o">=3D</span>=
<span class=3D"w"> </span><span class=3D"s">"bar"</span><span class=3D"n">s=
</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">const</span><span class=3D"w">=
 </span><span class=3D"n">std</span><span class=3D"o">::</span><span class=
=3D"n">string</span><span class=3D"w"> </span><span class=3D"o">&amp;</span=
><span class=3D"n">val2</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">get_or_default</span>=
<span class=3D"p">(</span><span class=3D"n">m</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"s">"foo"</span><span class=3D"n=
">s</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">def_val</span><span class=3D"p">);</span>

<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The attribute can be applied to the implicit <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">this</span></code> parameter of a mem=
ber
function by writing the attribute after the function type:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">string</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// The returned pointer shoul=
d not outlive ``*this``.</span>
<span class=3D"w">  </span><span class=3D"k">const</span><span class=3D"w">=
 </span><span class=3D"kt">char</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"nf">data</span><span class=3D"p">()</span><sp=
an class=3D"w"> </span><span class=3D"k">const</span><span class=3D"w"> </s=
pan><span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D=
"o">::</span><span class=3D"n">lifetimebound</span><span class=3D"p">]];</s=
pan>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>This attribute is inspired by the C++ committee paper <a class=3D"refere=
nce external" href=3D"http://wg21.link/p0936r0">P0936R0</a>, but does not a=
ffect whether temporary objects
have their lifetimes extended.</p>
</section>
<section id=3D"long-call-far">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id611" role=3D"doc-backlink">long_call, far</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#long-=
call-far" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id189">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
89" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">long_call</span></code> <br> <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">far</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::long_call</span></code> <br> <code class=3D"docutils literal notranslate"=
><span class=3D"pre">gnu::far</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::long_call</span></code> <br> <code class=3D"docutils literal notranslate"=
><span class=3D"pre">gnu::far</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((long_call))</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">__attribute__((far))</span></co=
de>,
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((near))</span></code> attributes on MIPS targets. These attributes =
may
only be added to function declarations and change the code generated
by the compiler when directly calling the function. The <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">near</span></code> attribute
allows calls to the function to be made using the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">jal</span></code> instruction, whic=
h
requires the function to be located in the same naturally aligned 256MB
segment as the caller. The <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">long_call</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">far</span></code> attributes are synonym=
s
and require the use of a different call sequence that works regardless
of the distance between the functions.</p>
<p>These attributes have no effect for position-independent code.</p>
<p>These attributes take priority over command line switches such
as <code class=3D"docutils literal notranslate"><span class=3D"pre">-mlong-=
calls</span></code> and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">-mno-long-calls</span></code>.</p>
</section>
<section id=3D"malloc">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id612" role=3D"doc-backlink">malloc</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#malloc" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id190">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
90" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">malloc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::malloc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::malloc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">res=
trict</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">mal=
loc</span></code> attribute indicates that the function acts like a system =
memory
allocation function, returning a pointer to allocated storage disjoint from=
 the
storage for any other object accessible to the caller.</p>
</section>
<section id=3D"micromips">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id613" role=3D"doc-backlink">micromips</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#micromips"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id191">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
91" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">micromips</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::micromips</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::micromips</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((micromips))</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((nomicromips))</span></code> attributes on MIPS targets. These attribut=
es
may be attached to a function definition and instructs the backend to gener=
ate
or not to generate microMIPS code for that function.</p>
<p>These attributes override the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-mmicromips</span></code> and <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">-mno-micromips</span></code> opt=
ions
on the command line.</p>
</section>
<section id=3D"mig-server-routine">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id614" role=3D"doc-backlink">mig_server_routine</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#mig-server-routine" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id192">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
92" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">mig_server_routine</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::mig_server_routine</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::mig_server_routine</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The Mach Interface Generator release-on-success convention dictates
functions that follow it to only release arguments passed to them when they
return =E2=80=9Csuccess=E2=80=9D (a <code class=3D"docutils literal notrans=
late"><span class=3D"pre">kern_return_t</span></code> error code that indic=
ates that
no errors have occurred). Otherwise the release is performed by the MIG cli=
ent
that called the function. The annotation <code class=3D"docutils literal no=
translate"><span class=3D"pre">__attribute__((mig_server_routine))</span></=
code>
is applied in order to specify which functions are expected to follow the
convention. This allows the Static Analyzer to find bugs caused by violatio=
ns of
that convention. The attribute would normally appear on the forward declara=
tion
of the actual server routine in the MIG server header, but it may also be
added to arbitrary functions that need to follow the same convention - for
example, a user can add them to auxiliary functions called by the server ro=
utine
that have their return value of type <code class=3D"docutils literal notran=
slate"><span class=3D"pre">kern_return_t</span></code> unconditionally retu=
rned
from the routine. The attribute can be applied to C++ methods, and in this =
case
it will be automatically applied to overrides if the method is virtual. The
attribute can also be written using C++11 syntax: <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">[[mig::server_routine]]</span></cod=
e>.</p>
</section>
<section id=3D"min-vector-width">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id615" role=3D"doc-backlink">min_vector_width</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#min=
-vector-width" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id193">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
93" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">min_vector_width</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::min_vector_width</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::min_vector_width</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((min_vector_width(width)))</span></code> attribut=
e. This
attribute may be attached to a function and informs the backend that this
function desires vectors of at least this width to be generated. Target-spe=
cific
maximum vector widths still apply. This means even if you ask for something
larger than the target supports, you will only get what the target supports=
.
This attribute is meant to be a hint to control target heuristics that may
generate narrower vectors than what the target hardware supports.</p>
<p>This is currently used by the X86 target to allow some CPUs that support=
 512-bit
vectors to be limited to using 256-bit vectors to avoid frequency penalties=
.
This is currently enabled with the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">-prefer-vector-width=3D256</span></code> command l=
ine
option. The <code class=3D"docutils literal notranslate"><span class=3D"pre=
">min_vector_width</span></code> attribute can be used to prevent the backe=
nd
from trying to split vector operations to match the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">prefer-vector-width</span></code>=
. All
X86 vector intrinsics from x86intrin.h already set this attribute. Addition=
ally,
use of any of the X86-specific vector builtins will implicitly set this
attribute on the calling function. The intent is that explicitly writing ve=
ctor
code using the X86 intrinsics will prevent <code class=3D"docutils literal =
notranslate"><span class=3D"pre">prefer-vector-width</span></code> from
affecting the code.</p>
</section>
<section id=3D"minsize">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id616" role=3D"doc-backlink">minsize</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#minsize" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id194">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
94" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">minsize</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::minsize</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::minsize</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This function attribute indicates that optimization passes and code gene=
rator passes
make choices that keep the function code size as small as possible. Optimiz=
ations may
also sacrifice runtime performance in order to minimize the size of the gen=
erated code.</p>
</section>
<section id=3D"no-builtin">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id617" role=3D"doc-backlink">no_builtin</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#no-builti=
n" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id195">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
95" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_builtin</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_builtin</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_builtin</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((no_builtin))</span></code> is similar to the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">-fno-builtin</span></code> f=
lag
except it is specific to the body of a function. The attribute may also be
applied to a virtual function but has no effect on the behavior of overridi=
ng
functions in a derived class.</p>
<p>It accepts one or more strings corresponding to the specific names of th=
e
builtins to disable (e.g. =E2=80=9Cmemcpy=E2=80=9D, =E2=80=9Cmemset=E2=80=
=9D).
If the attribute is used without parameters it will disable all buitins at
once.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// The compiler is not allowed to add any built=
in to foo's body.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo</span><span class=3D"p">(</span><span class=3D"kt">char</span><span cla=
ss=3D"o">*</span><span class=3D"w"> </span><span class=3D"n">data</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">size_t<=
/span><span class=3D"w"> </span><span class=3D"n">count</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">no_builtin</span><span cla=
ss=3D"p">))</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler is not allowe=
d to convert the loop into</span>
<span class=3D"w">  </span><span class=3D"c1">// `__builtin_memset(data, 0x=
FE, count);`.</span>
<span class=3D"w">  </span><span class=3D"k">for</span><span class=3D"w"> <=
/span><span class=3D"p">(</span><span class=3D"kt">size_t</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><s=
pan class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span=
><span class=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> =
</span><span class=3D"n">count</span><span class=3D"p">;</span><span class=
=3D"w"> </span><span class=3D"o">++</span><span class=3D"n">i</span><span c=
lass=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"n">data</span><span class=3D"p"=
>[</span><span class=3D"n">i</span><span class=3D"p">]</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"mh">0xFE</span><span class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"c1">// The compiler is not allowed to add the `memcpy` built=
in to bar's body.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">b=
ar</span><span class=3D"p">(</span><span class=3D"kt">char</span><span clas=
s=3D"o">*</span><span class=3D"w"> </span><span class=3D"n">data</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">size_t</=
span><span class=3D"w"> </span><span class=3D"n">count</span><span class=3D=
"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</span=
><span class=3D"p">((</span><span class=3D"n">no_builtin</span><span class=
=3D"p">(</span><span class=3D"s">"memcpy"</span><span class=3D"p">)))</span=
><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler is allowed to=
 convert the loop into</span>
<span class=3D"w">  </span><span class=3D"c1">// `__builtin_memset(data, 0x=
FE, count);` but cannot generate any</span>
<span class=3D"w">  </span><span class=3D"c1">// `__builtin_memcpy`</span>
<span class=3D"w">  </span><span class=3D"k">for</span><span class=3D"w"> <=
/span><span class=3D"p">(</span><span class=3D"kt">size_t</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><s=
pan class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span=
><span class=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> =
</span><span class=3D"n">count</span><span class=3D"p">;</span><span class=
=3D"w"> </span><span class=3D"o">++</span><span class=3D"n">i</span><span c=
lass=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"n">data</span><span class=3D"p"=
>[</span><span class=3D"n">i</span><span class=3D"p">]</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"mh">0xFE</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"no-caller-saved-registers">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id618" role=3D"doc-backlink">no_caller_saved_registers</a><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference=
.html#no-caller-saved-registers" title=3D"Link to this heading">=C2=B6</a><=
/h3>
<table class=3D"docutils align-default" id=3D"id196">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
96" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_caller_saved_registers</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_caller_saved_registers</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_caller_saved_registers</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Use this attribute to indicate that the specified function has no
caller-saved registers. That is, all registers are callee-saved except for
registers used for passing parameters to the function or returning paramete=
rs
from the function.
The compiler saves and restores any modified registers that were not used f=
or
passing or returning arguments to the function.</p>
<p>The user can call functions specified with the =E2=80=98no_caller_saved_=
registers=E2=80=99
attribute from an interrupt handler without saving and restoring all
call-clobbered registers.</p>
<p>Functions specified with the =E2=80=98no_caller_saved_registers=E2=80=99=
 attribute should only
call other functions with the =E2=80=98no_caller_saved_registers=E2=80=99 a=
ttribute, or should be
compiled with the =E2=80=98-mgeneral-regs-only=E2=80=99 flag to avoid savin=
g unused non-GPR registers.</p>
<p>Note that =E2=80=98no_caller_saved_registers=E2=80=99 attribute is not a=
 calling convention.
In fact, it only overrides the decision of which registers should be saved =
by
the caller, but not how the parameters are passed from the caller to the ca=
llee.</p>
<p>For example:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">__attribute__</span><span class=3D"w"> </span=
><span class=3D"p">((</span><span class=3D"n">no_caller_saved_registers</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">fa=
stcall</span><span class=3D"p">))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"k=
t">int</span><span class=3D"w"> </span><span class=3D"n">arg1</span><span c=
lass=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">int</span><=
span class=3D"w"> </span><span class=3D"n">arg2</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this case parameters =E2=80=98arg1=E2=80=99 and =E2=80=98arg2=E2=80=
=99 will be passed in registers.
In this case, on 32-bit x86 targets, the function =E2=80=98f=E2=80=99 will =
use ECX and EDX as
register parameters. However, it will not assume any scratch registers and
should save and restore any modified registers except for ECX and EDX.</p>
</div></blockquote>
</section>
<section id=3D"no-profile-instrument-function">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id619" role=3D"doc-backlink">no_profile_instrument_function</=
a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefe=
rence.html#no-profile-instrument-function" title=3D"Link to this heading">=
=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id197">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
97" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_profile_instrument_function</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_profile_instrument_function</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_profile_instrument_function</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>no_profile_instrument_function</span></code> attribute on a function decla=
ration
to denote that the compiler should not instrument the function with
profile-related instrumentation, such as via the
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-=
generate</span></code> / <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">-fprofile-instr-generate</span></code> /
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fcs-profi=
le-generate</span></code> / <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">-fprofile-arcs</span></code> flags.</p>
</section>
<section id=3D"no-sanitize">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id620" role=3D"doc-backlink">no_sanitize</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#no-sanit=
ize" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id198">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
98" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_sanitize</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_sanitize</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_sanitize</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>no_sanitize</span></code> attribute on a function or a global variable
declaration to specify that a particular instrumentation or set of
instrumentations should not be applied.</p>
<p>The attribute takes a list of string literals with the following accepte=
d
values:
* all values accepted by <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">-fno-sanitize=3D</span></code>;
* <code class=3D"docutils literal notranslate"><span class=3D"pre">coverage=
</span></code>, to disable SanitizerCoverage instrumentation.</p>
<p>For example, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">__attribute__((no_sanitize("address",</span> <span class=3D"pre">"thr=
ead")))</span></code> specifies
that AddressSanitizer and ThreadSanitizer should not be applied to the func=
tion
or variable. Using <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__attribute__((no_sanitize("coverage")))</span></code> specifies t=
hat
SanitizerCoverage should not be applied to the function.</p>
<p>See <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-code-generation"><span class=3D"std std-ref">C=
ontrolling Code Generation</span></a> for a
full list of supported sanitizer flags.</p>
</section>
<section id=3D"no-sanitize-address-no-address-safety-analysis">
<span id=3D"langext-address-sanitizer"></span><h3><a class=3D"toc-backref" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#id621" role=3D"=
doc-backlink">no_sanitize_address, no_address_safety_analysis</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#no-sanitize-address-no-address-safety-analysis" title=3D"Link to this head=
ing">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id199">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id1=
99" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_address_safety_analysis</span></code> <br> <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">no_sanitize_address=
</span></code> <br> <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">no_sanitize_thread</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">no_sanitize_memory</span></code></p><=
/td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_address_safety_analysis</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">gnu::no_sanitize_address</span></code=
> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_sanitize_thread</span></code> <br> <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang::no_sanitize_memory</span></code></p></=
td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_address_safety_analysis</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">gnu::no_sanitize_address</span></code=
> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_sanitize_thread</span></code> <br> <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang::no_sanitize_memory</span></code></p></=
td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((no_sanitize_address))</span></code> on a function or a global
variable declaration to specify that address safety instrumentation
(e.g. AddressSanitizer) should not be applied.</p>
</section>
<section id=3D"no-sanitize-memory">
<span id=3D"langext-memory-sanitizer"></span><h3><a class=3D"toc-backref" h=
ref=3D"https://clang.llvm.org/docs/AttributeReference.html#id622" role=3D"d=
oc-backlink">no_sanitize_memory</a><a class=3D"headerlink" href=3D"https://=
clang.llvm.org/docs/AttributeReference.html#no-sanitize-memory" title=3D"Li=
nk to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id200">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
00" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_address_safety_analysis</span></code> <br> <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">no_sanitize_address=
</span></code> <br> <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">no_sanitize_thread</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">no_sanitize_memory</span></code></p><=
/td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_address_safety_analysis</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">gnu::no_sanitize_address</span></code=
> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_sanitize_thread</span></code> <br> <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang::no_sanitize_memory</span></code></p></=
td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_address_safety_analysis</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">gnu::no_sanitize_address</span></code=
> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_sanitize_thread</span></code> <br> <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang::no_sanitize_memory</span></code></p></=
td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((no_sanitize_memory))</span></code> on a function declaration to
specify that checks for uninitialized memory should not be inserted
(e.g. by MemorySanitizer). The function may still be instrumented by the to=
ol
to avoid false positives in other places.</p>
</section>
<section id=3D"no-sanitize-thread">
<span id=3D"langext-thread-sanitizer"></span><h3><a class=3D"toc-backref" h=
ref=3D"https://clang.llvm.org/docs/AttributeReference.html#id623" role=3D"d=
oc-backlink">no_sanitize_thread</a><a class=3D"headerlink" href=3D"https://=
clang.llvm.org/docs/AttributeReference.html#no-sanitize-thread" title=3D"Li=
nk to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id201">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
01" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_address_safety_analysis</span></code> <br> <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">no_sanitize_address=
</span></code> <br> <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">no_sanitize_thread</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">no_sanitize_memory</span></code></p><=
/td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_address_safety_analysis</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">gnu::no_sanitize_address</span></code=
> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_sanitize_thread</span></code> <br> <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang::no_sanitize_memory</span></code></p></=
td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_address_safety_analysis</span></code> <br> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">gnu::no_sanitize_address</span></code=
> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_sanitize_thread</span></code> <br> <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang::no_sanitize_memory</span></code></p></=
td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((no_sanitize_thread))</span></code> on a function declaration to
specify that checks for data races on plain (non-atomic) memory accesses sh=
ould
not be inserted by ThreadSanitizer. The function is still instrumented by t=
he
tool to avoid false positives and provide meaningful stack traces.</p>
</section>
<section id=3D"no-speculative-load-hardening">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id624" role=3D"doc-backlink">no_speculative_load_hardening</a=
><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefer=
ence.html#no-speculative-load-hardening" title=3D"Link to this heading">=C2=
=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id202">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
02" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_speculative_load_hardening</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_speculative_load_hardening</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_speculative_load_hardening</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<dl>
<dt>This attribute can be applied to a function declaration in order to ind=
icate</dt><dd><p>that <a class=3D"reference external" href=3D"https://llvm.=
org/docs/SpeculativeLoadHardening.html">Speculative Load Hardening</a>
is <em>not</em> needed for the function body. This can also be applied to a=
 method
in Objective C. This attribute will take precedence over the command line f=
lag in
the case where <a class=3D"reference external" href=3D"https://clang.llvm.o=
rg/docs/ClangCommandLineReference.html#cmdoption-clang-mspeculative-load-ha=
rdening">-mspeculative-load-hardening</a> is specified.</p>
<p>Warning: This attribute may not prevent Speculative Load Hardening from =
being
enabled for a function which inlines a function that has the
=E2=80=98speculative_load_hardening=E2=80=99 attribute. This is intended to=
 provide a
maximally conservative model where the code that is marked with the
=E2=80=98speculative_load_hardening=E2=80=99 attribute will always (even wh=
en inlined)
be hardened. A user of this attribute may want to mark functions called by
a function they do not want to be hardened with the =E2=80=98noinline=E2=80=
=99 attribute.</p>
<p>For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><sp=
an class=3D"n">speculative_load_hardening</span><span class=3D"p">))</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">fo=
o</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"c1">// Note: bar() may still have speculative load hardening=
 enabled if</span>
<span class=3D"c1">// foo() is inlined into bar(). Mark foo() with __attrib=
ute__((noinline))</span>
<span class=3D"c1">// to avoid this situation.</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">no_speculative_load_hardening</span><span class=3D"p">))</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">ba=
r</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">foo</span><span class=3D"p">(</span><span class=
=3D"n">i</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</dd>
</dl>
</section>
<section id=3D"no-split-stack">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id625" role=3D"doc-backlink">no_split_stack</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#no-sp=
lit-stack" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id203">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
03" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_split_stack</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_split_stack</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_split_stack</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">no_=
split_stack</span></code> attribute disables the emission of the split stac=
k
preamble for a particular function. It has no effect if <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">-fsplit-stack</span></code>
is not specified.</p>
</section>
<section id=3D"no-stack-protector-safebuffers">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id626" role=3D"doc-backlink">no_stack_protector, safebuffers<=
/a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRef=
erence.html#no-stack-protector-safebuffers" title=3D"Link to this heading">=
=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id204">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
04" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_stack_protector</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_stack_protector</span></code> <br> <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">gnu::no_stack_protector</span></code></p></=
td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_stack_protector</span></code> <br> <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">gnu::no_stack_protector</span></code></p></=
td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">saf=
ebuffers</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((no_stack_protector))</span></code> and=
 Microsoft
style <code class=3D"docutils literal notranslate"><span class=3D"pre">__de=
clspec(safebuffers)</span></code> attribute which disables
the stack protector on the specified function. This attribute is useful for
selectively disabling the stack protector on some functions when building w=
ith
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fstack-pr=
otector</span></code> compiler option.</p>
<p>For example, it disables the stack protector for the function <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">foo</span></code> bu=
t function
<code class=3D"docutils literal notranslate"><span class=3D"pre">bar</span>=
</code> will still be built with the stack protector with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">-fstack-protector</sp=
an></code>
option.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">__attribute__</span><span class=3D"p">((</span><span class=3D"n">no=
_stack_protector</span><span class=3D"p">))</span>
<span class=3D"n">foo</span><span class=3D"w"> </span><span class=3D"p">(</=
span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"=
n">x</span><span class=3D"p">);</span><span class=3D"w"> </span><span class=
=3D"c1">// stack protection will be disabled for foo.</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">b=
ar</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">y</span><span class=3D"p">);</span><span c=
lass=3D"w"> </span><span class=3D"c1">// bar can be built with the stack pr=
otector.</span>
</pre></div>
</div>
</section>
<section id=3D"noalias">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id627" role=3D"doc-backlink">noalias</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#noalias" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id205">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
05" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">noa=
lias</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">noa=
lias</span></code> attribute indicates that the only memory accesses inside
function are loads and stores from objects pointed to by its pointer-typed
arguments, with arbitrary offsets.</p>
</section>
<section id=3D"nocf-check">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id628" role=3D"doc-backlink">nocf_check</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nocf-chec=
k" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id206">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
06" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nocf_check</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nocf_check</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nocf_check</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Jump Oriented Programming attacks rely on tampering with addresses used =
by
indirect call / jmp, e.g. redirect control-flow to non-programmer
intended bytes in the binary.
X86 Supports Indirect Branch Tracking (IBT) as part of Control-Flow
Enforcement Technology (CET). IBT instruments ENDBR instructions used to
specify valid targets of indirect call / jmp.
The <code class=3D"docutils literal notranslate"><span class=3D"pre">nocf_c=
heck</span></code> attribute has two roles:
1. Appertains to a function - do not add ENDBR instruction at the beginning=
 of
the function.
2. Appertains to a function pointer - do not track the target function of t=
his
pointer (by adding nocf_check prefix to the indirect-call instruction).</p>
</section>
<section id=3D"noconvergent">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id629" role=3D"doc-backlink">noconvergent</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#noconve=
rgent" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id207">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
07" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">noconvergent</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::noconvergent</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::noconvergent</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">noc=
onvergent</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute prevents a function from being treated as convergent, whi=
ch
means that optimizations can only move calls to that function to
control-equivalent blocks. If a statement is marked as <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">noconvergent</span></code> and
contains calls, it also prevents those calls from being treated as converge=
nt.
In other words, those calls are not restricted to only being moved to
control-equivalent blocks.</p>
<p>In languages following SPMD/SIMT programming model, e.g., CUDA/HIP, func=
tion
declarations and calls are treated as convergent by default for correctness=
.
This <code class=3D"docutils literal notranslate"><span class=3D"pre">nocon=
vergent</span></code> attribute is helpful for developers to prevent them f=
rom
being treated as convergent when it=E2=80=99s safe.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__device__</span><span class=3D"w"> </span><span c=
lass=3D"kt">float</span><span class=3D"w"> </span><span class=3D"n">bar</sp=
an><span class=3D"p">(</span><span class=3D"kt">float</span><span class=3D"=
p">);</span>
<span class=3D"n">__device__</span><span class=3D"w"> </span><span class=3D=
"kt">float</span><span class=3D"w"> </span><span class=3D"n">foo</span><spa=
n class=3D"p">(</span><span class=3D"kt">float</span><span class=3D"p">)</s=
pan><span class=3D"w"> </span><span class=3D"n">__attribute__</span><span c=
lass=3D"p">((</span><span class=3D"n">noconvergent</span><span class=3D"p">=
))</span><span class=3D"w"> </span><span class=3D"p">{}</span>

<span class=3D"n">__device__</span><span class=3D"w"> </span><span class=3D=
"kt">int</span><span class=3D"w"> </span><span class=3D"n">example</span><s=
pan class=3D"p">(</span><span class=3D"kt">void</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">float</span><span class=3D"w"=
> </span><span class=3D"n">x</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">noconvergent</span><s=
pan class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"n">x</spa=
n><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> =
</span><span class=3D"n">bar</span><span class=3D"p">(</span><span class=3D=
"n">x</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"nodiscard-warn-unused-result">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id630" role=3D"doc-backlink">nodiscard, warn_unused_result</a=
><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefer=
ence.html#nodiscard-warn-unused-result" title=3D"Link to this heading">=C2=
=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id208">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
08" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">warn_unused_result</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nod=
iscard</span></code> <br> <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">clang::warn_unused_result</span></code> <br> <code class=3D=
"docutils literal notranslate"><span class=3D"pre">gnu::warn_unused_result<=
/span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nod=
iscard</span></code> <br> <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">gnu::warn_unused_result</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the ability to diagnose when the results of a function ca=
ll
expression are discarded under suspicious circumstances. A diagnostic is
generated when a function or its return type is marked with <code class=3D"=
docutils literal notranslate"><span class=3D"pre">[[nodiscard]]</span></cod=
e>
(or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((warn_unused_result))</span></code>) and the function call appears =
as a
potentially-evaluated discarded-value expression that is not explicitly cas=
t to
<code class=3D"docutils literal notranslate"><span class=3D"pre">void</span=
></code>.</p>
<p>A string literal may optionally be provided to the attribute, which will=
 be
reproduced in any resulting diagnostics. Redeclarations using different for=
ms
of the attribute (with or without the string literal or with different stri=
ng
literal contents) are allowed. If there are redeclarations of the entity wi=
th
differing string literals, it is unspecified which one will be used by Clan=
g
in any resulting diagnostics.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"p">[[</span><span class=3D"n">nodiscard</span><span class=3D"p">]]</s=
pan><span class=3D"w"> </span><span class=3D"n">error_info</span><span clas=
s=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </span><span c=
lass=3D"cm">/*...*/</span><span class=3D"w"> </span><span class=3D"p">};</s=
pan>
<span class=3D"n">error_info</span><span class=3D"w"> </span><span class=3D=
"nf">enable_missile_safety_mode</span><span class=3D"p">();</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
launch_missiles</span><span class=3D"p">();</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
test_missiles</span><span class=3D"p">()</span><span class=3D"w"> </span><s=
pan class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">enable_missile_safety_mode</sp=
an><span class=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1"=
>// diagnoses</span>
<span class=3D"w">  </span><span class=3D"n">launch_missiles</span><span cl=
ass=3D"p">();</span>
<span class=3D"p">}</span>
<span class=3D"n">error_info</span><span class=3D"w"> </span><span class=3D=
"o">&amp;</span><span class=3D"nf">foo</span><span class=3D"p">();</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
f</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D=
"p">{</span><span class=3D"w"> </span><span class=3D"n">foo</span><span cla=
ss=3D"p">();</span><span class=3D"w"> </span><span class=3D"p">}</span><spa=
n class=3D"w"> </span><span class=3D"c1">// Does not diagnose, error_info i=
s a reference.</span>
</pre></div>
</div>
<p>Additionally, discarded temporaries resulting from a call to a construct=
or
marked with <code class=3D"docutils literal notranslate"><span class=3D"pre=
">[[nodiscard]]</span></code> or a constructor of a type marked
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[nodiscar=
d]]</span></code> will also diagnose. This also applies to type conversions=
 that
use the annotated <code class=3D"docutils literal notranslate"><span class=
=3D"pre">[[nodiscard]]</span></code> constructor or result in an annotated =
type.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"p">[[</span><span class=3D"n">nodiscard</span><span class=3D"p">]]</s=
pan><span class=3D"w"> </span><span class=3D"n">marked_type</span><span cla=
ss=3D"w"> </span><span class=3D"p">{</span><span class=3D"cm">/*..*/</span>=
<span class=3D"w"> </span><span class=3D"p">};</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>marked_ctor</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">nod=
iscard</span><span class=3D"p">]]</span><span class=3D"w"> </span><span cla=
ss=3D"n">marked_ctor</span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"n">marked_ctor</span><span class=
=3D"p">(</span><span class=3D"kt">int</span><span class=3D"p">);</span>
<span class=3D"p">};</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>S</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">operator</span><span class=3D"=
w"> </span><span class=3D"n">marked_type</span><span class=3D"p">()</span><=
span class=3D"w"> </span><span class=3D"k">const</span><span class=3D"p">;<=
/span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">nod=
iscard</span><span class=3D"p">]]</span><span class=3D"w"> </span><span cla=
ss=3D"k">operator</span><span class=3D"w"> </span><span class=3D"kt">int</s=
pan><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D"k">=
const</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
usages</span><span class=3D"p">()</span><span class=3D"w"> </span><span cla=
ss=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">marked_type</span><span class=
=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1">// diagnoses.=
</span>
<span class=3D"w">  </span><span class=3D"n">marked_ctor</span><span class=
=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1">// diagnoses.=
</span>
<span class=3D"w">  </span><span class=3D"n">marked_ctor</span><span class=
=3D"p">(</span><span class=3D"mi">3</span><span class=3D"p">);</span><span =
class=3D"w"> </span><span class=3D"c1">// Does not diagnose, int constructo=
r isn't marked nodiscard.</span>

<span class=3D"w">  </span><span class=3D"n">S</span><span class=3D"w"> </s=
pan><span class=3D"n">s</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">static_cast</span><span class=
=3D"o">&lt;</span><span class=3D"n">marked_type</span><span class=3D"o">&gt=
;</span><span class=3D"p">(</span><span class=3D"n">s</span><span class=3D"=
p">);</span><span class=3D"w"> </span><span class=3D"c1">// diagnoses</span=
>
<span class=3D"w">  </span><span class=3D"p">(</span><span class=3D"kt">int=
</span><span class=3D"p">)</span><span class=3D"n">s</span><span class=3D"p=
">;</span><span class=3D"w"> </span><span class=3D"c1">// diagnoses</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"noduplicate">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id631" role=3D"doc-backlink">noduplicate</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#noduplic=
ate" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id209">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
09" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">noduplicate</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::noduplicate</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::noduplicate</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">nod=
uplicate</span></code> attribute can be placed on function declarations to =
control
whether function calls to this function can be duplicated or not as a resul=
t of
optimizations. This is required for the implementation of functions with
certain special requirements, like the OpenCL =E2=80=9Cbarrier=E2=80=9D fun=
ction, that might
need to be run concurrently by all the threads that are executing in lockst=
ep
on the hardware. For example this attribute applied on the function
=E2=80=9Cnodupfunc=E2=80=9D in the code below avoids that:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">nodupfunc</span><span class=3D"p">()</span><span class=3D"w"> </spa=
n><span class=3D"n">__attribute__</span><span class=3D"p">((</span><span cl=
ass=3D"n">noduplicate</span><span class=3D"p">));</span>
<span class=3D"c1">// Setting it as a C++11 attribute is also valid</span>
<span class=3D"c1">// void nodupfunc() [[clang::noduplicate]];</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo</span><span class=3D"p">();</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
bar</span><span class=3D"p">();</span>

<span class=3D"n">nodupfunc</span><span class=3D"p">();</span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">&=
gt;</span><span class=3D"w"> </span><span class=3D"n">n</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">foo</span><span class=3D"p">()=
;</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"k">else<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">bar</span><span class=3D"p">()=
;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>gets possibly modified by some optimizations into code similar to this:<=
/p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"=
p">(</span><span class=3D"n">a</span><span class=3D"w"> </span><span class=
=3D"o">&gt;</span><span class=3D"w"> </span><span class=3D"n">n</span><span=
 class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">nodupfunc</span><span class=3D=
"p">();</span>
<span class=3D"w">  </span><span class=3D"n">foo</span><span class=3D"p">()=
;</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"k">else<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">nodupfunc</span><span class=3D=
"p">();</span>
<span class=3D"w">  </span><span class=3D"n">bar</span><span class=3D"p">()=
;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>where the call to =E2=80=9Cnodupfunc=E2=80=9D is duplicated and sunk int=
o the two branches
of the condition.</p>
</section>
<section id=3D"noinline">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id632" role=3D"doc-backlink">noinline</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#noinline" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id210">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
10" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">noinline</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::noinline</span></code> <br> <code class=3D"docutils literal notranslate">=
<span class=3D"pre">clang::noinline</span></code> <br> <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">msvc::noinline</span></code></=
p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::noinline</span></code> <br> <code class=3D"docutils literal notranslate">=
<span class=3D"pre">clang::noinline</span></code> <br> <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">msvc::noinline</span></code></=
p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">noi=
nline</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__n=
oinline__</span></code></p></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This function attribute suppresses the inlining of a function at the cal=
l sites
of the function.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang=
::noinline]]</span></code> spelling can be used as a statement attribute; o=
ther
spellings of the attribute are not supported on statements. If a statement =
is
marked <code class=3D"docutils literal notranslate"><span class=3D"pre">[[c=
lang::noinline]]</span></code> and contains calls, those calls inside the
statement will not be inlined by the compiler.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__noinl=
ine__</span></code> can be used as a keyword in CUDA/HIP languages. This is=
 to
avoid diagnostics due to usage of <code class=3D"docutils literal notransla=
te"><span class=3D"pre">__attribute__((__noinline__))</span></code>
with <code class=3D"docutils literal notranslate"><span class=3D"pre">__noi=
nline__</span></code> defined as a macro as <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">__attribute__((noinline))</span></code>.<=
/p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">example</span><span class=3D"p">(</span><span class=3D"kt">void</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{<=
/span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">r</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">noinline</span><span =
class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"n">foo</span>=
<span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">noinline</span><span =
class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"n">r</span><s=
pan class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </sp=
an><span class=3D"n">bar</span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">r</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"nomicromips">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id633" role=3D"doc-backlink">nomicromips</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nomicrom=
ips" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id211">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
11" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nomicromips</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nomicromips</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nomicromips</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((micromips))</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((nomicromips))</span></code> attributes on MIPS targets. These attribut=
es
may be attached to a function definition and instructs the backend to gener=
ate
or not to generate microMIPS code for that function.</p>
<p>These attributes override the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-mmicromips</span></code> and <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">-mno-micromips</span></code> opt=
ions
on the command line.</p>
</section>
<section id=3D"noreturn-noreturn">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id634" role=3D"doc-backlink">noreturn, _Noreturn</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#noreturn-noreturn" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id212">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
12" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nor=
eturn</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nor=
eturn</span></code> <br> <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">_Noreturn</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>A function declared as <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">[[noreturn]]</span></code> shall not return to its caller. =
The
compiler will generate a diagnostic for a function declared as <code class=
=3D"docutils literal notranslate"><span class=3D"pre">[[noreturn]]</span></=
code>
that appears to be capable of returning to its caller.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[_=
Noreturn]]</span></code> spelling is deprecated and only exists to ease cod=
e
migration for code using <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">[[noreturn]]</span></code> after including <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">&lt;stdnoreturn.h&gt;</span=
></code>.</p>
</section>
<section id=3D"not-tail-called">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id635" role=3D"doc-backlink">not_tail_called</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#not-=
tail-called" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id213">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
13" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">not_tail_called</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::not_tail_called</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::not_tail_called</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">not=
_tail_called</span></code> attribute prevents tail-call optimization on sta=
tically
bound calls. Objective-c methods, and functions marked as <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">always_inline</span></code>
cannot be marked as <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">not_tail_called</span></code>.</p>
<p>For example, it prevents tail-call optimization in the following case:</=
p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"kt">int</span><span class=3D"w"> </span><span cl=
ass=3D"nf">__attribute__</span><span class=3D"p">((</span><span class=3D"n"=
>not_tail_called</span><span class=3D"p">))</span><span class=3D"w"> </span=
><span class=3D"n">foo1</span><span class=3D"p">(</span><span class=3D"kt">=
int</span><span class=3D"p">);</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">f=
oo2</span><span class=3D"p">(</span><span class=3D"kt">int</span><span clas=
s=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">foo1</span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">);</span><span class=3D"w"> </span><span c=
lass=3D"c1">// No tail-call optimization on direct calls.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
<p>However, it doesn=E2=80=99t prevent tail-call optimization in this case:=
</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"kt">int</span><span class=3D"w"> </span><span cl=
ass=3D"nf">__attribute__</span><span class=3D"p">((</span><span class=3D"n"=
>not_tail_called</span><span class=3D"p">))</span><span class=3D"w"> </span=
><span class=3D"n">foo1</span><span class=3D"p">(</span><span class=3D"kt">=
int</span><span class=3D"p">);</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">f=
oo2</span><span class=3D"p">(</span><span class=3D"kt">int</span><span clas=
s=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"n=
">fn</span><span class=3D"p">)(</span><span class=3D"kt">int</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=3D</span><sp=
an class=3D"w"> </span><span class=3D"o">&amp;</span><span class=3D"n">foo1=
</span><span class=3D"p">;</span>

<span class=3D"w">  </span><span class=3D"c1">// not_tail_called has no eff=
ect on an indirect call even if the call can</span>
<span class=3D"w">  </span><span class=3D"c1">// be resolved at compile tim=
e.</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D=
"n">fn</span><span class=3D"p">)(</span><span class=3D"n">a</span><span cla=
ss=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
<p>Generally, marking an overriding virtual function as <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">not_tail_called</span></code>=
 is
not useful, because this attribute is a property of the static type. Calls
made through a pointer or reference to the base class type will respect
the <code class=3D"docutils literal notranslate"><span class=3D"pre">not_ta=
il_called</span></code> attribute of the base class=E2=80=99s member functi=
on,
regardless of the runtime destination of the call:</p>
<blockquote>
<div><div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"k">struct</span><span class=3D"w"> </span><spa=
n class=3D"nc">Foo</span><span class=3D"w"> </span><span class=3D"p">{</spa=
n><span class=3D"w"> </span><span class=3D"k">virtual</span><span class=3D"=
w"> </span><span class=3D"kt">void</span><span class=3D"w"> </span><span cl=
ass=3D"nf">f</span><span class=3D"p">();</span><span class=3D"w"> </span><s=
pan class=3D"p">};</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>Bar</span><span class=3D"w"> </span><span class=3D"o">:</span><span class=
=3D"w"> </span><span class=3D"n">Foo</span><span class=3D"w"> </span><span =
class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">not_tail_called</span=
><span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"kt">vo=
id</span><span class=3D"w"> </span><span class=3D"n">f</span><span class=3D=
"p">()</span><span class=3D"w"> </span><span class=3D"k">override</span><sp=
an class=3D"p">;</span>
<span class=3D"p">};</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
callera</span><span class=3D"p">(</span><span class=3D"n">Bar</span><span c=
lass=3D"o">&amp;</span><span class=3D"w"> </span><span class=3D"n">bar</spa=
n><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</=
span>
<span class=3D"w">  </span><span class=3D"n">Foo</span><span class=3D"o">&a=
mp;</span><span class=3D"w"> </span><span class=3D"n">foo</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"n">bar</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"c1">// not_tail_called has no eff=
ect on here, even though the</span>
<span class=3D"w">  </span><span class=3D"c1">// underlying method is f fro=
m Bar.</span>
<span class=3D"w">  </span><span class=3D"n">foo</span><span class=3D"p">.<=
/span><span class=3D"n">f</span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"n">bar</span><span class=3D"p">.<=
/span><span class=3D"n">f</span><span class=3D"p">();</span><span class=3D"=
w"> </span><span class=3D"c1">// No tail-call optimization on here.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"nothrow">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id636" role=3D"doc-backlink">nothrow</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nothrow" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id214">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
14" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nothrow</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nothrow</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nothrow</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">not=
hrow</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((nothrow))</span></code> and Microsoft =
style
<code class=3D"docutils literal notranslate"><span class=3D"pre">__declspec=
(nothrow)</span></code> attribute as an equivalent of <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">noexcept</span></code> on funct=
ion
declarations. This attribute informs the compiler that the annotated functi=
on
does not throw an exception. This prevents exception-unwinding. This attrib=
ute
is particularly useful on functions in the C Standard Library that are
guaranteed to not throw an exception.</p>
</section>
<section id=3D"nouwtable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id637" role=3D"doc-backlink">nouwtable</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nouwtable"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id215">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
15" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nouwtable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nouwtable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nouwtable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">nouwtable</span></code> attribute which skips emitting
the unwind table entry for the specified function. This attribute is useful=
 for
selectively emitting the unwind table entry on some functions when building=
 with
<code class=3D"docutils literal notranslate"><span class=3D"pre">-funwind-t=
ables</span></code> compiler option.</p>
</section>
<section id=3D"ns-consumed">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id638" role=3D"doc-backlink">ns_consumed</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ns-consu=
med" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id216">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
16" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ns_consumed</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_consumed</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_consumed</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"ns-consumes-self">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id639" role=3D"doc-backlink">ns_consumes_self</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ns-=
consumes-self" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id217">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
17" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ns_consumes_self</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_consumes_self</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_consumes_self</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"ns-returns-autoreleased">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id640" role=3D"doc-backlink">ns_returns_autoreleased</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#ns-returns-autoreleased" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id218">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
18" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ns_returns_autoreleased</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_returns_autoreleased</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_returns_autoreleased</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"ns-returns-not-retained">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id641" role=3D"doc-backlink">ns_returns_not_retained</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#ns-returns-not-retained" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id219">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
19" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ns_returns_not_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_returns_not_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_returns_not_retained</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"ns-returns-retained">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id642" role=3D"doc-backlink">ns_returns_retained</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#ns-returns-retained" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id220">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
20" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ns_returns_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_returns_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ns_returns_retained</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"numthreads">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id643" role=3D"doc-backlink">numthreads</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#numthread=
s" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id221">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
21" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">num=
threads</span></code> attribute applies to HLSL shaders where explcit threa=
d counts
are required. The <code class=3D"docutils literal notranslate"><span class=
=3D"pre">X</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Y</span></code>, and <code class=3D"docutils literal notran=
slate"><span class=3D"pre">Z</span></code> values provided to the attribute
dictate the thread id. Total number of threads executed is <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">X</span> <span class=3D"pr=
e">*</span> <span class=3D"pre">Y</span> <span class=3D"pre">*</span> <span=
 class=3D"pre">Z</span></code>.</p>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-a=
ttributes-numthreads">https://docs.microsoft.com/en-us/windows/win32/direct=
3dhlsl/sm5-attributes-numthreads</a></p>
</section>
<section id=3D"objc-method-family">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id644" role=3D"doc-backlink">objc_method_family</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#objc-method-family" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id222">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
22" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_method_family</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_method_family</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_method_family</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Many methods in Objective-C have conventional meanings determined by the=
ir
selectors. It is sometimes useful to be able to mark a method as having a
particular conventional meaning despite not having the right selector, or a=
s
not having the conventional meaning that its selector would suggest. For th=
ese
use cases, we provide an attribute to specifically describe the =E2=80=9Cme=
thod family=E2=80=9D
that a method belongs to.</p>
<p><strong>Usage</strong>: <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__attribute__((objc_method_family(X)))</span></code>, wher=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">X</span>=
</code> is one of
<code class=3D"docutils literal notranslate"><span class=3D"pre">none</span=
></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
alloc</span></code>, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">copy</span></code>, <code class=3D"docutils literal notranslate"=
><span class=3D"pre">init</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">mutableCopy</span></code>, or <code class=3D=
"docutils literal notranslate"><span class=3D"pre">new</span></code>. This
attribute can only be placed at the end of a method declaration:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">-</span> <span class=3D"p">(</span><span class=
=3D"bp">NSString</span><span class=3D"w"> </span><span class=3D"o">*</span>=
<span class=3D"p">)</span><span class=3D"nf">initMyStringValue</span><span =
class=3D"w"> </span><span class=3D"bp">__attribute__</span><span class=3D"p=
">((</span><span class=3D"n">objc_method_family</span><span class=3D"p">(</=
span><span class=3D"n">none</span><span class=3D"p">)));</span>
</pre></div>
</div>
<p>Users who do not wish to change the conventional meaning of a method, an=
d who
merely want to document its non-standard retain and release semantics, shou=
ld
use the retaining behavior attributes (<code class=3D"docutils literal notr=
anslate"><span class=3D"pre">ns_returns_retained</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">ns_returns=
_not_retained</span></code>, etc).</p>
<p>Query for this feature with <code class=3D"docutils literal notranslate"=
><span class=3D"pre">__has_attribute(objc_method_family)</span></code>.</p>
</section>
<section id=3D"objc-requires-super">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id645" role=3D"doc-backlink">objc_requires_super</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#objc-requires-super" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id223">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
23" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_requires_super</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_requires_super</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_requires_super</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Some Objective-C classes allow a subclass to override a particular metho=
d in a
parent class but expect that the overriding method also calls the overridde=
n
method in the parent class. For these cases, we provide an attribute to
designate that a method requires a =E2=80=9Ccall to <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">super</span></code>=E2=80=9D in t=
he overriding
method in the subclass.</p>
<p><strong>Usage</strong>: <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__attribute__((objc_requires_super))</span></code>. This a=
ttribute can only
be placed at the end of a method declaration:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">-</span> <span class=3D"p">(</span><span class=
=3D"kt">void</span><span class=3D"p">)</span><span class=3D"nf">foo</span><=
span class=3D"w"> </span><span class=3D"bp">__attribute__</span><span class=
=3D"p">((</span><span class=3D"n">objc_requires_super</span><span class=3D"=
p">));</span>
</pre></div>
</div>
<p>This attribute can only be applied the method declarations within a clas=
s, and
not a protocol. Currently this attribute does not enforce any placement of
where the call occurs in the overriding method (such as in the case of
<code class=3D"docutils literal notranslate"><span class=3D"pre">-dealloc</=
span></code> where the call must appear at the end). It checks only that it
exists.</p>
<p>Note that on both OS X and iOS that the Foundation framework provides a
convenience macro <code class=3D"docutils literal notranslate"><span class=
=3D"pre">NS_REQUIRES_SUPER</span></code> that provides syntactic sugar for =
this
attribute:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">-</span> <span class=3D"p">(</span><span class=
=3D"kt">void</span><span class=3D"p">)</span><span class=3D"nf">foo</span><=
span class=3D"w"> </span><span class=3D"n">NS_REQUIRES_SUPER</span><span cl=
ass=3D"p">;</span>
</pre></div>
</div>
<p>This macro is conditionally defined depending on the compiler=E2=80=99s =
support for
this attribute. If the compiler does not support the attribute the macro
expands to nothing.</p>
<p>Operationally, when a method has this annotation the compiler will warn =
if the
implementation of an override in a subclass does not call super. For exampl=
e:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"nl">warning</span><span class=3D"p">:</span><span =
class=3D"w"> </span><span class=3D"n">method</span><span class=3D"w"> </spa=
n><span class=3D"n">possibly</span><span class=3D"w"> </span><span class=3D=
"n">missing</span><span class=3D"w"> </span><span class=3D"n">a</span><span=
 class=3D"w"> </span><span class=3D"p">[</span><span class=3D"nb">super</sp=
an><span class=3D"w"> </span><span class=3D"n">AnnotMeth</span><span class=
=3D"p">]</span><span class=3D"w"> </span><span class=3D"n">call</span>
<span class=3D"o">-</span><span class=3D"w"> </span><span class=3D"p">(</sp=
an><span class=3D"kt">void</span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"n">AnnotMeth</span><span class=3D"p">{};</span>
<span class=3D"w">                   </span><span class=3D"o">^</span>
</pre></div>
</div>
</section>
<section id=3D"optnone">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id646" role=3D"doc-backlink">optnone</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#optnone" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id224">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
24" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">optnone</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::optnone</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::optnone</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">opt=
none</span></code> attribute suppresses essentially all optimizations
on a function or method, regardless of the optimization level applied to
the compilation unit as a whole. This is particularly useful when you
need to debug a particular function, but it is infeasible to build the
entire application without optimization. Avoiding optimization on the
specified function can improve the quality of the debugging information
for that function.</p>
<p>This attribute is incompatible with the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">always_inline</span></code> and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">minsize</span></code=
>
attributes.</p>
<p>Note that this attribute does not apply recursively to nested functions =
such as
lambdas or blocks when using declaration-specific attribute syntaxes such a=
s double
square brackets (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">[[]]</span></code>) or <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__</span></code>. The <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">#pragma</span></code> syntax c=
an be
used to apply the attribute to all functions, including nested functions, i=
n a
range of source code.</p>
</section>
<section id=3D"os-consumed">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id647" role=3D"doc-backlink">os_consumed</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#os-consu=
med" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id225">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
25" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">os_consumed</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_consumed</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_consumed</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"os-consumes-this">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id648" role=3D"doc-backlink">os_consumes_this</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#os-=
consumes-this" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id226">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
26" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">os_consumes_this</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_consumes_this</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_consumes_this</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"os-returns-not-retained">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id649" role=3D"doc-backlink">os_returns_not_retained</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#os-returns-not-retained" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id227">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
27" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">os_returns_not_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_returns_not_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_returns_not_retained</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"os-returns-retained">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id650" role=3D"doc-backlink">os_returns_retained</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#os-returns-retained" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id228">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
28" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">os_returns_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_returns_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_returns_retained</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"os-returns-retained-on-non-zero">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id651" role=3D"doc-backlink">os_returns_retained_on_non_zero<=
/a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRef=
erence.html#os-returns-retained-on-non-zero" title=3D"Link to this heading"=
>=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id229">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
29" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">os_returns_retained_on_non_zero</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_returns_retained_on_non_zero</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_returns_retained_on_non_zero</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"os-returns-retained-on-zero">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id652" role=3D"doc-backlink">os_returns_retained_on_zero</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferen=
ce.html#os-returns-retained-on-zero" title=3D"Link to this heading">=C2=B6<=
/a></h3>
<table class=3D"docutils align-default" id=3D"id230">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
30" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">os_returns_retained_on_zero</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_returns_retained_on_zero</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::os_returns_retained_on_zero</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The behavior of a function with respect to reference counting for Founda=
tion
(Objective-C), CoreFoundation (C) and OSObject (C++) is determined by a nam=
ing
convention (e.g. functions starting with =E2=80=9Cget=E2=80=9D are assumed =
to return at
<code class=3D"docutils literal notranslate"><span class=3D"pre">+0</span><=
/code>).</p>
<p>It can be overridden using a family of the following attributes. In
Objective-C, the annotation <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__attribute__((ns_returns_retained))</span></code> applie=
d to
a function communicates that the object is returned at <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">+1</span></code>, and the call=
er
is responsible for freeing it.
Similarly, the annotation <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__attribute__((ns_returns_not_retained))</span></code>
specifies that the object is returned at <code class=3D"docutils literal no=
translate"><span class=3D"pre">+0</span></code> and the ownership remains w=
ith
the callee.
The annotation <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((ns_consumes_self))</span></code> specifies that
the Objective-C method call consumes the reference to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">self</span></code>, e.g. by
attaching it to a supplied parameter.
Additionally, parameters can have an annotation
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((ns_consumed))</span></code>, which specifies that passing an owned obj=
ect
as that parameter effectively transfers the ownership, and the caller is no
longer responsible for it.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>In C programs using CoreFoundation, a similar set of attributes:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((cf_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((cf_consumed))</span></cod=
e>
have the same respective semantics when applied to CoreFoundation objects.
These attributes affect code generation when interacting with ARC code, and
they are used by the Clang Static Analyzer.</p>
<p>Finally, in C++ interacting with XNU kernel (objects inheriting from OSO=
bject),
the same attribute family is present:
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_not_retained))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_returns_retained))</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__attribute__((os_consumed))</span></cod=
e>,
with the same respective semantics.
Similar to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__attribute__((ns_consumes_self))</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((os_consumes_this))</span></code> specifies that the method call consum=
es
the reference to =E2=80=9Cthis=E2=80=9D (e.g., when attaching it to a diffe=
rent object supplied
as a parameter).
Out parameters (parameters the function is meant to write into,
either via pointers-to-pointers or references-to-pointers)
may be annotated with <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((os_returns_retained))</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((os_returns_not_retained))</span></code> which specifies that the ob=
ject
written into the out parameter should (or respectively should not) be relea=
sed
after use.
Since often out parameters may or may not be written depending on the exit
code of the function,
annotations <code class=3D"docutils literal notranslate"><span class=3D"pre=
">__attribute__((os_returns_retained_on_zero))</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((os_returns_retained_on_non_zero))</span></code> specify that
an out parameter at <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">+1</span></code> is written if and only if the function returns a=
 zero
(respectively non-zero) error code.
Observe that return-code-dependent out parameter annotations are only
available for retained out parameters, as non-retained object do not have t=
o be
released by the callee.
These attributes are only used by the Clang Static Analyzer.</p>
<p>The family of attributes <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">X_returns_X_retained</span></code> can be added to functi=
ons,
C++ methods, and Objective-C methods and properties.
Attributes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>X_consumed</span></code> can be added to parameters of methods, functions,
and Objective-C methods.</p>
</section>
<section id=3D"overloadable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id653" role=3D"doc-backlink">overloadable</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#overloa=
dable" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id231">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
31" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">overloadable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::overloadable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::overloadable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang provides support for C++ function overloading in C. Function overl=
oading
in C is introduced using the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">overloadable</span></code> attribute. For example, one
might provide several overloaded versions of a <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">tgsin</span></code> function that invo=
kes
the appropriate standard function computing the sine of a value with <code =
class=3D"docutils literal notranslate"><span class=3D"pre">float</span></co=
de>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">double</sp=
an></code>, or <code class=3D"docutils literal notranslate"><span class=3D"=
pre">long</span> <span class=3D"pre">double</span></code> precision:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#include</span><span class=3D"w"> </span><span cl=
ass=3D"cpf">&lt;math.h&gt;</span>
<span class=3D"kt">float</span><span class=3D"w"> </span><span class=3D"nf"=
>__attribute__</span><span class=3D"p">((</span><span class=3D"n">overloada=
ble</span><span class=3D"p">))</span><span class=3D"w"> </span><span class=
=3D"n">tgsin</span><span class=3D"p">(</span><span class=3D"kt">float</span=
><span class=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">)</s=
pan><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> =
</span><span class=3D"k">return</span><span class=3D"w"> </span><span class=
=3D"n">sinf</span><span class=3D"p">(</span><span class=3D"n">x</span><span=
 class=3D"p">);</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"kt">double</span><span class=3D"w"> </span><span class=3D"nf=
">__attribute__</span><span class=3D"p">((</span><span class=3D"n">overload=
able</span><span class=3D"p">))</span><span class=3D"w"> </span><span class=
=3D"n">tgsin</span><span class=3D"p">(</span><span class=3D"kt">double</spa=
n><span class=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D"w">=
 </span><span class=3D"k">return</span><span class=3D"w"> </span><span clas=
s=3D"n">sin</span><span class=3D"p">(</span><span class=3D"n">x</span><span=
 class=3D"p">);</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"kt">long</span><span class=3D"w"> </span><span class=3D"kt">=
double</span><span class=3D"w"> </span><span class=3D"nf">__attribute__</sp=
an><span class=3D"p">((</span><span class=3D"n">overloadable</span><span cl=
ass=3D"p">))</span><span class=3D"w"> </span><span class=3D"n">tgsin</span>=
<span class=3D"p">(</span><span class=3D"kt">long</span><span class=3D"w"> =
</span><span class=3D"kt">double</span><span class=3D"w"> </span><span clas=
s=3D"n">x</span><span class=3D"p">)</span><span class=3D"w"> </span><span c=
lass=3D"p">{</span><span class=3D"w"> </span><span class=3D"k">return</span=
><span class=3D"w"> </span><span class=3D"n">sinl</span><span class=3D"p">(=
</span><span class=3D"n">x</span><span class=3D"p">);</span><span class=3D"=
w"> </span><span class=3D"p">}</span>
</pre></div>
</div>
<p>Given these declarations, one can call <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">tgsin</span></code> with a <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">float</span></code> value =
to
receive a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
float</span></code> result, with a <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">double</span></code> to receive a <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">double</span></code> resul=
t,
etc. Function overloading in C follows the rules of C++ function overloadin=
g
to pick the best overload given the call arguments, with a few C-specific
semantics:</p>
<ul class=3D"simple">
<li><p>Conversion from <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">float</span></code> or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">double</span></code> to <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">long</span> <span class=3D"pre">dou=
ble</span></code> is ranked as a
floating-point promotion (per C99) rather than as a floating-point conversi=
on
(as in C++).</p></li>
<li><p>A conversion from a pointer of type <code class=3D"docutils literal =
notranslate"><span class=3D"pre">T*</span></code> to a pointer of type <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">U*</span></cod=
e> is
considered a pointer conversion (with conversion rank) if <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">T</span></code> and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">U</span></code> a=
re
compatible types.</p></li>
<li><p>A conversion from type <code class=3D"docutils literal notranslate">=
<span class=3D"pre">T</span></code> to a value of type <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">U</span></code> is permitted i=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">T</span>=
</code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">U</spa=
n></code> are compatible types. This conversion is given =E2=80=9Cconversio=
n=E2=80=9D rank.</p></li>
<li><p>If no viable candidates are otherwise available, we allow a conversi=
on from a
pointer of type <code class=3D"docutils literal notranslate"><span class=3D=
"pre">T*</span></code> to a pointer of type <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">U*</span></code>, where <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">T</span></code> and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">U</span></code> a=
re
incompatible. This conversion is ranked below all other types of conversion=
s.
Please note: <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">U</span></code> lacking qualifiers that are present on <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">T</span></code> is sufficie=
nt
for <code class=3D"docutils literal notranslate"><span class=3D"pre">T</spa=
n></code> and <code class=3D"docutils literal notranslate"><span class=3D"p=
re">U</span></code> to be incompatible.</p></li>
</ul>
<p>The declaration of <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">overloadable</span></code> functions is restricted to function
declarations and definitions. If a function is marked with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">overloadable</span></=
code>
attribute, then all declarations and definitions of functions with that nam=
e,
except for at most one (see the note below about unmarked overloads), must =
have
the <code class=3D"docutils literal notranslate"><span class=3D"pre">overlo=
adable</span></code> attribute. In addition, redeclarations of a function w=
ith
the <code class=3D"docutils literal notranslate"><span class=3D"pre">overlo=
adable</span></code> attribute must have the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">overloadable</span></code> attribute, an=
d
redeclarations of a function without the <code class=3D"docutils literal no=
translate"><span class=3D"pre">overloadable</span></code> attribute must <e=
m>not</em>
have the <code class=3D"docutils literal notranslate"><span class=3D"pre">o=
verloadable</span></code> attribute. e.g.,</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">f</span><span class=3D"p">(</span><span class=3D"kt">int</span><spa=
n class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribu=
te__</span><span class=3D"p">((</span><span class=3D"n">overloadable</span>=
<span class=3D"p">));</span>
<span class=3D"kt">float</span><span class=3D"w"> </span><span class=3D"nf"=
>f</span><span class=3D"p">(</span><span class=3D"kt">float</span><span cla=
ss=3D"p">);</span><span class=3D"w"> </span><span class=3D"c1">// error: de=
claration of "f" must have the "overloadable" attribute</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">f=
</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"p">);</span><span class=3D"w"> </span><span class=3D"c1">// error: rede=
claration of "f" must have the "overloadable" attribute</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">g=
</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">overloadable</span><span c=
lass=3D"p">));</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">g=
</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span><span cl=
ass=3D"w"> </span><span class=3D"p">}</span><span class=3D"w"> </span><span=
 class=3D"c1">// error: redeclaration of "g" must also have the "overloadab=
le" attribute</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">h=
</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"p">);</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">h=
</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">overloadable</span><span c=
lass=3D"p">));</span><span class=3D"w"> </span><span class=3D"c1">// error:=
 declaration of "h" must not</span>
<span class=3D"w">                                          </span><span cl=
ass=3D"c1">// have the "overloadable" attribute</span>
</pre></div>
</div>
<p>Functions marked <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">overloadable</span></code> must have prototypes. Therefore, the
following code is ill-formed:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">h</span><span class=3D"p">()</span><span class=3D"w"> </span><span =
class=3D"n">__attribute__</span><span class=3D"p">((</span><span class=3D"n=
">overloadable</span><span class=3D"p">));</span><span class=3D"w"> </span>=
<span class=3D"c1">// error: h does not have a prototype</span>
</pre></div>
</div>
<p>However, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">overloadable</span></code> functions are allowed to use a ellipsis even i=
f there
are no named parameters (as is permitted in C++). This feature is particula=
rly
useful when combined with the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">unavailable</span></code> attribute:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">honeypot</span><span class=3D"p">(...)</span><span class=3D"w"> </=
span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><span=
 class=3D"n">overloadable</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"n">unavailable</span><span class=3D"p">));</span><s=
pan class=3D"w"> </span><span class=3D"c1">// calling me is an error</span>
</pre></div>
</div>
<p>Functions declared with the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">overloadable</span></code> attribute have their names =
mangled
according to the same rules as C++ function names. For example, the three
<code class=3D"docutils literal notranslate"><span class=3D"pre">tgsin</spa=
n></code> functions in our motivating example get the mangled names
<code class=3D"docutils literal notranslate"><span class=3D"pre">_Z5tgsinf<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">_Z5tgsind</span></code>, and <code class=3D"docutils literal notransla=
te"><span class=3D"pre">_Z5tgsine</span></code>, respectively. There are tw=
o
caveats to this use of name mangling:</p>
<ul class=3D"simple">
<li><p>Future versions of Clang may change the name mangling of functions o=
verloaded
in C, so you should not depend on an specific mangling. To be completely
safe, we strongly urge the use of <code class=3D"docutils literal notransla=
te"><span class=3D"pre">static</span> <span class=3D"pre">inline</span></co=
de> with <code class=3D"docutils literal notranslate"><span class=3D"pre">o=
verloadable</span></code>
functions.</p></li>
<li><p>The <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>overloadable</span></code> attribute has almost no meaning when used in C+=
+,
because names will already be mangled and functions are already overloadabl=
e.
However, when an <code class=3D"docutils literal notranslate"><span class=
=3D"pre">overloadable</span></code> function occurs within an <code class=
=3D"docutils literal notranslate"><span class=3D"pre">extern</span> <span c=
lass=3D"pre">"C"</span></code>
linkage specification, its name <em>will</em> be mangled in the same way as=
 it
would in C.</p></li>
</ul>
<p>For the purpose of backwards compatibility, at most one function with th=
e same
name as other <code class=3D"docutils literal notranslate"><span class=3D"p=
re">overloadable</span></code> functions may omit the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">overloadable</span></code>
attribute. In this case, the function without the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">overloadable</span></code> attribut=
e
will not have its name mangled.</p>
<p>For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"c1">// Notes with mangled names assume Itanium mangli=
ng.</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">f=
</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"p">);</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">f=
</span><span class=3D"p">(</span><span class=3D"kt">double</span><span clas=
s=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribute__</=
span><span class=3D"p">((</span><span class=3D"n">overloadable</span><span =
class=3D"p">));</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">f</span><span class=3D"p">(</s=
pan><span class=3D"mi">5</span><span class=3D"p">);</span><span class=3D"w"=
> </span><span class=3D"c1">// Emits a call to f (not _Z1fi, as it would wi=
th an overload that</span>
<span class=3D"w">        </span><span class=3D"c1">// was marked with over=
loadable).</span>
<span class=3D"w">  </span><span class=3D"n">f</span><span class=3D"p">(</s=
pan><span class=3D"mf">1.0</span><span class=3D"p">);</span><span class=3D"=
w"> </span><span class=3D"c1">// Emits a call to _Z1fd.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Support for unmarked overloads is not present in some versions of clang.=
 You may
query for it using <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__has_extension(overloadable_unmarked)</span></code>.</p>
<p>Query for this attribute with <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">__has_attribute(overloadable)</span></code>.</p>
</section>
<section id=3D"ownership-holds-ownership-returns-ownership-takes-clang-stat=
ic-analyzer">
<span id=3D"analyzer-ownership-attrs"></span><h3><a class=3D"toc-backref" h=
ref=3D"https://clang.llvm.org/docs/AttributeReference.html#id654" role=3D"d=
oc-backlink">ownership_holds, ownership_returns, ownership_takes (Clang Sta=
tic Analyzer)</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/doc=
s/AttributeReference.html#ownership-holds-ownership-returns-ownership-takes=
-clang-static-analyzer" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id232">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
32" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ownership_holds</span></code> <br> <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">ownership_returns</span></code=
> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">own=
ership_takes</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ownership_holds</span></code> <br> <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">clang::ownership_returns</span></code> <br> <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">clang::owner=
ship_takes</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ownership_holds</span></code> <br> <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">clang::ownership_returns</span></code> <br> <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">clang::owner=
ship_takes</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>In order for the Clang Static Analyzer to acknowledge these attributes, =
the
<code class=3D"docutils literal notranslate"><span class=3D"pre">Optimistic=
</span></code> config needs to be set to true for the checker
<code class=3D"docutils literal notranslate"><span class=3D"pre">unix.Dynam=
icMemoryModeling</span></code>:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">-Xclang=
</span> <span class=3D"pre">-analyzer-config</span> <span class=3D"pre">-Xc=
lang</span> <span class=3D"pre">unix.DynamicMemoryModeling:Optimistic=3Dtru=
e</span></code></p>
</div>
<p>These attributes are used by the Clang Static Analyzer=E2=80=99s dynamic=
 memory modeling
facilities to mark custom allocating/deallocating functions.</p>
<p>All 3 attributes=E2=80=99 first parameter of type string is the type of =
the allocation:
<code class=3D"docutils literal notranslate"><span class=3D"pre">malloc</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">new</span></code>, etc. to allow for catching <a class=3D"reference inter=
nal" href=3D"https://clang.llvm.org/docs/analyzer/checkers.html#unix-mismat=
cheddeallocator"><span class=3D"std std-ref">mismatched deallocation</span>=
</a> bugs. The allocation type can be any string, e.g.
a function annotated with
returning a piece of memory of type <code class=3D"docutils literal notrans=
late"><span class=3D"pre">lasagna</span></code> but freed with a function
annotated to release <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">cheese</span></code> typed memory will result in mismatched
deallocation warning.</p>
<p>The (currently) only allocation type having special meaning is <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">malloc</span></code=
> =E2=80=93
the Clang Static Analyzer makes sure that allocating functions annotated wi=
th
<code class=3D"docutils literal notranslate"><span class=3D"pre">malloc</sp=
an></code> are treated like they used the standard <code class=3D"docutils =
literal notranslate"><span class=3D"pre">malloc()</span></code>, and can be
safely deallocated with the standard <code class=3D"docutils literal notran=
slate"><span class=3D"pre">free()</span></code>.</p>
<ul class=3D"simple">
<li><p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>ownership_returns</span></code> to mark a function as an allocating functi=
on. Takes
1 parameter to denote the allocation type.</p></li>
<li><p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>ownership_takes</span></code> to mark a function as a deallocating functio=
n. Takes 2
parameters: the allocation type, and the index of the parameter that is bei=
ng
deallocated (counting from 1).</p></li>
<li><p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>ownership_holds</span></code> to mark that a function takes over the owner=
ship of a
piece of memory and will free it at some unspecified point in the future. L=
ike
<code class=3D"docutils literal notranslate"><span class=3D"pre">ownership_=
takes</span></code>, this takes 2 parameters: the allocation type, and the
index of the parameter whose ownership will be taken over (counting from 1)=
.</p></li>
</ul>
<p>The annotations <code class=3D"docutils literal notranslate"><span class=
=3D"pre">ownership_takes</span></code> and <code class=3D"docutils literal =
notranslate"><span class=3D"pre">ownership_holds</span></code> both prevent=
 memory
leak reports (concerning the specified argument); the difference between th=
em
is that using taken memory is a use-after-free error, while using held memo=
ry
is assumed to be legitimate.</p>
<p>Example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"c1">// Denotes that my_malloc will return with a dyna=
mically allocated piece of</span>
<span class=3D"c1">// memory using malloc().</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
__attribute</span><span class=3D"p">((</span><span class=3D"n">ownership_re=
turns</span><span class=3D"p">(</span><span class=3D"n">malloc</span><span =
class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"o">*</span><=
span class=3D"n">my_malloc</span><span class=3D"p">(</span><span class=3D"k=
t">size_t</span><span class=3D"p">);</span>

<span class=3D"c1">// Denotes that my_free will deallocate its parameter us=
ing free().</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
__attribute</span><span class=3D"p">((</span><span class=3D"n">ownership_ta=
kes</span><span class=3D"p">(</span><span class=3D"n">malloc</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">1</span><spa=
n class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"n">my_free=
</span><span class=3D"p">(</span><span class=3D"kt">void</span><span class=
=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">);</span>

<span class=3D"c1">// Denotes that my_hold will take over the ownership of =
its parameter that was</span>
<span class=3D"c1">// allocated via malloc().</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
__attribute</span><span class=3D"p">((</span><span class=3D"n">ownership_ho=
lds</span><span class=3D"p">(</span><span class=3D"n">malloc</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">1</span><spa=
n class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"n">my_hold=
</span><span class=3D"p">(</span><span class=3D"kt">void</span><span class=
=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">);</span>
</pre></div>
</div>
<p>Further reading about dynamic memory modeling in the Clang Static Analyz=
er is
found in these checker docs:
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/analyze=
r/checkers.html#unix-malloc"><span class=3D"std std-ref">unix.Malloc</span>=
</a>, <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/a=
nalyzer/checkers.html#unix-mallocsizeof"><span class=3D"std std-ref">unix.M=
allocSizeof</span></a>,
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/analyze=
r/checkers.html#unix-mismatcheddeallocator"><span class=3D"std std-ref">uni=
x.MismatchedDeallocator</span></a>,
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/analyze=
r/checkers.html#cplusplus-newdelete"><span class=3D"std std-ref">cplusplus.=
NewDelete</span></a>,
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/analyze=
r/checkers.html#cplusplus-newdeleteleaks"><span class=3D"std std-ref">cplus=
plus.NewDeleteLeaks</span></a>,
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/analyze=
r/checkers.html#optin-taint-taintedalloc"><span class=3D"std std-ref">optin=
.taint.TaintedAlloc</span></a>.
Mind that many more checkers are affected by dynamic memory modeling change=
s to
some extent.</p>
<p>Further reading for other annotations:
<a class=3D"reference external" href=3D"https://clang.llvm.org/docs/analyze=
r/user-docs/Annotations.html">Source Annotations in the Clang Static Analyz=
er</a>.</p>
</section>
<section id=3D"packoffset">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id655" role=3D"doc-backlink">packoffset</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#packoffse=
t" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id233">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
33" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pac=
koffset</span></code></p></td>
<td></td>
</tr>
</tbody>
</table>
<p>The packoffset attribute is used to change the layout of a cbuffer.
Attribute spelling in HLSL is: <code class=3D"docutils literal notranslate"=
><span class=3D"pre">packoffset(</span> <span class=3D"pre">c[Subcomponent]=
[.component]</span> <span class=3D"pre">)</span></code>.
A subcomponent is a register number, which is an integer. A component is in=
 the form of [.xyzw].</p>
<p>Examples:</p>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"k">cbuffer</span><span class=3D"w"> </span><span c=
lass=3D"n">A</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">float3</span><span class=3D"w=
"> </span><span class=3D"n">a</span><span class=3D"w"> </span><span class=
=3D"o">:</span><span class=3D"w"> </span><span class=3D"k">packoffset</span=
><span class=3D"p">(</span><span class=3D"n">c0</span><span class=3D"p">.</=
span><span class=3D"n">y</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"kt">float4</span><span class=3D"w=
"> </span><span class=3D"n">b</span><span class=3D"w"> </span><span class=
=3D"o">:</span><span class=3D"w"> </span><span class=3D"k">packoffset</span=
><span class=3D"p">(</span><span class=3D"n">c4</span><span class=3D"p">);<=
/span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-g=
raphics-hlsl-variable-packoffset">https://learn.microsoft.com/en-us/windows=
/win32/direct3dhlsl/dx-graphics-hlsl-variable-packoffset</a></p>
</section>
<section id=3D"patchable-function-entry">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id656" role=3D"doc-backlink">patchable_function_entry</a><a c=
lass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.=
html#patchable-function-entry" title=3D"Link to this heading">=C2=B6</a></h=
3>
<table class=3D"docutils align-default" id=3D"id234">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
34" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">patchable_function_entry</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::patchable_function_entry</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::patchable_function_entry</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((patchable_function_entry(N,M)))</span></code> is used to generate M=
 NOPs
before the function entry and N-M NOPs after the function entry. This attri=
bute
takes precedence over the command line option <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">-fpatchable-function-entry=3DN,M</span>=
</code>.
<code class=3D"docutils literal notranslate"><span class=3D"pre">M</span></=
code> defaults to 0 if omitted.</p>
<p>This attribute is only supported on
aarch64/aarch64-be/loongarch32/loongarch64/riscv32/riscv64/i386/x86-64/ppc/=
ppc64 targets.
For ppc/ppc64 targets, AIX is still not supported.</p>
</section>
<section id=3D"preserve-access-index">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id657" role=3D"doc-backlink">preserve_access_index</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#preserve-access-index" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id235">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
35" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">preserve_access_index</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_access_index</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_access_index</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((preserve_access_index))</span></code>
attribute for the BPF target. This attribute may be attached to a
struct or union declaration, where if -g is specified, it enables
preserving struct or union member access debuginfo indices of this
struct or union, similar to clang <code class=3D"docutils literal notransla=
te"><span class=3D"pre">__builtin_preserve_access_index()</span></code>.</p=
>
</section>
<section id=3D"preserve-static-offset">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id658" role=3D"doc-backlink">preserve_static_offset</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#preserve-static-offset" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id236">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
36" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">preserve_static_offset</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_static_offset</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::preserve_static_offset</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((preserve_static_offset))</span></code>
attribute for the BPF target. This attribute may be attached to a
struct or union declaration. Reading or writing fields of types having
such annotation is guaranteed to generate LDX/ST/STX instruction with
offset corresponding to the field.</p>
<p>For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">struct</span><span class=3D"w"> </span><span class=
=3D"nc">foo</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">b</span><span class=3D"p">;</span>
<span class=3D"p">};</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>bar</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">struct</span><span class=3D"w"=
> </span><span class=3D"nc">foo</span><span class=3D"w"> </span><span class=
=3D"n">b</span><span class=3D"p">;</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"n">__att=
ribute__</span><span class=3D"p">((</span><span class=3D"n">preserve_static=
_offset</span><span class=3D"p">));</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
buz</span><span class=3D"p">(</span><span class=3D"k">struct</span><span cl=
ass=3D"w"> </span><span class=3D"nc">bar</span><span class=3D"w"> </span><s=
pan class=3D"o">*</span><span class=3D"n">g</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">g</span><span class=3D"o">-&gt=
;</span><span class=3D"n">b</span><span class=3D"p">.</span><span class=3D"=
n">a</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span clas=
s=3D"w"> </span><span class=3D"mi">42</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The assignment to <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">g</span></code>=E2=80=99s field would produce an ST instruction =
with
offset 8: <code class=3D"docutils literal notranslate"><span class=3D"pre">=
*(u32)(r1</span> <span class=3D"pre">+</span> <span class=3D"pre">8)</span>=
 <span class=3D"pre">=3D</span> <span class=3D"pre">42;</span></code>.</p>
<p>Without this attribute generated instructions might be different,
depending on optimizations behavior. E.g. the example above could be
rewritten as <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">r1</span> <span class=3D"pre">+=3D</span> <span class=3D"pre">8;</span> =
<span class=3D"pre">*(u32)(r1</span> <span class=3D"pre">+</span> <span cla=
ss=3D"pre">0)</span> <span class=3D"pre">=3D</span> <span class=3D"pre">42;=
</span></code>.</p>
</section>
<section id=3D"register">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id659" role=3D"doc-backlink">register</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#register" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id237">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
37" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">reg=
ister</span></code></p></td>
<td></td>
</tr>
</tbody>
</table>
<p>The resource binding attribute sets the virtual register and logical reg=
ister space for a resource.
Attribute spelling in HLSL is: <code class=3D"docutils literal notranslate"=
><span class=3D"pre">register(slot</span> <span class=3D"pre">[,</span> <sp=
an class=3D"pre">space])</span></code>.
<code class=3D"docutils literal notranslate"><span class=3D"pre">slot</span=
></code> takes the format <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">[type][number]</span></code>,
where <code class=3D"docutils literal notranslate"><span class=3D"pre">type=
</span></code> is a single character specifying the resource type and <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">number</span></=
code> is the virtual register number.</p>
<p>Register types are:
t for shader resource views (SRV),
s for samplers,
u for unordered access views (UAV),
b for constant buffer views (CBV).</p>
<p>Register space is specified in the format <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">space[number]</span></code> and defaults=
 to <code class=3D"docutils literal notranslate"><span class=3D"pre">space0=
</span></code> if omitted.
Here=E2=80=99re resource binding examples with and without space:</p>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"kt">RWBuffer</span><span class=3D"o">&lt;</span><s=
pan class=3D"kt">float</span><span class=3D"o">&gt;</span><span class=3D"w"=
> </span><span class=3D"n">Uav</span><span class=3D"w"> </span><span class=
=3D"o">:</span><span class=3D"w"> </span><span class=3D"k">register</span><=
span class=3D"p">(</span><span class=3D"n">u3</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"n">space1</span><span class=3D"=
p">);</span>
<span class=3D"kt">Buffer</span><span class=3D"o">&lt;</span><span class=3D=
"kt">float</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><sp=
an class=3D"n">Buf</span><span class=3D"w"> </span><span class=3D"o">:</spa=
n><span class=3D"w"> </span><span class=3D"k">register</span><span class=3D=
"p">(</span><span class=3D"n">t1</span><span class=3D"p">);</span>
</pre></div>
</div>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://docs.microsoft.com/en-us/windows/win32/direct3d12/resourc=
e-binding-in-hlsl">https://docs.microsoft.com/en-us/windows/win32/direct3d1=
2/resource-binding-in-hlsl</a></p>
</section>
<section id=3D"reinitializes">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id660" role=3D"doc-backlink">reinitializes</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#reinit=
ializes" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id238">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
38" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">reinitializes</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::reinitializes</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">rei=
nitializes</span></code> attribute can be applied to a non-static, non-cons=
t C++
member function to indicate that this member function reinitializes the ent=
ire
object to a known state, independent of the previous state of the object.</=
p>
<p>This attribute can be interpreted by static analyzers that warn about us=
es of an
object that has been left in an indeterminate state by a move operation. If=
 a
member function marked with the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">reinitializes</span></code> attribute is called on a
moved-from object, the analyzer can conclude that the object is no longer i=
n an
indeterminate state.</p>
<p>A typical example where this attribute would be used is on functions tha=
t clear
a container class:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">template</span><span class=3D"w"> </span><span c=
lass=3D"o">&lt;</span><span class=3D"k">class</span><span class=3D"w"> </sp=
an><span class=3D"nc">T</span><span class=3D"o">&gt;</span>
<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"nc">=
Container</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"k">public</span><span class=3D"o">:</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">reinitializes</span><=
span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"kt">void=
</span><span class=3D"w"> </span><span class=3D"n">Clear</span><span class=
=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">};</span>
</pre></div>
</div>
</section>
<section id=3D"release-capability-release-shared-capability">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id661" role=3D"doc-backlink">release_capability, release_shar=
ed_capability</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/doc=
s/AttributeReference.html#release-capability-release-shared-capability" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id239">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
39" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">release_capability</span></code> <br> <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">release_shared_capability</=
span></code> <br> <code class=3D"docutils literal notranslate"><span class=
=3D"pre">release_generic_capability</span></code> <br> <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">unlock_function</span></code><=
/p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::release_capability</span></code> <br> <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">clang::release_shared_capability</span></co=
de> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">c=
lang::release_generic_capability</span></code> <br> <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">clang::unlock_function</span></co=
de></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Marks a function as releasing a capability.</p>
</section>
<section id=3D"retain">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id662" role=3D"doc-backlink">retain</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#retain" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id240">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
40" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">retain</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::retain</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::retain</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute, when attached to a function or variable definition, prev=
ents
section garbage collection in the linker. It does not prevent other discard
mechanisms, such as archive member selection, and COMDAT group resolution.<=
/p>
<p>If the compiler does not emit the definition, e.g. because it was not us=
ed in
the translation unit or the compiler was able to eliminate all of the uses,
this attribute has no effect.  This attribute is typically combined with th=
e
<code class=3D"docutils literal notranslate"><span class=3D"pre">used</span=
></code> attribute to force the definition to be emitted and preserved into=
 the
final linked image.</p>
<p>This attribute is only necessary on ELF targets; other targets prevent s=
ection
garbage collection by the linker when using the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">used</span></code> attribute alone.
Using the attributes together should result in consistent behavior across
targets.</p>
<p>This attribute requires the linker to support the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">SHF_GNU_RETAIN</span></code> ext=
ension.
This support is available in GNU <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">ld</span></code> and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">gold</span></code> as of binutils 2.36, a=
s
well as in <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>ld.lld</span></code> 13.</p>
</section>
<section id=3D"shader">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id663" role=3D"doc-backlink">shader</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#shader" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id241">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
41" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sha=
der</span></code> type attribute applies to HLSL shader entry functions to
identify the shader type for the entry function.
The syntax is:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre><sp=
an></span>``[shader(string-literal)]``
</pre></div>
</div>
<p>where the string literal is one of: =E2=80=9Cpixel=E2=80=9D, =E2=80=9Cve=
rtex=E2=80=9D, =E2=80=9Cgeometry=E2=80=9D, =E2=80=9Chull=E2=80=9D,
=E2=80=9Cdomain=E2=80=9D, =E2=80=9Ccompute=E2=80=9D, =E2=80=9Craygeneration=
=E2=80=9D, =E2=80=9Cintersection=E2=80=9D, =E2=80=9Canyhit=E2=80=9D, =E2=80=
=9Cclosesthit=E2=80=9D,
=E2=80=9Cmiss=E2=80=9D, =E2=80=9Ccallable=E2=80=9D, =E2=80=9Cmesh=E2=80=9D,=
 =E2=80=9Camplification=E2=80=9D. Normally the shader type is set
by shader target with the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">-T</span></code> option like <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">-Tps_6_1</span></code>. When compiling t=
o a
library target like <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">lib_6_3</span></code>, the shader type attribute can help the
compiler to identify the shader type. It is mostly used by Raytracing shade=
rs
where shaders must be compiled into a library and linked at runtime.</p>
</section>
<section id=3D"short-call-near">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id664" role=3D"doc-backlink">short_call, near</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sho=
rt-call-near" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id242">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
42" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">short_call</span></code> <br> <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">near</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::short_call</span></code> <br> <code class=3D"docutils literal notranslate=
"><span class=3D"pre">gnu::near</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::short_call</span></code> <br> <code class=3D"docutils literal notranslate=
"><span class=3D"pre">gnu::near</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((long_call))</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">__attribute__((far))</span></co=
de>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((short__call))</span></code>, and <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">__attribute__((near))</span></code> attributes
on MIPS targets. These attributes may only be added to function declaration=
s
and change the code generated by the compiler when directly calling
the function. The <code class=3D"docutils literal notranslate"><span class=
=3D"pre">short_call</span></code> and <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">near</span></code> attributes are synonyms and
allow calls to the function to be made using the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">jal</span></code> instruction, which
requires the function to be located in the same naturally aligned 256MB seg=
ment
as the caller. The <code class=3D"docutils literal notranslate"><span class=
=3D"pre">long_call</span></code> and <code class=3D"docutils literal notran=
slate"><span class=3D"pre">far</span></code> attributes are synonyms and
require the use of a different call sequence that works regardless
of the distance between the functions.</p>
<p>These attributes have no effect for position-independent code.</p>
<p>These attributes take priority over command line switches such
as <code class=3D"docutils literal notranslate"><span class=3D"pre">-mlong-=
calls</span></code> and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">-mno-long-calls</span></code>.</p>
</section>
<section id=3D"signal">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id665" role=3D"doc-backlink">signal</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#signal" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id243">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
43" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">signal</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::signal</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::signal</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((signal))</span></code> attribute on
AVR targets. This attribute may be attached to a function definition and in=
structs
the backend to generate appropriate function entry/exit code so that it can=
 be used
directly as an interrupt service routine.</p>
<p>Interrupt handler functions defined with the signal attribute do not re-=
enable interrupts.</p>
</section>
<section id=3D"id12">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id666" role=3D"doc-backlink">speculative_load_hardening</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferenc=
e.html#id12" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id244">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
44" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">speculative_load_hardening</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::speculative_load_hardening</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::speculative_load_hardening</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<dl>
<dt>This attribute can be applied to a function declaration in order to ind=
icate</dt><dd><p>that <a class=3D"reference external" href=3D"https://llvm.=
org/docs/SpeculativeLoadHardening.html">Speculative Load Hardening</a>
should be enabled for the function body. This can also be applied to a meth=
od
in Objective C. This attribute will take precedence over the command line f=
lag in
the case where <a class=3D"reference external" href=3D"https://clang.llvm.o=
rg/docs/ClangCommandLineReference.html#cmdoption-clang-mspeculative-load-ha=
rdening">-mno-speculative-load-hardening</a> is specified.</p>
<p>Speculative Load Hardening is a best-effort mitigation against
information leak attacks that make use of control flow
miss-speculation - specifically miss-speculation of whether a branch
is taken or not. Typically vulnerabilities enabling such attacks are
classified as =E2=80=9CSpectre variant #1=E2=80=9D. Notably, this does not =
attempt to
mitigate against miss-speculation of branch target, classified as
=E2=80=9CSpectre variant #2=E2=80=9D vulnerabilities.</p>
<p>When inlining, the attribute is sticky. Inlining a function that
carries this attribute will cause the caller to gain the
attribute. This is intended to provide a maximally conservative model
where the code in a function annotated with this attribute will always
(even after inlining) end up hardened.</p>
</dd>
</dl>
</section>
<section id=3D"strict-gs-check">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id667" role=3D"doc-backlink">strict_gs_check</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#stri=
ct-gs-check" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id245">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
45" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">str=
ict_gs_check</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the Microsoft style <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">__declspec((strict_gs_check))</span></code> att=
ribute
which upgrades the stack protector check from <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">-fstack-protector</span></code> to
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fstack-pr=
otector-strong</span></code>.</p>
<p>For example, it upgrades the stack protector for the function <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">foo</span></code> to
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fstack-pr=
otector-strong</span></code> but function <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">bar</span></code> will still be built with =
the
stack protector with the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">-fstack-protector</span></code> option.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kr">__declspec</span><span class=3D"p">((</span><span=
 class=3D"n">strict_gs_check</span><span class=3D"p">))</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">fo=
o</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">);</span><span c=
lass=3D"w"> </span><span class=3D"c1">// stack protection will be upgraded =
for foo.</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">b=
ar</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">y</span><span class=3D"p">);</span><span c=
lass=3D"w"> </span><span class=3D"c1">// bar can be built with the standard=
 stack protector checks.</span>
</pre></div>
</div>
</section>
<section id=3D"sycl-kernel">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id668" role=3D"doc-backlink">sycl_kernel</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sycl-ker=
nel" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id246">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
46" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">sycl_kernel</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sycl_kernel</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sycl_kernel</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">syc=
l_kernel</span></code> attribute specifies that a function template will be=
 used
to outline device code and to generate an OpenCL kernel.
Here is a code example of the SYCL program, which demonstrates the compiler=
=E2=80=99s
outlining job:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">foo</span><span class=3D"p">(</span><span class=3D"kt">int</span><s=
pan class=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </s=
pan><span class=3D"k">return</span><span class=3D"w"> </span><span class=3D=
"o">++</span><span class=3D"n">x</span><span class=3D"p">;</span><span clas=
s=3D"w"> </span><span class=3D"p">}</span>

<span class=3D"k">using</span><span class=3D"w"> </span><span class=3D"k">n=
amespace</span><span class=3D"w"> </span><span class=3D"nn">cl</span><span =
class=3D"o">::</span><span class=3D"nn">sycl</span><span class=3D"p">;</spa=
n>
<span class=3D"n">queue</span><span class=3D"w"> </span><span class=3D"n">Q=
</span><span class=3D"p">;</span>
<span class=3D"n">buffer</span><span class=3D"o">&lt;</span><span class=3D"=
kt">int</span><span class=3D"p">,</span><span class=3D"w"> </span><span cla=
ss=3D"mi">1</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><s=
pan class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">range</=
span><span class=3D"o">&lt;</span><span class=3D"mi">1</span><span class=3D=
"o">&gt;</span><span class=3D"p">{</span><span class=3D"mi">1024</span><spa=
n class=3D"p">});</span>
<span class=3D"n">Q</span><span class=3D"p">.</span><span class=3D"n">submi=
t</span><span class=3D"p">([</span><span class=3D"o">&amp;</span><span clas=
s=3D"p">](</span><span class=3D"n">handler</span><span class=3D"o">&amp;</s=
pan><span class=3D"w"> </span><span class=3D"n">cgh</span><span class=3D"p"=
>)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">A</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=
=3D"p">.</span><span class=3D"n">get_access</span><span class=3D"o">&lt;</s=
pan><span class=3D"n">access</span><span class=3D"o">::</span><span class=
=3D"n">mode</span><span class=3D"o">::</span><span class=3D"n">write</span>=
<span class=3D"o">&gt;</span><span class=3D"p">(</span><span class=3D"n">cg=
h</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">cgh</span><span class=3D"p">.<=
/span><span class=3D"n">parallel_for</span><span class=3D"o">&lt;</span><sp=
an class=3D"n">init_a</span><span class=3D"o">&gt;</span><span class=3D"p">=
(</span><span class=3D"n">range</span><span class=3D"o">&lt;</span><span cl=
ass=3D"mi">1</span><span class=3D"o">&gt;</span><span class=3D"p">{</span><=
span class=3D"mi">1024</span><span class=3D"p">},</span><span class=3D"w"> =
</span><span class=3D"p">[</span><span class=3D"o">=3D</span><span class=3D=
"p">](</span><span class=3D"n">id</span><span class=3D"o">&lt;</span><span =
class=3D"mi">1</span><span class=3D"o">&gt;</span><span class=3D"w"> </span=
><span class=3D"n">index</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">A</span><span class=3D"p">[<=
/span><span class=3D"n">index</span><span class=3D"p">]</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"n">index</span><span class=3D"p">[</span><span class=3D"mi">0</spa=
n><span class=3D"p">]</span><span class=3D"w"> </span><span class=3D"o">+</=
span><span class=3D"w"> </span><span class=3D"n">foo</span><span class=3D"p=
">(</span><span class=3D"mi">42</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"p">});</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>A C++ function object passed to the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">parallel_for</span></code> is called a =E2=80=
=9CSYCL kernel=E2=80=9D.
A SYCL kernel defines the entry point to the =E2=80=9Cdevice part=E2=80=9D =
of the code. The
compiler will emit all symbols accessible from a =E2=80=9Ckernel=E2=80=9D. =
In this code
example, the compiler will emit =E2=80=9Cfoo=E2=80=9D function. More detail=
s about the
compilation of functions for the device part can be found in the SYCL 1.2.1
specification Section 6.4.
To show to the compiler entry point to the =E2=80=9Cdevice part=E2=80=9D of=
 the code, the SYCL
runtime can use the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">sycl_kernel</span></code> attribute in the following way:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">namespace</span><span class=3D"w"> </span><span =
class=3D"nn">cl</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"k">namespace</span><span class=3D"w"> </span><span class=3D"=
nn">sycl</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"nc">=
handler</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">template</span><span class=3D"=
w"> </span><span class=3D"o">&lt;</span><span class=3D"k">typename</span><s=
pan class=3D"w"> </span><span class=3D"nc">KernelName</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">typename</span><span=
 class=3D"w"> </span><span class=3D"nc">KernelType</span><span class=3D"cm"=
>/*, ...*/</span><span class=3D"o">&gt;</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">sycl_kernel</span><span class=3D"p">))</=
span><span class=3D"w"> </span><span class=3D"kt">void</span><span class=3D=
"w"> </span><span class=3D"n">sycl_kernel_function</span><span class=3D"p">=
(</span><span class=3D"n">KernelType</span><span class=3D"w"> </span><span =
class=3D"n">KernelFuncObj</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"c1">// ...</span>
<span class=3D"w">    </span><span class=3D"n">KernelFuncObj</span><span cl=
ass=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"p">}</span>

<span class=3D"w">  </span><span class=3D"k">template</span><span class=3D"=
w"> </span><span class=3D"o">&lt;</span><span class=3D"k">typename</span><s=
pan class=3D"w"> </span><span class=3D"nc">KernelName</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">typename</span><span=
 class=3D"w"> </span><span class=3D"nc">KernelType</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">Dims</span><span class=3D"o">&gt;</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"n">parallel_for</span><span class=3D"p">(</span><spa=
n class=3D"n">range</span><span class=3D"o">&lt;</span><span class=3D"n">Di=
ms</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><span class=
=3D"n">NumWorkItems</span><span class=3D"p">,</span><span class=3D"w"> </sp=
an><span class=3D"n">KernelType</span><span class=3D"w"> </span><span class=
=3D"n">KernelFunc</span><span class=3D"p">)</span><span class=3D"w"> </span=
><span class=3D"p">{</span>
<span class=3D"cp">#ifdef __SYCL_DEVICE_ONLY__</span>
<span class=3D"w">    </span><span class=3D"n">sycl_kernel_function</span><=
span class=3D"o">&lt;</span><span class=3D"n">KernelName</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">KernelType</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">Dims=
</span><span class=3D"o">&gt;</span><span class=3D"p">(</span><span class=
=3D"n">KernelFunc</span><span class=3D"p">);</span>
<span class=3D"cp">#else</span>
<span class=3D"w">    </span><span class=3D"c1">// Host implementation</spa=
n>
<span class=3D"cp">#endif</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">};</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"c1">// n=
amespace sycl</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"c1">// n=
amespace cl</span>
</pre></div>
</div>
<p>The compiler will also generate an OpenCL kernel using the function mark=
ed with
the <code class=3D"docutils literal notranslate"><span class=3D"pre">sycl_k=
ernel</span></code> attribute.
Here is the list of SYCL device compiler expectations with regard to the
function marked with the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">sycl_kernel</span></code> attribute:</p>
<ul class=3D"simple">
<li><p>The function must be a template with at least two type template para=
meters.
The compiler generates an OpenCL kernel and uses the first template paramet=
er
as a unique name for the generated OpenCL kernel. The host application uses
this unique name to invoke the OpenCL kernel generated for the SYCL kernel
specialized by this name and second template parameter <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">KernelType</span></code> (whic=
h
might be an unnamed function object type).</p></li>
<li><p>The function must have at least one parameter. The first parameter i=
s
required to be a function object type (named or unnamed i.e. lambda). The
compiler uses function object type fields to generate OpenCL kernel
parameters.</p></li>
<li><p>The function must return void. The compiler reuses the body of marke=
d functions to
generate the OpenCL kernel body, and the OpenCL kernel must return <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">void</span></code>=
.</p></li>
</ul>
<p>The SYCL kernel in the previous code sample meets these expectations.</p=
>
</section>
<section id=3D"sycl-kernel-entry-point">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id669" role=3D"doc-backlink">sycl_kernel_entry_point</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#sycl-kernel-entry-point" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id247">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
47" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">sycl_kernel_entry_point</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sycl_kernel_entry_point</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sycl_kernel_entry_point</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">syc=
l_kernel_entry_point</span></code> attribute facilitates the generation of =
an
offload kernel entry point, sometimes called a SYCL kernel caller function,
suitable for invoking a SYCL kernel on an offload device. The attribute is
intended for use in the implementation of SYCL kernel invocation functions
like the <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
ingle_task</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">parallel_for</span></code> member functions of the
<code class=3D"docutils literal notranslate"><span class=3D"pre">sycl::hand=
ler</span></code> class specified in section 4.9.4, =E2=80=9CCommand group =
<code class=3D"docutils literal notranslate"><span class=3D"pre">handler</s=
pan></code>
class=E2=80=9D, of the SYCL 2020 specification.</p>
<p>The attribute requires a single type argument that specifies a class typ=
e that
meets the requirements for a SYCL kernel name as described in section 5.2,
=E2=80=9CNaming of kernels=E2=80=9D, of the SYCL 2020 specification. A uniq=
ue kernel name type
is required for each function declared with the attribute. The attribute ma=
y
not first appear on a declaration that follows a definition of the function=
.</p>
<p>The attribute only appertains to functions and only those that meet the
following requirements.</p>
<ul class=3D"simple">
<li><p>Has a non-deduced <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">void</span></code> return type.</p></li>
<li><p>Is not a non-static member function, constructor, or destructor.</p>=
</li>
<li><p>Is not a C variadic function.</p></li>
<li><p>Is not a coroutine.</p></li>
<li><p>Is not defined as deleted or as defaulted.</p></li>
<li><p>Is not defined with a function try block.</p></li>
<li><p>Is not declared with the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">constexpr</span></code> or <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">consteval</span></code> specifiers.<=
/p></li>
<li><p>Is not declared with the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">[[noreturn]]</span></code> attribute.</p></li>
</ul>
<p>Use in the implementation of a SYCL kernel invocation function might loo=
k as
follows.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">namespace</span><span class=3D"w"> </span><span =
class=3D"nn">sycl</span><span class=3D"w"> </span><span class=3D"p">{</span=
>
<span class=3D"k">class</span><span class=3D"w"> </span><span class=3D"nc">=
handler</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">template</span><span class=3D"=
o">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> </span><s=
pan class=3D"nc">KernelNameType</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"k">typename</span><span class=3D"w"> </span><=
span class=3D"nc">KernelType</span><span class=3D"o">&gt;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"w"> </=
span><span class=3D"n">clang</span><span class=3D"o">::</span><span class=
=3D"n">sycl_kernel_entry_point</span><span class=3D"p">(</span><span class=
=3D"n">KernelNameType</span><span class=3D"p">)</span><span class=3D"w"> </=
span><span class=3D"p">]]</span>
<span class=3D"w">  </span><span class=3D"k">static</span><span class=3D"w"=
> </span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"n">kernel_entry_point</span><span class=3D"p">(</span><span class=3D"n=
">KernelType</span><span class=3D"w"> </span><span class=3D"n">kernel</span=
><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</s=
pan>
<span class=3D"w">    </span><span class=3D"n">kernel</span><span class=3D"=
p">();</span>
<span class=3D"w">  </span><span class=3D"p">}</span>

<span class=3D"k">public</span><span class=3D"o">:</span>
<span class=3D"w">  </span><span class=3D"k">template</span><span class=3D"=
o">&lt;</span><span class=3D"k">typename</span><span class=3D"w"> </span><s=
pan class=3D"nc">KernelNameType</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"k">typename</span><span class=3D"w"> </span><=
span class=3D"nc">KernelType</span><span class=3D"o">&gt;</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"n">single_task</span><span class=3D"p">(</span><span=
 class=3D"n">KernelType</span><span class=3D"w"> </span><span class=3D"n">k=
ernel</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"c1">// Call kernel_entry_point(=
) to trigger generation of an offload</span>
<span class=3D"w">    </span><span class=3D"c1">// kernel entry point.</spa=
n>
<span class=3D"w">    </span><span class=3D"n">kernel_entry_point</span><sp=
an class=3D"o">&lt;</span><span class=3D"n">KernelNameType</span><span clas=
s=3D"o">&gt;</span><span class=3D"p">(</span><span class=3D"n">kernel</span=
><span class=3D"p">);</span>
<span class=3D"w">    </span><span class=3D"c1">// Call functions appropria=
te for the desired offload backend</span>
<span class=3D"w">    </span><span class=3D"c1">// (OpenCL, CUDA, HIP, Leve=
l Zero, etc...).</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">};</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"c1">// n=
amespace sycl</span>
</pre></div>
</div>
<p>A SYCL kernel is a callable object of class type that is constructed on =
a host,
often via a lambda expression, and then passed to a SYCL kernel invocation
function to be executed on an offload device. A SYCL kernel invocation func=
tion
is responsible for copying the provided SYCL kernel object to an offload
device and initiating a call to it. The SYCL kernel object and its data mem=
bers
constitute the parameters of an offload kernel.</p>
<p>A SYCL kernel type is required to satisfy the device copyability require=
ments
specified in section 3.13.1, =E2=80=9CDevice copyable=E2=80=9D, of the SYCL=
 2020 specification.
Additionally, any data members of the kernel object type are required to sa=
tisfy
section 4.12.4, =E2=80=9CRules for parameter passing to kernels=E2=80=9D. F=
or most types, these
rules require that the type is trivially copyable.  However, the SYCL
specification mandates that certain special SYCL types, such as
<code class=3D"docutils literal notranslate"><span class=3D"pre">sycl::acce=
ssor</span></code> and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">sycl::stream</span></code> be device copyable even if they are=
 not
trivially copyable. These types require special handling because they canno=
t
be copied to device memory as if by <code class=3D"docutils literal notrans=
late"><span class=3D"pre">memcpy()</span></code>. Additionally, some offloa=
d
backends, OpenCL for example, require objects of some of these types to be
passed as individual arguments to the offload kernel.</p>
<p>An offload kernel consists of an entry point function that declares the
parameters of the offload kernel and the set of all functions and variables=
 that
are directly or indirectly used by the entry point function.</p>
<p>A SYCL kernel invocation function invokes a SYCL kernel on a device by
performing the following tasks (likely with the help of an offload backend
like OpenCL):</p>
<ol class=3D"arabic simple">
<li><p>Identifying the offload kernel entry point to be used for the SYCL k=
ernel.</p></li>
<li><p>Deconstructing the SYCL kernel object, if necessary, to produce the =
set of
offload kernel arguments required by the offload kernel entry point.</p></l=
i>
<li><p>Copying the offload kernel arguments to device memory.</p></li>
<li><p>Initiating execution of the offload kernel entry point.</p></li>
</ol>
<p>The offload kernel entry point for a SYCL kernel performs the following =
tasks:</p>
<ol class=3D"arabic simple">
<li><p>Reconstituting the SYCL kernel object, if necessary, using the offlo=
ad
kernel parameters.</p></li>
<li><p>Calling the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">operator()</span></code> member function of the (reconstituted) SY=
CL kernel
object.</p></li>
</ol>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">syc=
l_kernel_entry_point</span></code> attribute automates generation of an off=
load
kernel entry point that performs those latter tasks. The parameters and bod=
y of
a function declared with the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">sycl_kernel_entry_point</span></code> attribute specify =
a
pattern from which the parameters and body of the entry point function are
derived. Consider the following call to a SYCL kernel invocation function.<=
/p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">S</span><span class=3D"w"> </span><span class=3D"p">{</span><span=
 class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </span=
><span class=3D"n">i</span><span class=3D"p">;</span><span class=3D"w"> </s=
pan><span class=3D"p">};</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
f</span><span class=3D"p">(</span><span class=3D"n">sycl</span><span class=
=3D"o">::</span><span class=3D"n">handler</span><span class=3D"w"> </span><=
span class=3D"o">&amp;</span><span class=3D"n">handler</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">sycl</span><span cl=
ass=3D"o">::</span><span class=3D"n">stream</span><span class=3D"w"> </span=
><span class=3D"o">&amp;</span><span class=3D"n">sout</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">S</span><span class=
=3D"w"> </span><span class=3D"n">s</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">handler</span><span class=3D"p=
">.</span><span class=3D"n">single_task</span><span class=3D"o">&lt;</span>=
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>KN</span><span class=3D"o">&gt;</span><span class=3D"p">([</span><span cla=
ss=3D"o">=3D</span><span class=3D"p">]</span><span class=3D"w"> </span><spa=
n class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">sout</span><span class=3D"w"=
> </span><span class=3D"o">&lt;&lt;</span><span class=3D"w"> </span><span c=
lass=3D"s">"The value of s.i is "</span><span class=3D"w"> </span><span cla=
ss=3D"o">&lt;&lt;</span><span class=3D"w"> </span><span class=3D"n">s</span=
><span class=3D"p">.</span><span class=3D"n">i</span><span class=3D"w"> </s=
pan><span class=3D"o">&lt;&lt;</span><span class=3D"w"> </span><span class=
=3D"s">"</span><span class=3D"se">\n</span><span class=3D"s">"</span><span =
class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">});</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The SYCL kernel object is the result of the lambda expression. It has tw=
o
data members corresponding to the captures of <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">sout</span></code> and <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">s</span></code>. Since one
of these data members corresponds to a special SYCL type that must be passe=
d
individually as an offload kernel parameter, it is necessary to decompose t=
he
SYCL kernel object into its constituent parts; the offload kernel will have
two kernel parameters. Given a SYCL implementation that uses a
<code class=3D"docutils literal notranslate"><span class=3D"pre">sycl_kerne=
l_entry_point</span></code> attributed function like the one shown above, a=
n
offload kernel entry point function will be generated that looks approximat=
ely
as follows.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"n">sycl</span><span class=3D"o">-</span><span class=3D"n">kernel</span=
><span class=3D"o">-</span><span class=3D"n">caller</span><span class=3D"o"=
>-</span><span class=3D"k">for</span><span class=3D"o">-</span><span class=
=3D"n">KN</span><span class=3D"p">(</span><span class=3D"n">sycl</span><spa=
n class=3D"o">::</span><span class=3D"n">stream</span><span class=3D"w"> </=
span><span class=3D"n">sout</span><span class=3D"p">,</span><span class=3D"=
w"> </span><span class=3D"n">S</span><span class=3D"w"> </span><span class=
=3D"n">s</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">kernel</span><span class=3D"o"=
>-</span><span class=3D"n">type</span><span class=3D"w"> </span><span class=
=3D"n">kernel</span><span class=3D"w"> </span><span class=3D"o">=3D</span><=
span class=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </spa=
n><span class=3D"n">sout</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"n">s</span><span class=3D"w"> </span><span class=3D"=
p">);</span>
<span class=3D"w">  </span><span class=3D"n">kernel</span><span class=3D"p"=
>();</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>There are a few items worthy of note:</p>
<ol class=3D"arabic simple">
<li><p>The name of the generated function incorporates the SYCL kernel name=
,
<code class=3D"docutils literal notranslate"><span class=3D"pre">KN</span><=
/code>, that was passed as the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">KernelNameType</span></code> template parameter to
<code class=3D"docutils literal notranslate"><span class=3D"pre">kernel_ent=
ry_point()</span></code> and provided as the argument to the
<code class=3D"docutils literal notranslate"><span class=3D"pre">sycl_kerne=
l_entry_point</span></code> attribute. There is a one-to-one correspondence
between SYCL kernel names and offload kernel entry points.</p></li>
<li><p>The SYCL kernel is a lambda closure type and therefore has no name;
<code class=3D"docutils literal notranslate"><span class=3D"pre">kernel-typ=
e</span></code> is substituted above and corresponds to the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">KernelType</span></code>
template parameter deduced in the call to <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">kernel_entry_point()</span></code>.
Lambda types cannot be declared and initialized using the aggregate
initialization syntax used above, but the intended behavior should be clear=
.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">S</=
span></code> is a device copyable type that does not directly or indirectly=
 contain
a data member of a SYCL special type. It therefore does not need to be
decomposed into its constituent members to be passed as a kernel argument.<=
/p></li>
<li><p>The depiction of the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">sycl::stream</span></code> parameter as a single self con=
tained
kernel parameter is an oversimplification. SYCL special types may require
additional decomposition such that the generated function might have three
or more parameters depending on how the SYCL library implementation defines
these types.</p></li>
<li><p>The call to <code class=3D"docutils literal notranslate"><span class=
=3D"pre">kernel_entry_point()</span></code> has no effect other than to tri=
gger
emission of the entry point function. The statments that make up the body
of the function are not executed when the function is called; they are
only used in the generation of the entry point function.</p></li>
</ol>
<p>It is not necessary for a function declared with the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">sycl_kernel_entry_point</span=
></code>
attribute to be called for the offload kernel entry point to be emitted. Fo=
r
inline functions and function templates, any ODR-use will suffice. For othe=
r
functions, an ODR-use is not required; the offload kernel entry point will =
be
emitted if the function is defined.</p>
<p>Functions declared with the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">sycl_kernel_entry_point</span></code> attribute are no=
t
limited to the simple example shown above. They may have additional templat=
e
parameters, declare additional function parameters, and have complex contro=
l
flow in the function body. Function parameter decomposition and reconstitut=
ion
is performed for all function parameters. The function must abide by the
language feature restrictions described in section 5.4, =E2=80=9CLanguage r=
estrictions
for device functions=E2=80=9D in the SYCL 2020 specification.</p>
</section>
<section id=3D"target">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id670" role=3D"doc-backlink">target</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#target" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id248">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
48" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">target</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::target</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::target</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the GNU style <code class=3D"docutils literal notranslate=
"><span class=3D"pre">__attribute__((target("OPTIONS")))</span></code> attr=
ibute.
This attribute may be attached to a function definition and instructs
the backend to use different code generation options than were passed on th=
e
command line.</p>
<p>The current set of options correspond to the existing =E2=80=9Csubtarget=
 features=E2=80=9D for
the target with or without a =E2=80=9C-mno-=E2=80=9D in front corresponding=
 to the absence
of the feature, as well as <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">arch=3D"CPU"</span></code> which will change the default =
=E2=80=9CCPU=E2=80=9D
for the function.</p>
<p>For X86, the attribute also allows <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">tune=3D"CPU"</span></code> to optimize the gene=
rated
code for the given CPU without changing the available instructions.</p>
<p>For AArch64, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">arch=3D"Arch"</span></code> will set the architecture, similar to the=
 -march
command line options. <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">cpu=3D"CPU"</span></code> can be used to select a specific cpu,
as per the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>-mcpu</span></code> option, similarly for <code class=3D"docutils literal =
notranslate"><span class=3D"pre">tune=3D</span></code>. The attribute also =
allows the
=E2=80=9Cbranch-protection=3D&lt;args&gt;=E2=80=9D option, where the permis=
sible arguments and their
effect on code generation are the same as for the command-line option
<code class=3D"docutils literal notranslate"><span class=3D"pre">-mbranch-p=
rotection</span></code>.</p>
<p>Example =E2=80=9Csubtarget features=E2=80=9D from the x86 backend includ=
e: =E2=80=9Cmmx=E2=80=9D, =E2=80=9Csse=E2=80=9D, =E2=80=9Csse4.2=E2=80=9D,
=E2=80=9Cavx=E2=80=9D, =E2=80=9Cxop=E2=80=9D and largely correspond to the =
machine specific options handled by
the front end.</p>
<p>Note that this attribute does not apply transitively to nested functions=
 such
as blocks or C++ lambdas.</p>
<p>Additionally, this attribute supports function multiversioning for ELF b=
ased
x86/x86-64 targets, which can be used to create multiple implementations of=
 the
same function that will be resolved at runtime based on the priority of the=
ir
<code class=3D"docutils literal notranslate"><span class=3D"pre">target</sp=
an></code> attribute strings. A function is considered a multiversioned fun=
ction
if either two declarations of the function have different <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">target</span></code> attrib=
ute
strings, or if it has a <code class=3D"docutils literal notranslate"><span =
class=3D"pre">target</span></code> attribute string of <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">default</span></code>. For
example:</p>
<blockquote>
<div><div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"n">__attribute__</span><span class=3D"p">((</s=
pan><span class=3D"n">target</span><span class=3D"p">(</span><span class=3D=
"s">"arch=3Datom"</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
oo</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{}</span><span class=3D"w"> </span><span class=3D"c1">// will be cal=
led on 'atom' processors.</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">target</span><span class=3D"p">(</span><span class=3D"s">"default"<=
/span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
oo</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{}</span><span class=3D"w"> </span><span class=3D"c1">// will be cal=
led on any other processors.</span>
</pre></div>
</div>
</div></blockquote>
<p>All multiversioned functions must contain a <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">default</span></code> (fallback)
implementation, otherwise usages of the function are considered invalid.
Additionally, a function may not become multiversioned after its first use.=
</p>
</section>
<section id=3D"target-clones">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id671" role=3D"doc-backlink">target_clones</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#target=
-clones" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id249">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
49" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">target_clones</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::target_clones</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::target_clones</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">target_clones("OPTIONS")</span></code> attribute. This attribut=
e may be
attached to a function declaration and causes function multiversioning, whe=
re
multiple versions of the function will be emitted with different code
generation options.  Additionally, these versions will be resolved at runti=
me
based on the priority of their attribute options. All <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">target_clone</span></code> func=
tions
are considered multiversioned functions.</p>
<p>For AArch64 target:
The attribute contains comma-separated strings of target features joined by=
 =E2=80=9C+=E2=80=9D
sign. For example:</p>
<blockquote>
<div><div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"n">__attribute__</span><span class=3D"p">((</s=
pan><span class=3D"n">target_clones</span><span class=3D"p">(</span><span c=
lass=3D"s">"sha2+memtag"</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"s">"fcma+sve2-pmull128"</span><span class=3D"p">)))<=
/span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
oo</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{}</span>
</pre></div>
</div>
</div></blockquote>
<p>For every multiversioned function a <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">default</span></code> (fallback) implementatio=
n
always generated if not specified directly.</p>
<p>For x86/x86-64 targets:
All multiversioned functions must contain a <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">default</span></code> (fallback)
implementation, otherwise usages of the function are considered invalid.
Additionally, a function may not become multiversioned after its first use.=
</p>
<p>The options to <code class=3D"docutils literal notranslate"><span class=
=3D"pre">target_clones</span></code> can either be a target-specific archit=
ecture
(specified as <code class=3D"docutils literal notranslate"><span class=3D"p=
re">arch=3DCPU</span></code>), or one of a list of subtarget features.</p>
<p>Example =E2=80=9Csubtarget features=E2=80=9D from the x86 backend includ=
e: =E2=80=9Cmmx=E2=80=9D, =E2=80=9Csse=E2=80=9D, =E2=80=9Csse4.2=E2=80=9D,
=E2=80=9Cavx=E2=80=9D, =E2=80=9Cxop=E2=80=9D and largely correspond to the =
machine specific options handled by
the front end.</p>
<p>The versions can either be listed as a comma-separated sequence of strin=
g
literals or as a single string literal containing a comma-separated list of
versions.  For compatibility with GCC, the two formats can be mixed.  For
example, the following will emit 4 versions of the function:</p>
<blockquote>
<div><div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"n">__attribute__</span><span class=3D"p">((</s=
pan><span class=3D"n">target_clones</span><span class=3D"p">(</span><span c=
lass=3D"s">"arch=3Datom,avx2"</span><span class=3D"p">,</span><span class=
=3D"s">"arch=3Divybridge"</span><span class=3D"p">,</span><span class=3D"s"=
>"default"</span><span class=3D"p">)))</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
oo</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{}</span>
</pre></div>
</div>
</div></blockquote>
<p>For targets that support the GNU indirect function (IFUNC) feature, disp=
atch
is performed by emitting an indirect function that is resolved to the appro=
priate
target clone at load time. The indirect function is given the name the
multiversioned function would have if it had been declared without the attr=
ibute.
For backward compatibility with earlier Clang releases, a function alias wi=
th an
<code class=3D"docutils literal notranslate"><span class=3D"pre">.ifunc</sp=
an></code> suffix is also emitted. The  <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">.ifunc</span></code> suffixed symbol is a dep=
recated
feature and support for it may be removed in the future.</p>
</section>
<section id=3D"target-version">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id672" role=3D"doc-backlink">target_version</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#targe=
t-version" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id250">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
50" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">target_version</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::target_version</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::target_version</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>For AArch64 target clang supports function multiversioning by
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((target_version("OPTIONS")))</span></code> attribute. When applied to a
function it instructs compiler to emit multiple function versions based on
<code class=3D"docutils literal notranslate"><span class=3D"pre">target_ver=
sion</span></code> attribute strings, which resolved at runtime depend on t=
heir
priority and target features availability. One of the versions is always
( implicitly or explicitly ) the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">default</span></code> (fallback). Attribute strings =
can
contain dependent features names joined by the =E2=80=9C+=E2=80=9D sign.</p=
>
<p>For targets that support the GNU indirect function (IFUNC) feature, disp=
atch
is performed by emitting an indirect function that is resolved to the appro=
priate
target clone at load time. The indirect function is given the name the
multiversioned function would have if it had been declared without the attr=
ibute.
For backward compatibility with earlier Clang releases, a function alias wi=
th an
<code class=3D"docutils literal notranslate"><span class=3D"pre">.ifunc</sp=
an></code> suffix is also emitted. The  <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">.ifunc</span></code> suffixed symbol is a dep=
recated
feature and support for it may be removed in the future.</p>
</section>
<section id=3D"try-acquire-capability-try-acquire-shared-capability">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id673" role=3D"doc-backlink">try_acquire_capability, try_acqu=
ire_shared_capability</a><a class=3D"headerlink" href=3D"https://clang.llvm=
.org/docs/AttributeReference.html#try-acquire-capability-try-acquire-shared=
-capability" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id251">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
51" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">try_acquire_capability</span></code> <br> <code class=
=3D"docutils literal notranslate"><span class=3D"pre">try_acquire_shared_ca=
pability</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::try_acquire_capability</span></code> <br> <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">clang::try_acquire_shared_capability</s=
pan></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Marks a function that attempts to acquire a capability. This function ma=
y fail to
actually acquire the capability; they accept a Boolean value determining
whether acquiring the capability means success (true), or failing to acquir=
e
the capability means success (false).</p>
</section>
<section id=3D"unsafe-buffer-usage">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id674" role=3D"doc-backlink">unsafe_buffer_usage</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#unsafe-buffer-usage" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id252">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
52" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">unsafe_buffer_usage</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::unsafe_buffer_usage</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::unsafe_buffer_usage</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The attribute <code class=3D"docutils literal notranslate"><span class=
=3D"pre">[[clang::unsafe_buffer_usage]]</span></code> should be placed on f=
unctions
that need to be avoided as they are prone to buffer overflows or unsafe buf=
fer
struct fields. It is designed to work together with the off-by-default comp=
iler
warning <code class=3D"docutils literal notranslate"><span class=3D"pre">-W=
unsafe-buffer-usage</span></code> to help codebases transition away from ra=
w pointer
based buffer management, in favor of safer abstractions such as C++20 <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">std::span</span=
></code>.
The attribute causes <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">-Wunsafe-buffer-usage</span></code> to warn on every use of the =
function or
the field it is attached to, and it may also lead to emission of automatic =
fix-it
hints which would help the user replace the use of unsafe functions(/fields=
) with safe
alternatives, though the attribute can be used even when the fix can=E2=80=
=99t be automated.</p>
<ul>
<li><p>Attribute attached to functions: The attribute does not suppress
<code class=3D"docutils literal notranslate"><span class=3D"pre">-Wunsafe-b=
uffer-usage</span></code> inside the function to which it is attached.
These warnings still need to be addressed.</p>
<p>The attribute is warranted even if the only way a function can overflow
the buffer is by violating the function=E2=80=99s preconditions. For exampl=
e, it
would make sense to put the attribute on function <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">foo()</span></code> below because
passing an incorrect size parameter would cause a buffer overflow:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"p">[[</span><span class=3D"n">clang</span><span cla=
ss=3D"o">::</span><span class=3D"n">unsafe_buffer_usage</span><span class=
=3D"p">]]</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
oo</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">buf</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">size_t</sp=
an><span class=3D"w"> </span><span class=3D"n">size</span><span class=3D"p"=
>)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">for</span><span class=3D"w"> <=
/span><span class=3D"p">(</span><span class=3D"kt">size_t</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><s=
pan class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span=
><span class=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> =
</span><span class=3D"n">size</span><span class=3D"p">;</span><span class=
=3D"w"> </span><span class=3D"o">++</span><span class=3D"n">i</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">buf</span><span class=3D"p">=
[</span><span class=3D"n">i</span><span class=3D"p">]</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The attribute is NOT warranted when the function uses safe abstractions,
assuming that these abstractions weren=E2=80=99t misused outside the functi=
on.
For example, function <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">bar()</span></code> below doesn=E2=80=99t need the attribute,
because assuming that the container <code class=3D"docutils literal notrans=
late"><span class=3D"pre">buf</span></code> is well-formed (has size that
fits the original buffer it refers to), overflow cannot occur:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">bar</span><span class=3D"p">(</span><span class=3D"n">std</span><s=
pan class=3D"o">::</span><span class=3D"n">span</span><span class=3D"o">&lt=
;</span><span class=3D"kt">int</span><span class=3D"o">&gt;</span><span cla=
ss=3D"w"> </span><span class=3D"n">buf</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">for</span><span class=3D"w"> <=
/span><span class=3D"p">(</span><span class=3D"kt">size_t</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><s=
pan class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span=
><span class=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> =
</span><span class=3D"n">buf</span><span class=3D"p">.</span><span class=3D=
"n">size</span><span class=3D"p">();</span><span class=3D"w"> </span><span =
class=3D"o">++</span><span class=3D"n">i</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">buf</span><span class=3D"p">=
[</span><span class=3D"n">i</span><span class=3D"p">]</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this case function <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">bar()</span></code> enables the user to keep the buffer
=E2=80=9Ccontainerized=E2=80=9D in a span for as long as possible. On the o=
ther hand,
Function <code class=3D"docutils literal notranslate"><span class=3D"pre">f=
oo()</span></code> in the previous example may have internal
consistency, but by accepting a raw buffer it requires the user to unwrap
their span, which is undesirable according to the programming model
behind <code class=3D"docutils literal notranslate"><span class=3D"pre">-Wu=
nsafe-buffer-usage</span></code>.</p>
<p>The attribute is warranted when a function accepts a raw buffer only to
immediately put it into a span:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"p">[[</span><span class=3D"n">clang</span><span cla=
ss=3D"o">::</span><span class=3D"n">unsafe_buffer_usage</span><span class=
=3D"p">]]</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">b=
az</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">buf</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">size_t</sp=
an><span class=3D"w"> </span><span class=3D"n">size</span><span class=3D"p"=
>)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">std</span><span class=3D"o">::=
</span><span class=3D"n">span</span><span class=3D"o">&lt;</span><span clas=
s=3D"kt">int</span><span class=3D"o">&gt;</span><span class=3D"w"> </span><=
span class=3D"n">sp</span><span class=3D"p">{</span><span class=3D"w"> </sp=
an><span class=3D"n">buf</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"n">size</span><span class=3D"w"> </span><span class=
=3D"p">};</span>
<span class=3D"w">  </span><span class=3D"k">for</span><span class=3D"w"> <=
/span><span class=3D"p">(</span><span class=3D"kt">size_t</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><s=
pan class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span=
><span class=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> =
</span><span class=3D"n">sp</span><span class=3D"p">.</span><span class=3D"=
n">size</span><span class=3D"p">();</span><span class=3D"w"> </span><span c=
lass=3D"o">++</span><span class=3D"n">i</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">sp</span><span class=3D"p">[=
</span><span class=3D"n">i</span><span class=3D"p">]</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In this case <code class=3D"docutils literal notranslate"><span class=3D=
"pre">baz()</span></code> does not contain any unsafe operations, but the a=
wkward
parameter type causes the caller to unwrap the span unnecessarily.
Note that regardless of the attribute, code inside <code class=3D"docutils =
literal notranslate"><span class=3D"pre">baz()</span></code> isn=E2=80=99t =
flagged
by <code class=3D"docutils literal notranslate"><span class=3D"pre">-Wunsaf=
e-buffer-usage</span></code> as unsafe. It is definitely undesirable,
but if <code class=3D"docutils literal notranslate"><span class=3D"pre">baz=
()</span></code> is on an API surface, there is no way to improve it
to make it as safe as <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">bar()</span></code> without breaking the source and binary
compatibility with existing users of the function. In such cases
the proper solution would be to create a different function (possibly
an overload of <code class=3D"docutils literal notranslate"><span class=3D"=
pre">baz()</span></code>) that accepts a safe container like <code class=3D=
"docutils literal notranslate"><span class=3D"pre">bar()</span></code>,
and then use the attribute on the original <code class=3D"docutils literal =
notranslate"><span class=3D"pre">baz()</span></code> to help the users
update their code to use the new function.</p>
</li>
<li><p>Attribute attached to fields: The attribute should only be attached =
to
struct fields, if the fields can not be updated to a safe type with bounds
check, such as std::span. In other words, the buffers prone to unsafe acces=
ses
should always be updated to use safe containers/views and attaching the att=
ribute
must be last resort when such an update is infeasible.</p>
<p>The attribute can be placed on individual fields or a set of them as sho=
wn below.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">A</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">unsafe_buffer_usage</=
span><span class=3D"p">]]</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">ptr1</span><span class=
=3D"p">;</span>

<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">unsafe_buffer_usage</=
span><span class=3D"p">]]</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">ptr2</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">buf</span><span =
class=3D"p">[</span><span class=3D"mi">10</span><span class=3D"p">];</span>

<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">unsafe_buffer_usage</=
span><span class=3D"p">]]</span>
<span class=3D"w">  </span><span class=3D"kt">size_t</span><span class=3D"w=
"> </span><span class=3D"n">sz</span><span class=3D"p">;</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>Here, every read/write to the fields ptr1, ptr2, buf and sz will trigger=
 a warning
that the field has been explcitly marked as unsafe due to unsafe-buffer ope=
rations.</p>
</li>
</ul>
</section>
<section id=3D"used">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id675" role=3D"doc-backlink">used</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#used" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id253">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
53" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">used</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::used</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::used</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute, when attached to a function or variable definition, indi=
cates
that there may be references to the entity which are not apparent in the so=
urce
code.  For example, it may be referenced from inline <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">asm</span></code>, or it may be
found through a dynamic symbol or section lookup.</p>
<p>The compiler must emit the definition even if it appears to be unused, a=
nd it
must not apply optimizations which depend on fully understanding how the en=
tity
is used.</p>
<p>Whether this attribute has any effect on the linker depends on the targe=
t and
the linker. Most linkers support the feature of section garbage collection
(<code class=3D"docutils literal notranslate"><span class=3D"pre">--gc-sect=
ions</span></code>), also known as =E2=80=9Cdead stripping=E2=80=9D (<code =
class=3D"docutils literal notranslate"><span class=3D"pre">ld64</span> <spa=
n class=3D"pre">-dead_strip</span></code>) or
discarding unreferenced sections (<code class=3D"docutils literal notransla=
te"><span class=3D"pre">link.exe</span> <span class=3D"pre">/OPT:REF</span>=
</code>). On COFF and Mach-O
targets (Windows and Apple platforms), the <cite>used</cite> attribute prev=
ents symbols
from being removed by linker section GC. On ELF targets, it has no effect o=
n its
own, and the linker may remove the definition if it is not otherwise refere=
nced.
This linker GC can be avoided by also adding the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">retain</span></code> attribute.  Not=
e
that <code class=3D"docutils literal notranslate"><span class=3D"pre">retai=
n</span></code> requires special support from the linker; see that attribut=
e=E2=80=99s
documentation for further information.</p>
</section>
<section id=3D"xray-always-instrument-xray-never-instrument-xray-log-args">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id676" role=3D"doc-backlink">xray_always_instrument, xray_nev=
er_instrument, xray_log_args</a><a class=3D"headerlink" href=3D"https://cla=
ng.llvm.org/docs/AttributeReference.html#xray-always-instrument-xray-never-=
instrument-xray-log-args" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id254">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
54" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">xray_always_instrument</span></code> <br> <code class=
=3D"docutils literal notranslate"><span class=3D"pre">xray_never_instrument=
</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::xray_always_instrument</span></code> <br> <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">clang::xray_never_instrument</span></co=
de></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::xray_always_instrument</span></code> <br> <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">clang::xray_never_instrument</span></co=
de></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((xray_always_instrument))</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang::x=
ray_always_instrument]]</span></code> is used to mark member functions (in =
C++),
methods (in Objective C), and free functions (in C, C++, and Objective C) t=
o be
instrumented with XRay. This will cause the function to always have space a=
t
the beginning and exit points to allow for runtime patching.</p>
<p>Conversely, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((xray_never_instrument))</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang::x=
ray_never_instrument]]</span></code> will inhibit the insertion of these
instrumentation points.</p>
<p>If a function has neither of these attributes, they become subject to th=
e XRay
heuristics used to determine whether a function should be instrumented or
otherwise.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((xray_log_args(N)))</span></code> or <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">[[clang::xray_log_args(N)]]</span></code>=
 is
used to preserve N function arguments for the logging function. Currently,
only N=3D=3D1 is supported.</p>
</section>
<section id=3D"id14">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id677" role=3D"doc-backlink">xray_always_instrument, xray_nev=
er_instrument, xray_log_args</a><a class=3D"headerlink" href=3D"https://cla=
ng.llvm.org/docs/AttributeReference.html#id14" title=3D"Link to this headin=
g">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id255">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
55" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">xray_log_args</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::xray_log_args</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::xray_log_args</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((xray_always_instrument))</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang::x=
ray_always_instrument]]</span></code> is used to mark member functions (in =
C++),
methods (in Objective C), and free functions (in C, C++, and Objective C) t=
o be
instrumented with XRay. This will cause the function to always have space a=
t
the beginning and exit points to allow for runtime patching.</p>
<p>Conversely, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__attribute__((xray_never_instrument))</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">[[clang::x=
ray_never_instrument]]</span></code> will inhibit the insertion of these
instrumentation points.</p>
<p>If a function has neither of these attributes, they become subject to th=
e XRay
heuristics used to determine whether a function should be instrumented or
otherwise.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__attri=
bute__((xray_log_args(N)))</span></code> or <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">[[clang::xray_log_args(N)]]</span></code>=
 is
used to preserve N function arguments for the logging function. Currently,
only N=3D=3D1 is supported.</p>
</section>
<section id=3D"zero-call-used-regs">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id678" role=3D"doc-backlink">zero_call_used_regs</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#zero-call-used-regs" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id256">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
56" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">zero_call_used_regs</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::zero_call_used_regs</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::zero_call_used_regs</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute, when attached to a function, causes the compiler to zero=
 a
subset of all call-used registers before the function returns. It=E2=80=99s=
 used to
increase program security by either mitigating <a class=3D"reference extern=
al" href=3D"https://en.wikipedia.org/wiki/Return-oriented_programming">Retu=
rn-Oriented Programming</a>
(ROP) attacks or preventing information leakage through registers.</p>
<p>The term =E2=80=9Ccall-used=E2=80=9D means registers which are not guara=
nteed to be preserved
unchanged for the caller by the current calling convention. This could also=
 be
described as =E2=80=9Ccaller-saved=E2=80=9D or =E2=80=9Cnot callee-saved=E2=
=80=9D.</p>
<p>The <cite>choice</cite> parameters gives the programmer flexibility to c=
hoose the subset
of the call-used registers to be zeroed:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ski=
p</span></code> doesn=E2=80=99t zero any call-used registers. This choice o=
verrides any
command-line arguments.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">use=
d</span></code> only zeros call-used registers used in the function. By <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">used</span></=
code>, we
mean a register whose contents have been set or referenced in the function.=
</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">use=
d-gpr</span></code> only zeros call-used GPR registers used in the function=
.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">use=
d-arg</span></code> only zeros call-used registers used to pass arguments t=
o the
function.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">use=
d-gpr-arg</span></code> only zeros call-used GPR registers used to pass arg=
uments to
the function.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
</span></code> zeros all call-used registers.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
-gpr</span></code> zeros all call-used GPR registers.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
-arg</span></code> zeros all call-used registers used to pass arguments to =
the
function.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
-gpr-arg</span></code> zeros all call-used GPR registers used to pass argum=
ents to
the function.</p></li>
</ul>
<p>The default for the attribute is controlled by the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">-fzero-call-used-regs</span></c=
ode>
flag.</p>
</section>
</section>
<section id=3D"handle-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id679" role=3D"doc-backlink">Handle Attributes</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ha=
ndle-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<p>Handles are a way to identify resources like files, sockets, and process=
es.
They are more opaque than pointers and widely used in system programming. T=
hey
have similar risks such as never releasing a resource associated with a han=
dle,
attempting to use a handle that was already released, or trying to release =
a
handle twice. Using the annotations below it is possible to make the owners=
hip
of the handles clear: whose responsibility is to release them. They can als=
o
aid static analysis tools to find bugs.</p>
<section id=3D"acquire-handle">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id680" role=3D"doc-backlink">acquire_handle</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#acqui=
re-handle" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id257">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
57" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">acquire_handle</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::acquire_handle</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::acquire_handle</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>If this annotation is on a function or a function type it is assumed to =
return
a new handle. In case this annotation is on an output parameter,
the function is assumed to fill the corresponding argument with a new
handle. The attribute requires a string literal argument which used to
identify the handle with later uses of <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">use_handle</span></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">release_ha=
ndle</span></code>.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// Output arguments from Zircon.</span>
<span class=3D"n">zx_status_t</span><span class=3D"w"> </span><span class=
=3D"n">zx_socket_create</span><span class=3D"p">(</span><span class=3D"kt">=
uint32_t</span><span class=3D"w"> </span><span class=3D"n">options</span><s=
pan class=3D"p">,</span>
<span class=3D"w">                             </span><span class=3D"n">zx_=
handle_t</span><span class=3D"w"> </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">acquire_handle</span><span=
 class=3D"p">(</span><span class=3D"s">"zircon"</span><span class=3D"p">)))=
</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"w=
"> </span><span class=3D"n">out0</span><span class=3D"p">,</span>
<span class=3D"w">                             </span><span class=3D"n">zx_=
handle_t</span><span class=3D"o">*</span><span class=3D"w"> </span><span cl=
ass=3D"n">out1</span><span class=3D"w"> </span><span class=3D"p">[[</span><=
span class=3D"n">clang</span><span class=3D"o">::</span><span class=3D"n">a=
cquire_handle</span><span class=3D"p">(</span><span class=3D"s">"zircon"</s=
pan><span class=3D"p">)]]);</span>


<span class=3D"c1">// Returned handle.</span>
<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">acquire_handle</span><span class=3D"p">(</span><=
span class=3D"s">"tag"</span><span class=3D"p">)]]</span><span class=3D"w">=
 </span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"n">open</span><span class=3D"p">(</span><span class=3D"k">const</span><=
span class=3D"w"> </span><span class=3D"kt">char</span><span class=3D"w"> <=
/span><span class=3D"o">*</span><span class=3D"n">path</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"kt">int</span><span cl=
ass=3D"w"> </span><span class=3D"n">oflag</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"p">...</span><span class=3D"w"> </s=
pan><span class=3D"p">);</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">op=
en</span><span class=3D"p">(</span><span class=3D"k">const</span><span clas=
s=3D"w"> </span><span class=3D"kt">char</span><span class=3D"w"> </span><sp=
an class=3D"o">*</span><span class=3D"n">path</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"=
> </span><span class=3D"n">oflag</span><span class=3D"p">,</span><span clas=
s=3D"w"> </span><span class=3D"p">...</span><span class=3D"w"> </span><span=
 class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">__attribut=
e__</span><span class=3D"p">((</span><span class=3D"n">acquire_handle</span=
><span class=3D"p">(</span><span class=3D"s">"tag"</span><span class=3D"p">=
)));</span>
</pre></div>
</div>
</section>
<section id=3D"release-handle">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id681" role=3D"doc-backlink">release_handle</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#relea=
se-handle" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id258">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
58" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">release_handle</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::release_handle</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::release_handle</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>If a function parameter is annotated with <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">release_handle(tag)</span></code> it is =
assumed to
close the handle. It is also assumed to require an open handle to work with=
. The
attribute requires a string literal argument to identify the handle being r=
eleased.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">zx_status_t</span><span class=3D"w"> </span><spa=
n class=3D"n">zx_handle_close</span><span class=3D"p">(</span><span class=
=3D"n">zx_handle_t</span><span class=3D"w"> </span><span class=3D"n">handle=
</span><span class=3D"w"> </span><span class=3D"p">[[</span><span class=3D"=
n">clang</span><span class=3D"o">::</span><span class=3D"n">release_handle<=
/span><span class=3D"p">(</span><span class=3D"s">"tag"</span><span class=
=3D"p">)]]);</span>
</pre></div>
</div>
</section>
<section id=3D"use-handle">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id682" role=3D"doc-backlink">use_handle</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#use-handl=
e" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id259">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
59" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">use_handle</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::use_handle</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::use_handle</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>A function taking a handle by value might close the handle. If a functio=
n
parameter is annotated with <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">use_handle(tag)</span></code> it is assumed to not to cha=
nge
the state of the handle. It is also assumed to require an open handle to wo=
rk with.
The attribute requires a string literal argument to identify the handle bei=
ng used.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">zx_status_t</span><span class=3D"w"> </span><spa=
n class=3D"n">zx_port_wait</span><span class=3D"p">(</span><span class=3D"n=
">zx_handle_t</span><span class=3D"w"> </span><span class=3D"n">handle</spa=
n><span class=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">cl=
ang</span><span class=3D"o">::</span><span class=3D"n">use_handle</span><sp=
an class=3D"p">(</span><span class=3D"s">"zircon"</span><span class=3D"p">)=
]],</span>
<span class=3D"w">                         </span><span class=3D"n">zx_time=
_t</span><span class=3D"w"> </span><span class=3D"n">deadline</span><span c=
lass=3D"p">,</span>
<span class=3D"w">                         </span><span class=3D"n">zx_port=
_packet_t</span><span class=3D"o">*</span><span class=3D"w"> </span><span c=
lass=3D"n">packet</span><span class=3D"p">);</span>
</pre></div>
</div>
</section>
</section>
<section id=3D"nullability-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id683" role=3D"doc-backlink">Nullability Attributes</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#nullability-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<p>Whether a particular pointer may be =E2=80=9Cnull=E2=80=9D is an importa=
nt concern when working
with pointers in the C family of languages. The various nullability attribu=
tes
indicate whether a particular pointer can be null or not, which makes APIs =
more
expressive and can help static analysis tools identify bugs involving null
pointers. Clang supports several kinds of nullability attributes: the
<code class=3D"docutils literal notranslate"><span class=3D"pre">nonnull</s=
pan></code> and <code class=3D"docutils literal notranslate"><span class=3D=
"pre">returns_nonnull</span></code> attributes indicate which function or
method parameters and result types can never be null, while nullability typ=
e
qualifiers indicate which pointer types can be null (<code class=3D"docutil=
s literal notranslate"><span class=3D"pre">_Nullable</span></code>) or cann=
ot
be null (<code class=3D"docutils literal notranslate"><span class=3D"pre">_=
Nonnull</span></code>).</p>
<p>The nullability (type) qualifiers express whether a value of a given poi=
nter
type can be null (the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">_Nullable</span></code> qualifier), doesn=E2=80=99t have a defi=
ned meaning
for null (the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">_Nonnull</span></code> qualifier), or for which the purpose of null is
unclear (the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">_Null_unspecified</span></code> qualifier). Because nullability qualifie=
rs
are expressed within the type system, they are more general than the
<code class=3D"docutils literal notranslate"><span class=3D"pre">nonnull</s=
pan></code> and <code class=3D"docutils literal notranslate"><span class=3D=
"pre">returns_nonnull</span></code> attributes, allowing one to express (fo=
r
example) a nullable pointer to an array of nonnull pointers. Nullability
qualifiers are written to the right of the pointer to which they apply. For
example:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"c1">// No meaningful result when 'ptr' is null (=
here, it happens to be undefined behavior).</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">f=
etch</span><span class=3D"p">(</span><span class=3D"kt">int</span><span cla=
ss=3D"w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><span =
class=3D"n">_Nonnull</span><span class=3D"w"> </span><span class=3D"n">ptr<=
/span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p"=
>{</span><span class=3D"w"> </span><span class=3D"k">return</span><span cla=
ss=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">ptr</span><spa=
n class=3D"p">;</span><span class=3D"w"> </span><span class=3D"p">}</span>

<span class=3D"c1">// 'ptr' may be null.</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">f=
etch_or_zero</span><span class=3D"p">(</span><span class=3D"kt">int</span><=
span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"w"> </spa=
n><span class=3D"n">_Nullable</span><span class=3D"w"> </span><span class=
=3D"n">ptr</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">ptr</span><span class=3D"w"> </span><span class=
=3D"o">?</span><span class=3D"w"> </span><span class=3D"o">*</span><span cl=
ass=3D"n">ptr</span><span class=3D"w"> </span><span class=3D"o">:</span><sp=
an class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p">;</span=
>
<span class=3D"p">}</span>

<span class=3D"c1">// A nullable pointer to non-null pointers to const char=
acters.</span>
<span class=3D"k">const</span><span class=3D"w"> </span><span class=3D"kt">=
char</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"nf">join_strings</span><span class=3D"p">(</span><span class=3D"k">cons=
t</span><span class=3D"w"> </span><span class=3D"kt">char</span><span class=
=3D"w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><span cl=
ass=3D"n">_Nonnull</span><span class=3D"w"> </span><span class=3D"o">*</spa=
n><span class=3D"w"> </span><span class=3D"n">_Nullable</span><span class=
=3D"w"> </span><span class=3D"n">strings</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"kt">unsigned</span><span class=3D"w"=
> </span><span class=3D"n">n</span><span class=3D"p">);</span>
</pre></div>
</div>
</div></blockquote>
<p>In Objective-C, there is an alternate spelling for the nullability quali=
fiers
that can be used in Objective-C methods and properties using context-sensit=
ive,
non-underscored keywords. For example:</p>
<blockquote>
<div><div class=3D"highlight-objective-c notranslate"><div class=3D"highlig=
ht"><pre><span></span><span class=3D"k">@interface</span> <span class=3D"nc=
">NSView</span> : <span class=3D"nc">NSResponder</span>
<span class=3D"w">  </span><span class=3D"o">-</span><span class=3D"w"> </s=
pan><span class=3D"p">(</span><span class=3D"n">nullable</span><span class=
=3D"w"> </span><span class=3D"n">NSView</span><span class=3D"w"> </span><sp=
an class=3D"o">*</span><span class=3D"p">)</span><span class=3D"n">ancestor=
SharedWithView</span><span class=3D"o">:</span><span class=3D"p">(</span><s=
pan class=3D"n">nonnull</span><span class=3D"w"> </span><span class=3D"n">N=
SView</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"p">)</span><span class=3D"n">aView</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">@property</span><span class=3D=
"w"> </span><span class=3D"p">(</span><span class=3D"k">assign</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">nullable</s=
pan><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">N=
SView</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"n">superview</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">@property</span><span class=3D=
"w"> </span><span class=3D"p">(</span><span class=3D"k">readonly</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">nonnull</=
span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"bp"=
>NSArray</span><span class=3D"w"> </span><span class=3D"o">*</span><span cl=
ass=3D"n">subviews</span><span class=3D"p">;</span>
<span class=3D"k">@end</span>
</pre></div>
</div>
</div></blockquote>
<p>As well as built-in pointer types, the nullability attributes can be att=
ached
to C++ classes marked with the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">_Nullable</span></code> attribute.</p>
<p>The following C++ standard library types are considered nullable:
<code class=3D"docutils literal notranslate"><span class=3D"pre">unique_ptr=
</span></code>, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">shared_ptr</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">auto_ptr</span></code>, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">exception_ptr</span></code>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">function</span></cod=
e>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">move_only_=
function</span></code> and <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">coroutine_handle</span></code>.</p>
<p>Types should be marked nullable only where the type itself leaves nullab=
ility
ambiguous. For example, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">std::optional</span></code> is not marked <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">_Nullable</span></code>, beca=
use
<code class=3D"docutils literal notranslate"><span class=3D"pre">optional&l=
t;int&gt;</span> <span class=3D"pre">_Nullable</span></code> is redundant a=
nd <code class=3D"docutils literal notranslate"><span class=3D"pre">optiona=
l&lt;int&gt;</span> <span class=3D"pre">_Nonnull</span></code> is
not a useful type. <code class=3D"docutils literal notranslate"><span class=
=3D"pre">std::weak_ptr</span></code> is not nullable, because its nullabili=
ty
can change with no visible modification, so static annotation is unlikely t=
o be
unhelpful.</p>
<section id=3D"nonnull">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id684" role=3D"doc-backlink">_Nonnull</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nonnull" ti=
tle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id260">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
60" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">_No=
nnull</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">_No=
nnull</span></code> nullability qualifier indicates that null is not a mean=
ingful
value for a value of the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">_Nonnull</span></code> pointer type. For example, given a
declaration such as:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"kt">int</span><span class=3D"w"> </span><span cl=
ass=3D"nf">fetch</span><span class=3D"p">(</span><span class=3D"kt">int</sp=
an><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"w"> <=
/span><span class=3D"n">_Nonnull</span><span class=3D"w"> </span><span clas=
s=3D"n">ptr</span><span class=3D"p">);</span>
</pre></div>
</div>
</div></blockquote>
<p>a caller of <code class=3D"docutils literal notranslate"><span class=3D"=
pre">fetch</span></code> should not provide a null value, and the compiler =
will
produce a warning if it sees a literal null value passed to <code class=3D"=
docutils literal notranslate"><span class=3D"pre">fetch</span></code>. Note
that, unlike the declaration attribute <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">nonnull</span></code>, the presence of
<code class=3D"docutils literal notranslate"><span class=3D"pre">_Nonnull</=
span></code> does not imply that passing null is undefined behavior: <code =
class=3D"docutils literal notranslate"><span class=3D"pre">fetch</span></co=
de>
is free to consider null undefined behavior or (perhaps for
backward-compatibility reasons) defensively handle null.</p>
</section>
<section id=3D"null-unspecified">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id685" role=3D"doc-backlink">_Null_unspecified</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nu=
ll-unspecified" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id261">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
61" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">_Nu=
ll_unspecified</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">_Nu=
ll_unspecified</span></code> nullability qualifier indicates that neither t=
he
<code class=3D"docutils literal notranslate"><span class=3D"pre">_Nonnull</=
span></code> nor <code class=3D"docutils literal notranslate"><span class=
=3D"pre">_Nullable</span></code> qualifiers make sense for a particular poi=
nter
type. It is used primarily to indicate that the role of null with specific
pointers in a nullability-annotated header is unclear, e.g., due to
overly-complex implementations or historical factors with a long-lived API.=
</p>
</section>
<section id=3D"nullable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id686" role=3D"doc-backlink">_Nullable</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nullable" =
title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id262">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
62" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">_Nu=
llable</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">_Nu=
llable</span></code> nullability qualifier indicates that a value of the
<code class=3D"docutils literal notranslate"><span class=3D"pre">_Nullable<=
/span></code> pointer type can be null. For example, given:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"kt">int</span><span class=3D"w"> </span><span cl=
ass=3D"nf">fetch_or_zero</span><span class=3D"p">(</span><span class=3D"kt"=
>int</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=
=3D"w"> </span><span class=3D"n">_Nullable</span><span class=3D"w"> </span>=
<span class=3D"n">ptr</span><span class=3D"p">);</span>
</pre></div>
</div>
</div></blockquote>
<p>a caller of <code class=3D"docutils literal notranslate"><span class=3D"=
pre">fetch_or_zero</span></code> can provide null.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">_Nu=
llable</span></code> attribute on classes indicates that the given class ca=
n
represent null values, and so the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">_Nullable</span></code>, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">_Nonnull</span></code> etc qualifier=
s
make sense for this type. For example:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">class</span><span class=3D"w"> </span><span c=
lass=3D"n">_Nullable</span><span class=3D"w"> </span><span class=3D"n">Aren=
aPointer</span><span class=3D"w"> </span><span class=3D"p">{</span><span cl=
ass=3D"w"> </span><span class=3D"p">...</span><span class=3D"w"> </span><sp=
an class=3D"p">};</span>

<span class=3D"n">ArenaPointer</span><span class=3D"w"> </span><span class=
=3D"n">_Nonnull</span><span class=3D"w"> </span><span class=3D"n">x</span><=
span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </s=
pan><span class=3D"p">...;</span>
<span class=3D"n">ArenaPointer</span><span class=3D"w"> </span><span class=
=3D"n">_Nullable</span><span class=3D"w"> </span><span class=3D"n">y</span>=
<span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </=
span><span class=3D"n">nullptr</span><span class=3D"p">;</span>
</pre></div>
</div>
</div></blockquote>
</section>
<section id=3D"nullable-result">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id687" role=3D"doc-backlink">_Nullable_result</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nul=
lable-result" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id263">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
63" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">_Nu=
llable_result</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">_Nu=
llable_result</span></code> nullability qualifier means that a value of the
<code class=3D"docutils literal notranslate"><span class=3D"pre">_Nullable_=
result</span></code> pointer can be <code class=3D"docutils literal notrans=
late"><span class=3D"pre">nil</span></code>, just like <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">_Nullable</span></code>. Where=
 this
attribute differs from <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">_Nullable</span></code> is when it=E2=80=99s used on a paramet=
er to a
completion handler in a Swift async method. For instance, here:</p>
<blockquote>
<div><div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pr=
e><span></span><span class=3D"p">-(</span><span class=3D"kt">void</span><sp=
an class=3D"p">)</span><span class=3D"nf">fetchSomeDataWithID:</span><span =
class=3D"p">(</span><span class=3D"kt">int</span><span class=3D"p">)</span>=
<span class=3D"nv">identifier</span>
<span class=3D"w">         </span><span class=3D"nl">completionHandler</spa=
n><span class=3D"p">:(</span><span class=3D"kt">void</span><span class=3D"w=
"> </span><span class=3D"p">(</span><span class=3D"o">^</span><span class=
=3D"p">)(</span><span class=3D"n">Data</span><span class=3D"w"> </span><spa=
n class=3D"o">*</span><span class=3D"n">_Nullable_result</span><span class=
=3D"w"> </span><span class=3D"n">result</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"bp">NSError</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">error</span><span class=
=3D"p">))</span><span class=3D"nv">completionHandler</span><span class=3D"p=
">;</span>
</pre></div>
</div>
</div></blockquote>
<p>This method asynchronously calls <code class=3D"docutils literal notrans=
late"><span class=3D"pre">completionHandler</span></code> when the data is
available, or calls it with an error. <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">_Nullable_result</span></code> indicates to the
Swift importer that this is the uncommon case where <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">result</span></code> can get <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">nil</span></co=
de>
even if no error has occurred, and will therefore import it as a Swift opti=
onal
type. Otherwise, if <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">result</span></code> was annotated with <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">_Nullable</span></code>, the Swift
importer will assume that <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">result</span></code> will always be non-nil unless an error
occurred.</p>
</section>
<section id=3D"id15">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id688" role=3D"doc-backlink">nonnull</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id15" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id264">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
64" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nonnull</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nonnull</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nonnull</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">non=
null</span></code> attribute indicates that some function parameters must n=
ot be
null, and can be used in several different ways. It=E2=80=99s original usag=
e
(<a class=3D"reference external" href=3D"https://gcc.gnu.org/onlinedocs/gcc=
/Common-Function-Attributes.html#Common-Function-Attributes">from GCC</a>)
is as a function (or Objective-C method) attribute that specifies which
parameters of the function are nonnull in a comma-separated list. For examp=
le:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"k">extern</span><span class=3D"w"> </span><span =
class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*</span=
><span class=3D"w"> </span><span class=3D"nf">my_memcpy</span><span class=
=3D"w"> </span><span class=3D"p">(</span><span class=3D"kt">void</span><spa=
n class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">dest</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">con=
st</span><span class=3D"w"> </span><span class=3D"kt">void</span><span clas=
s=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">src</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">size_t</s=
pan><span class=3D"w"> </span><span class=3D"n">len</span><span class=3D"p"=
>)</span>
<span class=3D"w">                </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">nonnull</span><span class=
=3D"w"> </span><span class=3D"p">(</span><span class=3D"mi">1</span><span c=
lass=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">2</span><sp=
an class=3D"p">)));</span>
</pre></div>
</div>
</div></blockquote>
<p>Here, the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">nonnull</span></code> attribute indicates that parameters 1 and 2
cannot have a null value. Omitting the parenthesized list of parameter indi=
ces
means that all parameters of pointer type cannot be null:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"k">extern</span><span class=3D"w"> </span><span =
class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*</span=
><span class=3D"w"> </span><span class=3D"nf">my_memcpy</span><span class=
=3D"w"> </span><span class=3D"p">(</span><span class=3D"kt">void</span><spa=
n class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">dest</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">con=
st</span><span class=3D"w"> </span><span class=3D"kt">void</span><span clas=
s=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">src</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">size_t</s=
pan><span class=3D"w"> </span><span class=3D"n">len</span><span class=3D"p"=
>)</span>
<span class=3D"w">                </span><span class=3D"n">__attribute__</s=
pan><span class=3D"p">((</span><span class=3D"n">nonnull</span><span class=
=3D"p">));</span>
</pre></div>
</div>
</div></blockquote>
<p>Clang also allows the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">nonnull</span></code> attribute to be placed directly on a f=
unction
(or Objective-C method) parameter, eliminating the need to specify the
parameter index ahead of type. For example:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"k">extern</span><span class=3D"w"> </span><span =
class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*</span=
><span class=3D"w"> </span><span class=3D"nf">my_memcpy</span><span class=
=3D"w"> </span><span class=3D"p">(</span><span class=3D"kt">void</span><spa=
n class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">dest</spa=
n><span class=3D"w"> </span><span class=3D"n">__attribute__</span><span cla=
ss=3D"p">((</span><span class=3D"n">nonnull</span><span class=3D"p">)),</sp=
an>
<span class=3D"w">                         </span><span class=3D"k">const</=
span><span class=3D"w"> </span><span class=3D"kt">void</span><span class=3D=
"w"> </span><span class=3D"o">*</span><span class=3D"n">src</span><span cla=
ss=3D"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((=
</span><span class=3D"n">nonnull</span><span class=3D"p">)),</span><span cl=
ass=3D"w"> </span><span class=3D"kt">size_t</span><span class=3D"w"> </span=
><span class=3D"n">len</span><span class=3D"p">);</span>
</pre></div>
</div>
</div></blockquote>
<p>Note that the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">nonnull</span></code> attribute indicates that passing null to a n=
on-null
parameter is undefined behavior, which the optimizer may take advantage of =
to,
e.g., remove null checks. The <code class=3D"docutils literal notranslate">=
<span class=3D"pre">_Nonnull</span></code> type qualifier indicates that a
pointer cannot be null in a more general manner (because it is part of the =
type
system) and does not imply undefined behavior, making it more widely applic=
able.</p>
</section>
<section id=3D"returns-nonnull">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id689" role=3D"doc-backlink">returns_nonnull</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#retu=
rns-nonnull" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id265">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
65" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">returns_nonnull</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::returns_nonnull</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::returns_nonnull</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ret=
urns_nonnull</span></code> attribute indicates that a particular function (=
or
Objective-C method) always returns a non-null pointer. For example, a
particular system <code class=3D"docutils literal notranslate"><span class=
=3D"pre">malloc</span></code> might be defined to terminate a process when
memory is not available rather than returning a null pointer:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"k">extern</span><span class=3D"w"> </span><span =
class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o">*</span=
><span class=3D"w"> </span><span class=3D"nf">malloc</span><span class=3D"w=
"> </span><span class=3D"p">(</span><span class=3D"kt">size_t</span><span c=
lass=3D"w"> </span><span class=3D"n">size</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"n">__attribute__</span><span class=
=3D"p">((</span><span class=3D"n">returns_nonnull</span><span class=3D"p">)=
);</span>
</pre></div>
</div>
</div></blockquote>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ret=
urns_nonnull</span></code> attribute implies that returning a null pointer =
is
undefined behavior, which the optimizer may take advantage of. The <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">_Nonnull</span></c=
ode>
type qualifier indicates that a pointer cannot be null in a more general ma=
nner
(because it is part of the type system) and does not imply undefined behavi=
or,
making it more widely applicable</p>
</section>
</section>
<section id=3D"opencl-address-spaces">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id690" role=3D"doc-backlink">OpenCL Address Spaces</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#opencl-address-spaces" title=3D"Link to this heading">=C2=B6</a></h2>
<p>The address space qualifier may be used to specify the region of memory =
that is
used to allocate the object. OpenCL supports the following address spaces:
__generic(generic), __global(global), __local(local), __private(private),
__constant(constant).</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">__constant</span><span class=3D"w"> </span><s=
pan class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">c</s=
pan><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"=
> </span><span class=3D"p">...;</span>

<span class=3D"n">__generic</span><span class=3D"w"> </span><span class=3D"=
kt">int</span><span class=3D"o">*</span><span class=3D"w"> </span><span cla=
ss=3D"n">foo</span><span class=3D"p">(</span><span class=3D"n">global</span=
><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"o">*=
</span><span class=3D"w"> </span><span class=3D"n">g</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">__local</span><span class=3D"w=
"> </span><span class=3D"kt">int</span><span class=3D"o">*</span><span clas=
s=3D"w"> </span><span class=3D"n">l</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">private</span><span class=3D"w=
"> </span><span class=3D"kt">int</span><span class=3D"w"> </span><span clas=
s=3D"n">p</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">l</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
<p>More details can be found in the OpenCL C language Spec v2.0, Section 6.=
5.</p>
<section id=3D"clang-opencl-global-device-clang-opencl-global-host">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id691" role=3D"doc-backlink">[[clang::opencl_global_device]],=
 [[clang::opencl_global_host]]</a><a class=3D"headerlink" href=3D"https://c=
lang.llvm.org/docs/AttributeReference.html#clang-opencl-global-device-clang=
-opencl-global-host" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id266">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
66" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">opencl_global_device</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_global_device</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_global_device</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">glo=
bal_device</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">global_host</span></code> address space attributes speci=
fy that
an object is allocated in global memory on the device/host. It helps to
distinguish USM (Unified Shared Memory) pointers that access global device
memory from those that access global host memory. These new address spaces =
are
a subset of the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">__global/opencl_global</span></code> address space, the full address =
space
set model for OpenCL 2.0 with the extension looks as follows:</p>
<blockquote>
<div><div class=3D"line-block">
<div class=3D"line">generic-&gt;global-&gt;host</div>
<div class=3D"line-block">
<div class=3D"line-block">
<div class=3D"line">-&gt;device</div>
</div>
<div class=3D"line">-&gt;private</div>
<div class=3D"line">-&gt;local</div>
</div>
<div class=3D"line">constant</div>
</div>
</div></blockquote>
<p>As <code class=3D"docutils literal notranslate"><span class=3D"pre">glob=
al_device</span></code> and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">global_host</span></code> are a subset of
<code class=3D"docutils literal notranslate"><span class=3D"pre">__global/o=
pencl_global</span></code> address spaces it is allowed to convert
<code class=3D"docutils literal notranslate"><span class=3D"pre">global_dev=
ice</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">global_host</span></code> address spaces to
<code class=3D"docutils literal notranslate"><span class=3D"pre">__global/o=
pencl_global</span></code> address spaces (following ISO/IEC TR 18037 5.1.3
=E2=80=9CAddress space nesting and rules for pointers=E2=80=9D).</p>
</section>
<section id=3D"id16">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id692" role=3D"doc-backlink">[[clang::opencl_global_device]],=
 [[clang::opencl_global_host]]</a><a class=3D"headerlink" href=3D"https://c=
lang.llvm.org/docs/AttributeReference.html#id16" title=3D"Link to this head=
ing">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id267">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
67" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">opencl_global_host</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_global_host</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_global_host</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">glo=
bal_device</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">global_host</span></code> address space attributes speci=
fy that
an object is allocated in global memory on the device/host. It helps to
distinguish USM (Unified Shared Memory) pointers that access global device
memory from those that access global host memory. These new address spaces =
are
a subset of the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">__global/opencl_global</span></code> address space, the full address =
space
set model for OpenCL 2.0 with the extension looks as follows:</p>
<blockquote>
<div><div class=3D"line-block">
<div class=3D"line">generic-&gt;global-&gt;host</div>
<div class=3D"line-block">
<div class=3D"line-block">
<div class=3D"line">-&gt;device</div>
</div>
<div class=3D"line">-&gt;private</div>
<div class=3D"line">-&gt;local</div>
</div>
<div class=3D"line">constant</div>
</div>
</div></blockquote>
<p>As <code class=3D"docutils literal notranslate"><span class=3D"pre">glob=
al_device</span></code> and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">global_host</span></code> are a subset of
<code class=3D"docutils literal notranslate"><span class=3D"pre">__global/o=
pencl_global</span></code> address spaces it is allowed to convert
<code class=3D"docutils literal notranslate"><span class=3D"pre">global_dev=
ice</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">global_host</span></code> address spaces to
<code class=3D"docutils literal notranslate"><span class=3D"pre">__global/o=
pencl_global</span></code> address spaces (following ISO/IEC TR 18037 5.1.3
=E2=80=9CAddress space nesting and rules for pointers=E2=80=9D).</p>
</section>
<section id=3D"constant-constant-clang-opencl-constant">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id693" role=3D"doc-backlink">__constant, constant, [[clang::o=
pencl_constant]]</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/=
docs/AttributeReference.html#constant-constant-clang-opencl-constant" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id268">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
68" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">opencl_constant</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_constant</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_constant</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__c=
onstant</span></code> <br> <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">constant</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The constant address space attribute signals that an object is located i=
n
a constant (non-modifiable) memory region. It is available to all work item=
s.
Any type can be annotated with the constant address space attribute. Object=
s
with the constant address space qualifier can be declared in any scope and =
must
have an initializer.</p>
</section>
<section id=3D"generic-generic-clang-opencl-generic">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id694" role=3D"doc-backlink">__generic, generic, [[clang::ope=
ncl_generic]]</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/doc=
s/AttributeReference.html#generic-generic-clang-opencl-generic" title=3D"Li=
nk to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id269">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
69" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">opencl_generic</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_generic</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_generic</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__g=
eneric</span></code> <br> <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">generic</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The generic address space attribute is only available with OpenCL v2.0 a=
nd later.
It can be used with pointer types. Variables in global and local scope and
function parameters in non-kernel functions can have the generic address sp=
ace
type attribute. It is intended to be a placeholder for any other address sp=
ace
except for =E2=80=98__constant=E2=80=99 in OpenCL code which can be used wi=
th multiple address
spaces.</p>
</section>
<section id=3D"global-global-clang-opencl-global">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id695" role=3D"doc-backlink">__global, global, [[clang::openc=
l_global]]</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/A=
ttributeReference.html#global-global-clang-opencl-global" title=3D"Link to =
this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id270">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
70" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">opencl_global</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_global</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_global</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__g=
lobal</span></code> <br> <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">global</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The global address space attribute specifies that an object is allocated=
 in
global memory, which is accessible by all work items. The content stored in=
 this
memory area persists between kernel executions. Pointer types to the global
address space are allowed as function parameters or local variables. Starti=
ng
with OpenCL v2.0, the global address space can be used with global (program
scope) variables and static local variable as well.</p>
</section>
<section id=3D"local-local-clang-opencl-local">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id696" role=3D"doc-backlink">__local, local, [[clang::opencl_=
local]]</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Attr=
ibuteReference.html#local-local-clang-opencl-local" title=3D"Link to this h=
eading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id271">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
71" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">opencl_local</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_local</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_local</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__l=
ocal</span></code> <br> <code class=3D"docutils literal notranslate"><span =
class=3D"pre">local</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The local address space specifies that an object is allocated in the loc=
al (work
group) memory area, which is accessible to all work items in the same work
group. The content stored in this memory region is not accessible after
the kernel execution ends. In a kernel function scope, any variable can be =
in
the local address space. In other scopes, only pointer types to the local a=
ddress
space are allowed. Local address space variables cannot have an initializer=
.</p>
</section>
<section id=3D"private-private-clang-opencl-private">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id697" role=3D"doc-backlink">__private, private, [[clang::ope=
ncl_private]]</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/doc=
s/AttributeReference.html#private-private-clang-opencl-private" title=3D"Li=
nk to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id272">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
72" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">opencl_private</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_private</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::opencl_private</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__p=
rivate</span></code> <br> <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">private</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The private address space specifies that an object is allocated in the p=
rivate
(work item) memory. Other work items cannot access the same memory area and=
 its
content is destroyed after work item execution ends. Local variables can be
declared in the private address space. Function arguments are always in the
private address space. Kernel function arguments of a pointer or an array t=
ype
cannot point to the private address space.</p>
</section>
</section>
<section id=3D"performance-constraint-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id698" role=3D"doc-backlink">Performance Constraint Attribute=
s</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#performance-constraint-attributes" title=3D"Link to this head=
ing">=C2=B6</a></h2>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">non=
blocking</span></code>, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">blocking</span></code>, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">nonallocating</span></code> and <code class=3D"=
docutils literal notranslate"><span class=3D"pre">allocating</span></code> =
attributes can be attached
to function types, including blocks, C++ lambdas, and member functions. The=
 attributes declare
constraints about a function=E2=80=99s behavior pertaining to blocking and =
heap memory allocation.</p>
<p>There are several rules for function types with these attributes, enforc=
ed with
compiler warnings:</p>
<ul class=3D"simple">
<li><p>When assigning or otherwise converting to a function pointer of <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">nonblocking</s=
pan></code> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">nonallocat=
ing</span></code> type, the source must also be a function or function poin=
ter of
that type, unless it is a null pointer, i.e. the attributes should not be =
=E2=80=9Cspoofed=E2=80=9D. Conversions
that remove the attributes are transparent and valid.</p></li>
<li><p>An override of a <code class=3D"docutils literal notranslate"><span =
class=3D"pre">nonblocking</span></code> or <code class=3D"docutils literal =
notranslate"><span class=3D"pre">nonallocating</span></code> virtual method=
 must also be declared
with that same attribute (or a stronger one.) An overriding method may add =
an attribute.</p></li>
<li><p>A redeclaration of a <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">nonblocking</span></code> or <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">nonallocating</span></code> function m=
ust also be declared with
the same attribute (or a stronger one). A redeclaration may add an attribut=
e.</p></li>
</ul>
<p>The warnings are controlled by <code class=3D"docutils literal notransla=
te"><span class=3D"pre">-Wfunction-effects</span></code>, which is disabled=
 by default.</p>
<p>The compiler also diagnoses function calls from <code class=3D"docutils =
literal notranslate"><span class=3D"pre">nonblocking</span></code> and <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">nonallocating<=
/span></code>
functions to other functions which lack the appropriate attribute.</p>
<section id=3D"allocating">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id699" role=3D"doc-backlink">allocating</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#allocatin=
g" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id273">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
73" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">allocating</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::allocating</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::allocating</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Declares that a function potentially allocates heap memory, and prevents=
 any potential inference
of <code class=3D"docutils literal notranslate"><span class=3D"pre">nonallo=
cating</span></code> by the compiler.</p>
</section>
<section id=3D"blocking">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id700" role=3D"doc-backlink">blocking</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#blocking" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id274">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
74" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">blocking</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::blocking</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::blocking</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Declares that a function potentially blocks, and prevents any potential =
inference of <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">nonblocking</span></code>
by the compiler.</p>
</section>
<section id=3D"nonallocating">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id701" role=3D"doc-backlink">nonallocating</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nonall=
ocating" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id275">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
75" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nonallocating</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nonallocating</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nonallocating</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Declares that a function or function type either does or does not alloca=
te heap memory, according
to the optional, compile-time constant boolean argument, which defaults to =
true. When the argument
is false, the attribute is equivalent to <code class=3D"docutils literal no=
translate"><span class=3D"pre">allocating</span></code>.</p>
</section>
<section id=3D"nonblocking">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id702" role=3D"doc-backlink">nonblocking</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nonblock=
ing" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id276">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
76" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nonblocking</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nonblocking</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nonblocking</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Declares that a function or function type either does or does not block =
in any way, according
to the optional, compile-time constant boolean argument, which defaults to =
true. When the argument
is false, the attribute is equivalent to <code class=3D"docutils literal no=
translate"><span class=3D"pre">blocking</span></code>.</p>
<p>For the purposes of diagnostics, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">nonblocking</span></code> is considered to includ=
e the
<code class=3D"docutils literal notranslate"><span class=3D"pre">nonallocat=
ing</span></code> guarantee and is therefore a =E2=80=9Cstronger=E2=80=9D c=
onstraint or attribute.</p>
</section>
</section>
<section id=3D"statement-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id703" role=3D"doc-backlink">Statement Attributes</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#statement-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<section id=3D"pragma-clang-loop">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id704" role=3D"doc-backlink">#pragma clang loop</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#pragma-clang-loop" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id277">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
77" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>`` loop`` <br> <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">unroll</span></code> <br> <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">nounroll</span></code> <br> <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">unroll_and_jam</span></code> =
<br> <code class=3D"docutils literal notranslate"><span class=3D"pre">nounr=
oll_and_jam</span></code></p></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">#pr=
agma</span> <span class=3D"pre">clang</span> <span class=3D"pre">loop</span=
></code> directive allows loop optimization hints to be
specified for the subsequent loop. The directive allows pipelining to be
disabled, or vectorization, vector predication, interleaving, and unrolling=
 to
be enabled or disabled. Vector width, vector predication, interleave count,
unrolling count, and the initiation interval for pipelining can be explicit=
ly
specified. See <a class=3D"reference external" href=3D"http://clang.llvm.or=
g/docs/LanguageExtensions.html#extensions-for-loop-hint-optimizations">lang=
uage extensions</a>
for details.</p>
</section>
<section id=3D"pragma-unroll-pragma-nounroll">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id705" role=3D"doc-backlink">#pragma unroll, #pragma nounroll=
</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRe=
ference.html#pragma-unroll-pragma-nounroll" title=3D"Link to this heading">=
=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id278">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
78" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>`` loop`` <br> <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">unroll</span></code> <br> <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">nounroll</span></code> <br> <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">unroll_and_jam</span></code> =
<br> <code class=3D"docutils literal notranslate"><span class=3D"pre">nounr=
oll_and_jam</span></code></p></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Loop unrolling optimization hints can be specified with <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">#pragma</span> <span class=
=3D"pre">unroll</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</s=
pan> <span class=3D"pre">nounroll</span></code>. The pragma is placed immed=
iately before a for, while,
do-while, or c++11 range-based for loop. GCC=E2=80=99s loop unrolling hints
<code class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</s=
pan> <span class=3D"pre">GCC</span> <span class=3D"pre">unroll</span></code=
> and <code class=3D"docutils literal notranslate"><span class=3D"pre">#pra=
gma</span> <span class=3D"pre">GCC</span> <span class=3D"pre">nounroll</spa=
n></code> are also supported and have
identical semantics to <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">#pragma</span> <span class=3D"pre">unroll</span></code> and <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</spa=
n> <span class=3D"pre">nounroll</span></code>.</p>
<p>Specifying <code class=3D"docutils literal notranslate"><span class=3D"p=
re">#pragma</span> <span class=3D"pre">unroll</span></code> without a param=
eter directs the loop unroller to
attempt to fully unroll the loop if the trip count is known at compile time=
 and
attempt to partially unroll the loop if the trip count is not known at comp=
ile
time:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">#pragma unroll</span>
<span class=3D"k">for</span><span class=3D"w"> </span><span class=3D"p">(..=
.)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Specifying the optional parameter, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">#pragma</span> <span class=3D"pre">unroll</span=
> <span class=3D"pre">_value_</span></code>, directs the
unroller to unroll the loop <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">_value_</span></code> times. The parameter may optionally=
 be
enclosed in parentheses:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">#pragma unroll 16</span>
<span class=3D"k">for</span><span class=3D"w"> </span><span class=3D"p">(..=
.)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>

<span class=3D"cp">#pragma unroll(16)</span>
<span class=3D"k">for</span><span class=3D"w"> </span><span class=3D"p">(..=
.)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Specifying <code class=3D"docutils literal notranslate"><span class=3D"p=
re">#pragma</span> <span class=3D"pre">nounroll</span></code> indicates tha=
t the loop should not be unrolled:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">#pragma nounroll</span>
<span class=3D"k">for</span><span class=3D"w"> </span><span class=3D"p">(..=
.)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">#pragma=
</span> <span class=3D"pre">unroll</span></code> and <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">#pragma</span> <span class=3D"pr=
e">unroll</span> <span class=3D"pre">_value_</span></code> have identical s=
emantics to
<code class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</s=
pan> <span class=3D"pre">clang</span> <span class=3D"pre">loop</span> <span=
 class=3D"pre">unroll(enable)</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</s=
pan> <span class=3D"pre">clang</span> <span class=3D"pre">loop</span> <span=
 class=3D"pre">unroll_count(_value_)</span></code> respectively. <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">#pragma</span> <span=
 class=3D"pre">nounroll</span></code>
is equivalent to <code class=3D"docutils literal notranslate"><span class=
=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"pre=
">loop</span> <span class=3D"pre">unroll(disable)</span></code>. See
<a class=3D"reference external" href=3D"http://clang.llvm.org/docs/Language=
Extensions.html#extensions-for-loop-hint-optimizations">language extensions=
</a>
for further details including limitations of the unroll hints.</p>
</section>
<section id=3D"loop">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id706" role=3D"doc-backlink">[loop]</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#loop" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id279">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
79" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[lo=
op]</span></code> directive allows loop optimization hints to be
specified for the subsequent loop. The directive allows unrolling to
be disabled and is not compatible with [unroll(x)].</p>
<p>Specifying the parameter, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">[loop]</span></code>, directs the
unroller to not unroll the loop.</p>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">loop</span><span cla=
ss=3D"p">]</span>
<span class=3D"k">for</span><span class=3D"w"> </span><span class=3D"p">(..=
.)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">loop</span><span cla=
ss=3D"p">]</span>
<span class=3D"k">while</span><span class=3D"w"> </span><span class=3D"p">(=
...)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">loop</span><span cla=
ss=3D"p">]</span>
<span class=3D"k">do</span><span class=3D"w"> </span><span class=3D"p">{</s=
pan>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"k">while=
</span><span class=3D"w"> </span><span class=3D"p">(...)</span>
</pre></div>
</div>
<p>See <a class=3D"reference external" href=3D"https://learn.microsoft.com/=
en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-for">hlsl loop extensions=
</a>
for details.</p>
</section>
<section id=3D"unroll-x-unroll">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id707" role=3D"doc-backlink">[unroll(x)], [unroll]</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#unroll-x-unroll" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id280">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
80" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Loop unrolling optimization hints can be specified with <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">[unroll(x)]</span></code>
. The attribute is placed immediately before a for, while,
or do-while.
Specifying the parameter, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">[unroll(_value_)]</span></code>, directs the
unroller to unroll the loop <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">_value_</span></code> times. Note: [unroll(x)] is not com=
patible with [loop].</p>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">unroll</span><span c=
lass=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)]</span>
<span class=3D"k">for</span><span class=3D"w"> </span><span class=3D"p">(..=
.)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">unroll</span><span c=
lass=3D"p">]</span>
<span class=3D"k">for</span><span class=3D"w"> </span><span class=3D"p">(..=
.)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">unroll</span><span c=
lass=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)]</span>
<span class=3D"k">while</span><span class=3D"w"> </span><span class=3D"p">(=
...)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">unroll</span><span c=
lass=3D"p">]</span>
<span class=3D"k">while</span><span class=3D"w"> </span><span class=3D"p">(=
...)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">unroll</span><span c=
lass=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)]</span>
<span class=3D"k">do</span><span class=3D"w"> </span><span class=3D"p">{</s=
pan>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"k">while=
</span><span class=3D"w"> </span><span class=3D"p">(...)</span>
</pre></div>
</div>
<div class=3D"highlight-hlsl notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"p">[</span><span class=3D"nd">unroll</span><span c=
lass=3D"p">]</span>
<span class=3D"k">do</span><span class=3D"w"> </span><span class=3D"p">{</s=
pan>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"k">while=
</span><span class=3D"w"> </span><span class=3D"p">(...)</span>
</pre></div>
</div>
<p>See <a class=3D"reference external" href=3D"https://learn.microsoft.com/=
en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-for">hlsl loop extensions=
</a>
for details.</p>
</section>
<section id=3D"read-only-write-only-read-write-read-only-write-only-read-wr=
ite">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id708" role=3D"doc-backlink">__read_only, __write_only, __rea=
d_write (read_only, write_only, read_write)</a><a class=3D"headerlink" href=
=3D"https://clang.llvm.org/docs/AttributeReference.html#read-only-write-onl=
y-read-write-read-only-write-only-read-write" title=3D"Link to this heading=
">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id281">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
81" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__r=
ead_only</span></code> <br> <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">read_only</span></code> <br> <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">__write_only</span></code> <br> <code =
class=3D"docutils literal notranslate"><span class=3D"pre">write_only</span=
></code> <br> <code class=3D"docutils literal notranslate"><span class=3D"p=
re">__read_write</span></code> <br> <code class=3D"docutils literal notrans=
late"><span class=3D"pre">read_write</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The access qualifiers must be used with image object arguments or pipe a=
rguments
to declare if they are being read or written by a kernel or function.</p>
<p>The read_only/__read_only, write_only/__write_only and read_write/__read=
_write
names are reserved for use as access qualifiers and shall not be used other=
wise.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">kernel</span><span class=3D"w"> </span><span class=
=3D"kt">void</span>
<span class=3D"n">foo</span><span class=3D"w"> </span><span class=3D"p">(</=
span><span class=3D"n">read_only</span><span class=3D"w"> </span><span clas=
s=3D"n">image2d_t</span><span class=3D"w"> </span><span class=3D"n">imageA<=
/span><span class=3D"p">,</span>
<span class=3D"w">     </span><span class=3D"n">write_only</span><span clas=
s=3D"w"> </span><span class=3D"n">image2d_t</span><span class=3D"w"> </span=
><span class=3D"n">imageB</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>In the above example imageA is a read-only 2D image object, and imageB i=
s a
write-only 2D image object.</p>
<p>The read_write (or __read_write) qualifier can not be used with pipe.</p=
>
<p>More details can be found in the OpenCL C language Spec v2.0, Section 6.=
6.</p>
</section>
<section id=3D"id19">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id709" role=3D"doc-backlink">assume</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id19" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id282">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
82" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">assume</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ass=
ume</span></code> <br> <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">clang::assume</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::assume</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ass=
ume</span></code> attribute is used to indicate to the optimizer that a
certain condition is assumed to be true at a certain point in the
program. If this condition is violated at runtime, the behavior is
undefined. <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>assume</span></code> can only be applied to a null statement.</p>
<p>Different optimisers are likely to react differently to the presence of
this attribute; in some cases, adding <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">assume</span></code> may affect performance
negatively. It should be used with parsimony and care.</p>
<p>Example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">f</span><span class=3D"p">(</span><span class=3D"kt">int</span><spa=
n class=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </=
span><span class=3D"n">y</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">ass=
ume</span><span class=3D"p">(</span><span class=3D"n">x</span><span class=
=3D"w"> </span><span class=3D"o">=3D=3D</span><span class=3D"w"> </span><sp=
an class=3D"mi">27</span><span class=3D"p">)]];</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">ass=
ume</span><span class=3D"p">(</span><span class=3D"n">x</span><span class=
=3D"w"> </span><span class=3D"o">=3D=3D</span><span class=3D"w"> </span><sp=
an class=3D"n">y</span><span class=3D"p">)]];</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">y</span><span class=3D"w"> </span><span class=3D=
"o">+</span><span class=3D"w"> </span><span class=3D"mi">1</span><span clas=
s=3D"p">;</span><span class=3D"w"> </span><span class=3D"c1">// May be opti=
mised to `return 28`.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"constexpr">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id710" role=3D"doc-backlink">constexpr</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#constexpr"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id283">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
83" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">msv=
c::constexpr</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">[[m=
svc::constexpr]]</span></code> attribute can be applied only to a function
definition or a <code class=3D"docutils literal notranslate"><span class=3D=
"pre">return</span></code> statement. It does not impact function declarati=
ons.
A <code class=3D"docutils literal notranslate"><span class=3D"pre">[[msvc::=
constexpr]]</span></code> function cannot be <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">constexpr</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">consteval</span></cod=
e>.
A <code class=3D"docutils literal notranslate"><span class=3D"pre">[[msvc::=
constexpr]]</span></code> function is treated as if it were a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">constexpr</span></cod=
e> function
when it is evaluated in a constant context of <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">[[msvc::constexpr]]</span> <span class=
=3D"pre">return</span></code> statement.
Otherwise, it is treated as a regular function.</p>
<p>Semantics of this attribute are enabled only under MSVC compatibility
(<code class=3D"docutils literal notranslate"><span class=3D"pre">-fms-comp=
atibility-version</span></code>) 19.33 and later.</p>
</section>
<section id=3D"fallthrough">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id711" role=3D"doc-backlink">fallthrough</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#fallthro=
ugh" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id284">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
84" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">fallthrough</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">fal=
lthrough</span></code> <br> <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">clang::fallthrough</span></code> <br> <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">gnu::fallthrough</span></code=
></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">fal=
lthrough</span></code> <br> <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">gnu::fallthrough</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">fal=
lthrough</span></code> (or <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">clang::fallthrough</span></code>) attribute is used
to annotate intentional fall-through
between switch labels. It can only be applied to a null statement placed at=
 a
point of execution between any statement and the next switch label. It is
common to mark these places with a specific comment, but this attribute is
meant to replace comments with a more strict annotation, which can be check=
ed
by the compiler. This attribute doesn=E2=80=99t change semantics of the cod=
e and can
be used wherever an intended fall-through occurs. It is designed to mimic
control-flow statements like <code class=3D"docutils literal notranslate"><=
span class=3D"pre">break;</span></code>, so it can be placed in most places
where <code class=3D"docutils literal notranslate"><span class=3D"pre">brea=
k;</span></code> can, but only if there are no statements on the execution =
path
between it and the next switch label.</p>
<p>By default, Clang does not warn on unannotated fallthrough from one <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">switch</span><=
/code>
case to another. Diagnostics on fallthrough without a corresponding annotat=
ion
can be enabled with the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">-Wimplicit-fallthrough</span></code> argument.</p>
<p>Here is an example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// compile with -Wimplicit-fallthrough</span>
<span class=3D"k">switch</span><span class=3D"w"> </span><span class=3D"p">=
(</span><span class=3D"n">n</span><span class=3D"p">)</span><span class=3D"=
w"> </span><span class=3D"p">{</span>
<span class=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">2=
2</span><span class=3D"p">:</span>
<span class=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">3=
3</span><span class=3D"p">:</span><span class=3D"w">  </span><span class=3D=
"c1">// no warning: no statements between case labels</span>
<span class=3D"w">  </span><span class=3D"n">f</span><span class=3D"p">();<=
/span>
<span class=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">4=
4</span><span class=3D"p">:</span><span class=3D"w">  </span><span class=3D=
"c1">// warning: unannotated fall-through</span>
<span class=3D"w">  </span><span class=3D"n">g</span><span class=3D"p">();<=
/span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">fallthrough</span><sp=
an class=3D"p">]];</span>
<span class=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">5=
5</span><span class=3D"p">:</span><span class=3D"w">  </span><span class=3D=
"c1">// no warning</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">=
)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">h</span><span class=3D"p">()=
;</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"w">  </span><span class=3D"k">else</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"p">()=
;</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">c=
lang</span><span class=3D"o">::</span><span class=3D"n">fallthrough</span><=
span class=3D"p">]];</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">6=
6</span><span class=3D"p">:</span><span class=3D"w">  </span><span class=3D=
"c1">// no warning</span>
<span class=3D"w">  </span><span class=3D"n">p</span><span class=3D"p">();<=
/span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">fallthrough</span><sp=
an class=3D"p">]];</span><span class=3D"w"> </span><span class=3D"c1">// wa=
rning: fallthrough annotation does not</span>
<span class=3D"w">                          </span><span class=3D"c1">//   =
       directly precede case label</span>
<span class=3D"w">  </span><span class=3D"n">q</span><span class=3D"p">();<=
/span>
<span class=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">7=
7</span><span class=3D"p">:</span><span class=3D"w">  </span><span class=3D=
"c1">// warning: unannotated fall-through</span>
<span class=3D"w">  </span><span class=3D"n">r</span><span class=3D"p">();<=
/span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"intel-reqd-sub-group-size">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id712" role=3D"doc-backlink">intel_reqd_sub_group_size</a><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference=
.html#intel-reqd-sub-group-size" title=3D"Link to this heading">=C2=B6</a><=
/h3>
<table class=3D"docutils align-default" id=3D"id285">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
85" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">intel_reqd_sub_group_size</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The optional attribute intel_reqd_sub_group_size can be used to indicate=
 that
the kernel must be compiled and executed with the specified subgroup size. =
When
this attribute is present, get_max_sub_group_size() is guaranteed to return=
 the
specified integer value. This is important for the correctness of many subg=
roup
algorithms, and in some cases may be used by the compiler to generate more =
optimal
code. See <cite>cl_intel_required_subgroup_size
&lt;https://www.khronos.org/registry/OpenCL/extensions/intel/cl_intel_requi=
red_subgroup_size.txt&gt;</cite>
for details.</p>
</section>
<section id=3D"likely-and-unlikely">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id713" role=3D"doc-backlink">likely and unlikely</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#likely-and-unlikely" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id286">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
86" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">lik=
ely</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::likely</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">lik=
ely</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">unlikely</span></code> attributes are used as compiler hints.
The attributes are used to aid the compiler to determine which branch is
likely or unlikely to be taken. This is done by marking the branch substate=
ment
with one of the two attributes.</p>
<p>It isn=E2=80=99t allowed to annotate a single statement with both <code =
class=3D"docutils literal notranslate"><span class=3D"pre">likely</span></c=
ode> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">unlikely</=
span></code>. Annotating the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">true</span></code> and <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">false</span></code> branch of an <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">if</span></code>
statement with the same likelihood attribute will result in a diagnostic an=
d
the attributes are ignored on both branches.</p>
<p>In a <code class=3D"docutils literal notranslate"><span class=3D"pre">sw=
itch</span></code> statement it=E2=80=99s allowed to annotate multiple <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">case</span></c=
ode> labels
or the <code class=3D"docutils literal notranslate"><span class=3D"pre">def=
ault</span></code> label with the same likelihood attribute. This makes
* all labels without an attribute have a neutral likelihood,
* all labels marked <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">[[likely]]</span></code> have an equally positive likelihood, and
* all labels marked <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">[[unlikely]]</span></code> have an equally negative likelihood.
The neutral likelihood is the more likely of path execution than the negati=
ve
likelihood. The positive likelihood is the more likely of path of execution
than the neutral likelihood.</p>
<p>These attributes have no effect on the generated code when using
PGO (Profile-Guided Optimization) or at optimization level 0.</p>
<p>In Clang, the attributes will be ignored if they=E2=80=99re not placed o=
n
* the <code class=3D"docutils literal notranslate"><span class=3D"pre">case=
</span></code> or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">default</span></code> label of a <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">switch</span></code> statement,
* or on the substatement of an <code class=3D"docutils literal notranslate"=
><span class=3D"pre">if</span></code> or <code class=3D"docutils literal no=
translate"><span class=3D"pre">else</span></code> statement,
* or on the substatement of an <code class=3D"docutils literal notranslate"=
><span class=3D"pre">for</span></code> or <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">while</span></code> statement.
The C++ Standard recommends to honor them on every statement in the
path of execution, but that can be confusing:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">if</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"o">--</span><span class=3D"n">b</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// In the path of execution,</span>
<span class=3D"w">                    </span><span class=3D"c1">// this bra=
nch is considered unlikely.</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"o">--</span><span class=3D"n">b</=
span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"p">(</=
span><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"o">--</span><span class=3D"n">b</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// Not in the path of execution,</sp=
an>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// the branch has no likelihood information.</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"o">--</span><span class=3D"n">b</=
span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">foo</span><span class=3D"p">(<=
/span><span class=3D"n">b</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"c1">// Whether or not the next st=
atement is in the path of execution depends</span>
<span class=3D"w">  </span><span class=3D"c1">// on the declaration of foo(=
):</span>
<span class=3D"w">  </span><span class=3D"c1">// In the path of execution: =
void foo(int);</span>
<span class=3D"w">  </span><span class=3D"c1">// Not in the path of executi=
on: [[noreturn]] void foo(int);</span>
<span class=3D"w">  </span><span class=3D"c1">// This means the likelihood =
of the branch depends on the declaration</span>
<span class=3D"w">  </span><span class=3D"c1">// of foo().</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"o">--</span><span class=3D"n">b</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Below are some example usages of the likelihood attributes and their eff=
ects:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">if</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">likely</span=
><span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</=
span><span class=3D"w"> </span><span class=3D"c1">// Placement on the first=
 statement in the branch.</span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler will optimize=
 to execute the code here.</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"k">else<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"n">b</span><span class=3D"o">++</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// Placement on the first statement =
in the branch.</span>
<span class=3D"k">else</span><span class=3D"w"> </span><span class=3D"p">{<=
/span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler will optimize=
 to execute the code here.</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"n">b</span><span class=3D"o">++</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// Placement on the second statement=
 in the branch.</span>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// The attribute will be ignored.</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">[[</span><span class=3D"n">likely</span><span clas=
s=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"n">b</span><span class=3D"o">++</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// No contradiction since the second=
 attribute</span>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// is ignored.</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"p">;</span>
<span class=3D"k">else</span><span class=3D"w"> </span><span class=3D"p">[[=
</span><span class=3D"n">likely</span><span class=3D"p">]]</span><span clas=
s=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler will optimize=
 to execute the code here.</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"p">;</span>
<span class=3D"k">else</span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler will optimize=
 to execute the next statement.</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">lik=
ely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=
=3D"n">b</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"n">f</span><span class=3D"p">();</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">[[</span><span class=3D"n">likely</span><span clas=
s=3D"p">]];</span><span class=3D"w"> </span><span class=3D"c1">// Both bran=
ches are likely. A diagnostic is issued</span>
<span class=3D"k">else</span><span class=3D"w"> </span><span class=3D"p">[[=
</span><span class=3D"n">likely</span><span class=3D"p">]];</span><span cla=
ss=3D"w">   </span><span class=3D"c1">// and the attributes are ignored.</s=
pan>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">lik=
ely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=
=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">i</span><span=
 class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span>=
<span class=3D"mi">5</span><span class=3D"p">;</span><span class=3D"w"> </s=
pan><span class=3D"c1">// Issues a diagnostic since the attribute</span>
<span class=3D"w">                        </span><span class=3D"c1">// isn'=
t allowed on a declaration.</span>

<span class=3D"k">switch</span><span class=3D"w"> </span><span class=3D"p">=
(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"=
w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">lik=
ely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=
=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">1</span><spa=
n class=3D"p">:</span><span class=3D"w">    </span><span class=3D"c1">// Th=
is value is likely</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>

<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">2</span><sp=
an class=3D"p">:</span><span class=3D"w">  </span><span class=3D"c1">// Thi=
s value is unlikely</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">f=
allthrough</span><span class=3D"p">]];</span>

<span class=3D"w">  </span><span class=3D"k">case</span><span class=3D"w"> =
</span><span class=3D"mi">3</span><span class=3D"p">:</span><span class=3D"=
w">               </span><span class=3D"c1">// No likelihood attribute</spa=
n>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">l=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"k">break</span><span class=3D"p">;</span><span class=3D"w">   </span><=
span class=3D"c1">// No effect</span>

<span class=3D"w">  </span><span class=3D"k">case</span><span class=3D"w"> =
</span><span class=3D"mi">4</span><span class=3D"p">:</span><span class=3D"=
w"> </span><span class=3D"p">[[</span><span class=3D"n">likely</span><span =
class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</span><s=
pan class=3D"w">  </span><span class=3D"c1">// attribute on substatement ha=
s no effect</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>
<span class=3D"w">    </span><span class=3D"p">}</span>

<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"k">default</span><span class=3D"o">:</span><span class=3D"w"> </span><=
span class=3D"c1">// All other values are unlikely</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>
<span class=3D"p">}</span>

<span class=3D"k">switch</span><span class=3D"w"> </span><span class=3D"p">=
(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"=
w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">lik=
ely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=
=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">0</span><spa=
n class=3D"p">:</span><span class=3D"w">    </span><span class=3D"c1">// Th=
is value and code path is likely</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">f=
allthrough</span><span class=3D"p">]];</span>

<span class=3D"w">  </span><span class=3D"k">case</span><span class=3D"w"> =
</span><span class=3D"mi">1</span><span class=3D"p">:</span><span class=3D"=
w">               </span><span class=3D"c1">// No likelihood attribute, cod=
e path is neutral</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span><span class=3D"w">              </span><span class=3D"c1">// fall=
ing through has no effect on the likelihood</span>

<span class=3D"w">  </span><span class=3D"k">case</span><span class=3D"w"> =
</span><span class=3D"mi">2</span><span class=3D"p">:</span><span class=3D"=
w">               </span><span class=3D"c1">// No likelihood attribute, cod=
e path is neutral</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">f=
allthrough</span><span class=3D"p">]];</span>

<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"k">default</span><span class=3D"o">:</span><span class=3D"w"> </span><=
span class=3D"c1">// This value and code path are both unlikely</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>
<span class=3D"p">}</span>

<span class=3D"k">for</span><span class=3D"p">(</span><span class=3D"kt">in=
t</span><span class=3D"w"> </span><span class=3D"n">i</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"mi">0</span><span class=3D"p">;</span><span class=3D"w"> </span><span =
class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">!=3D</span>=
<span class=3D"w"> </span><span class=3D"n">size</span><span class=3D"p">;<=
/span><span class=3D"w"> </span><span class=3D"o">++</span><span class=3D"n=
">i</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"p">[[</span><span class=3D"n">likely</span><span class=3D"p">]]</span><=
span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w">  =
             </span><span class=3D"c1">// The loop is the likely path of ex=
ecution</span>
<span class=3D"p">}</span>

<span class=3D"k">for</span><span class=3D"p">(</span><span class=3D"k">con=
st</span><span class=3D"w"> </span><span class=3D"k">auto</span><span class=
=3D"w"> </span><span class=3D"o">&amp;</span><span class=3D"n">E</span><spa=
n class=3D"w"> </span><span class=3D"o">:</span><span class=3D"w"> </span><=
span class=3D"n">Elements</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"p">[[</span><span class=3D"n">likely</span><span cl=
ass=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w">  =
             </span><span class=3D"c1">// The loop is the likely path of ex=
ecution</span>
<span class=3D"p">}</span>

<span class=3D"k">while</span><span class=3D"p">(</span><span class=3D"n">i=
</span><span class=3D"w"> </span><span class=3D"o">!=3D</span><span class=
=3D"w"> </span><span class=3D"n">size</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">unlikely<=
/span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p=
">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w">  =
             </span><span class=3D"c1">// The loop is the unlikely path of =
execution</span>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// The generated code will optimize to skip the loop body</sp=
an>

<span class=3D"k">while</span><span class=3D"p">(</span><span class=3D"nb">=
true</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"p">[[</span><span class=3D"n">unlikely</span><span class=3D"p">]]</span=
><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w">  =
             </span><span class=3D"c1">// The attribute has no effect</span=
>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// Clang elides the comparison and generates an infinite</spa=
n>
<span class=3D"w">                    </span><span class=3D"c1">// loop</sp=
an>
</pre></div>
</div>
</section>
<section id=3D"id20">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id714" role=3D"doc-backlink">likely and unlikely</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#id20" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id287">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
87" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">unl=
ikely</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::unlikely</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">lik=
ely</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">unlikely</span></code> attributes are used as compiler hints.
The attributes are used to aid the compiler to determine which branch is
likely or unlikely to be taken. This is done by marking the branch substate=
ment
with one of the two attributes.</p>
<p>It isn=E2=80=99t allowed to annotate a single statement with both <code =
class=3D"docutils literal notranslate"><span class=3D"pre">likely</span></c=
ode> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">unlikely</=
span></code>. Annotating the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">true</span></code> and <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">false</span></code> branch of an <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">if</span></code>
statement with the same likelihood attribute will result in a diagnostic an=
d
the attributes are ignored on both branches.</p>
<p>In a <code class=3D"docutils literal notranslate"><span class=3D"pre">sw=
itch</span></code> statement it=E2=80=99s allowed to annotate multiple <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">case</span></c=
ode> labels
or the <code class=3D"docutils literal notranslate"><span class=3D"pre">def=
ault</span></code> label with the same likelihood attribute. This makes
* all labels without an attribute have a neutral likelihood,
* all labels marked <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">[[likely]]</span></code> have an equally positive likelihood, and
* all labels marked <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">[[unlikely]]</span></code> have an equally negative likelihood.
The neutral likelihood is the more likely of path execution than the negati=
ve
likelihood. The positive likelihood is the more likely of path of execution
than the neutral likelihood.</p>
<p>These attributes have no effect on the generated code when using
PGO (Profile-Guided Optimization) or at optimization level 0.</p>
<p>In Clang, the attributes will be ignored if they=E2=80=99re not placed o=
n
* the <code class=3D"docutils literal notranslate"><span class=3D"pre">case=
</span></code> or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">default</span></code> label of a <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">switch</span></code> statement,
* or on the substatement of an <code class=3D"docutils literal notranslate"=
><span class=3D"pre">if</span></code> or <code class=3D"docutils literal no=
translate"><span class=3D"pre">else</span></code> statement,
* or on the substatement of an <code class=3D"docutils literal notranslate"=
><span class=3D"pre">for</span></code> or <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">while</span></code> statement.
The C++ Standard recommends to honor them on every statement in the
path of execution, but that can be confusing:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">if</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"o">--</span><span class=3D"n">b</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// In the path of execution,</span>
<span class=3D"w">                    </span><span class=3D"c1">// this bra=
nch is considered unlikely.</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"o">--</span><span class=3D"n">b</=
span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"p">(</=
span><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"o">--</span><span class=3D"n">b</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// Not in the path of execution,</sp=
an>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// the branch has no likelihood information.</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"o">--</span><span class=3D"n">b</=
span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">foo</span><span class=3D"p">(<=
/span><span class=3D"n">b</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"c1">// Whether or not the next st=
atement is in the path of execution depends</span>
<span class=3D"w">  </span><span class=3D"c1">// on the declaration of foo(=
):</span>
<span class=3D"w">  </span><span class=3D"c1">// In the path of execution: =
void foo(int);</span>
<span class=3D"w">  </span><span class=3D"c1">// Not in the path of executi=
on: [[noreturn]] void foo(int);</span>
<span class=3D"w">  </span><span class=3D"c1">// This means the likelihood =
of the branch depends on the declaration</span>
<span class=3D"w">  </span><span class=3D"c1">// of foo().</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"o">--</span><span class=3D"n">b</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Below are some example usages of the likelihood attributes and their eff=
ects:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">if</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">likely</span=
><span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</=
span><span class=3D"w"> </span><span class=3D"c1">// Placement on the first=
 statement in the branch.</span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler will optimize=
 to execute the code here.</span>
<span class=3D"p">}</span><span class=3D"w"> </span><span class=3D"k">else<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"n">b</span><span class=3D"o">++</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// Placement on the first statement =
in the branch.</span>
<span class=3D"k">else</span><span class=3D"w"> </span><span class=3D"p">{<=
/span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler will optimize=
 to execute the code here.</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"n">b</span><span class=3D"o">++</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// Placement on the second statement=
 in the branch.</span>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// The attribute will be ignored.</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">[[</span><span class=3D"n">likely</span><span clas=
s=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"n">b</span><span class=3D"o">++</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"c1">// No contradiction since the second=
 attribute</span>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// is ignored.</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"p">;</span>
<span class=3D"k">else</span><span class=3D"w"> </span><span class=3D"p">[[=
</span><span class=3D"n">likely</span><span class=3D"p">]]</span><span clas=
s=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler will optimize=
 to execute the code here.</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"p">;</span>
<span class=3D"k">else</span>
<span class=3D"w">  </span><span class=3D"c1">// The compiler will optimize=
 to execute the next statement.</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">lik=
ely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=
=3D"n">b</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"n">f</span><span class=3D"p">();</span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"p">[[</span><span class=3D"n">likely</span><span clas=
s=3D"p">]];</span><span class=3D"w"> </span><span class=3D"c1">// Both bran=
ches are likely. A diagnostic is issued</span>
<span class=3D"k">else</span><span class=3D"w"> </span><span class=3D"p">[[=
</span><span class=3D"n">likely</span><span class=3D"p">]];</span><span cla=
ss=3D"w">   </span><span class=3D"c1">// and the attributes are ignored.</s=
pan>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">lik=
ely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=
=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">i</span><span=
 class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span>=
<span class=3D"mi">5</span><span class=3D"p">;</span><span class=3D"w"> </s=
pan><span class=3D"c1">// Issues a diagnostic since the attribute</span>
<span class=3D"w">                        </span><span class=3D"c1">// isn'=
t allowed on a declaration.</span>

<span class=3D"k">switch</span><span class=3D"w"> </span><span class=3D"p">=
(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"=
w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">lik=
ely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=
=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">1</span><spa=
n class=3D"p">:</span><span class=3D"w">    </span><span class=3D"c1">// Th=
is value is likely</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>

<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">2</span><sp=
an class=3D"p">:</span><span class=3D"w">  </span><span class=3D"c1">// Thi=
s value is unlikely</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">f=
allthrough</span><span class=3D"p">]];</span>

<span class=3D"w">  </span><span class=3D"k">case</span><span class=3D"w"> =
</span><span class=3D"mi">3</span><span class=3D"p">:</span><span class=3D"=
w">               </span><span class=3D"c1">// No likelihood attribute</spa=
n>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">l=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"k">break</span><span class=3D"p">;</span><span class=3D"w">   </span><=
span class=3D"c1">// No effect</span>

<span class=3D"w">  </span><span class=3D"k">case</span><span class=3D"w"> =
</span><span class=3D"mi">4</span><span class=3D"p">:</span><span class=3D"=
w"> </span><span class=3D"p">[[</span><span class=3D"n">likely</span><span =
class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</span><s=
pan class=3D"w">  </span><span class=3D"c1">// attribute on substatement ha=
s no effect</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>
<span class=3D"w">    </span><span class=3D"p">}</span>

<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"k">default</span><span class=3D"o">:</span><span class=3D"w"> </span><=
span class=3D"c1">// All other values are unlikely</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>
<span class=3D"p">}</span>

<span class=3D"k">switch</span><span class=3D"w"> </span><span class=3D"p">=
(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"=
w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">lik=
ely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=
=3D"k">case</span><span class=3D"w"> </span><span class=3D"mi">0</span><spa=
n class=3D"p">:</span><span class=3D"w">    </span><span class=3D"c1">// Th=
is value and code path is likely</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">f=
allthrough</span><span class=3D"p">]];</span>

<span class=3D"w">  </span><span class=3D"k">case</span><span class=3D"w"> =
</span><span class=3D"mi">1</span><span class=3D"p">:</span><span class=3D"=
w">               </span><span class=3D"c1">// No likelihood attribute, cod=
e path is neutral</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span><span class=3D"w">              </span><span class=3D"c1">// fall=
ing through has no effect on the likelihood</span>

<span class=3D"w">  </span><span class=3D"k">case</span><span class=3D"w"> =
</span><span class=3D"mi">2</span><span class=3D"p">:</span><span class=3D"=
w">               </span><span class=3D"c1">// No likelihood attribute, cod=
e path is neutral</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">f=
allthrough</span><span class=3D"p">]];</span>

<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">unl=
ikely</span><span class=3D"p">]]</span><span class=3D"w"> </span><span clas=
s=3D"k">default</span><span class=3D"o">:</span><span class=3D"w"> </span><=
span class=3D"c1">// This value and code path are both unlikely</span>
<span class=3D"w">    </span><span class=3D"k">break</span><span class=3D"p=
">;</span>
<span class=3D"p">}</span>

<span class=3D"k">for</span><span class=3D"p">(</span><span class=3D"kt">in=
t</span><span class=3D"w"> </span><span class=3D"n">i</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"mi">0</span><span class=3D"p">;</span><span class=3D"w"> </span><span =
class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">!=3D</span>=
<span class=3D"w"> </span><span class=3D"n">size</span><span class=3D"p">;<=
/span><span class=3D"w"> </span><span class=3D"o">++</span><span class=3D"n=
">i</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"p">[[</span><span class=3D"n">likely</span><span class=3D"p">]]</span><=
span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w">  =
             </span><span class=3D"c1">// The loop is the likely path of ex=
ecution</span>
<span class=3D"p">}</span>

<span class=3D"k">for</span><span class=3D"p">(</span><span class=3D"k">con=
st</span><span class=3D"w"> </span><span class=3D"k">auto</span><span class=
=3D"w"> </span><span class=3D"o">&amp;</span><span class=3D"n">E</span><spa=
n class=3D"w"> </span><span class=3D"o">:</span><span class=3D"w"> </span><=
span class=3D"n">Elements</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"p">[[</span><span class=3D"n">likely</span><span cl=
ass=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w">  =
             </span><span class=3D"c1">// The loop is the likely path of ex=
ecution</span>
<span class=3D"p">}</span>

<span class=3D"k">while</span><span class=3D"p">(</span><span class=3D"n">i=
</span><span class=3D"w"> </span><span class=3D"o">!=3D</span><span class=
=3D"w"> </span><span class=3D"n">size</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">unlikely<=
/span><span class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p=
">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w">  =
             </span><span class=3D"c1">// The loop is the unlikely path of =
execution</span>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// The generated code will optimize to skip the loop body</sp=
an>

<span class=3D"k">while</span><span class=3D"p">(</span><span class=3D"nb">=
true</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"p">[[</span><span class=3D"n">unlikely</span><span class=3D"p">]]</span=
><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w">  =
             </span><span class=3D"c1">// The attribute has no effect</span=
>
<span class=3D"p">}</span><span class=3D"w">                   </span><span=
 class=3D"c1">// Clang elides the comparison and generates an infinite</spa=
n>
<span class=3D"w">                    </span><span class=3D"c1">// loop</sp=
an>
</pre></div>
</div>
</section>
<section id=3D"musttail">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id715" role=3D"doc-backlink">musttail</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#musttail" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id288">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
88" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">musttail</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::musttail</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::musttail</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>If a <code class=3D"docutils literal notranslate"><span class=3D"pre">re=
turn</span></code> statement is marked <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">musttail</span></code>, this indicates that th=
e
compiler must generate a tail call for the program to be correct, even when
optimizations are disabled. This guarantees that the call will not cause
unbounded stack growth if it is part of a recursive cycle in the call graph=
.</p>
<p>If the callee is a virtual function that is implemented by a thunk, ther=
e is
no guarantee in general that the thunk tail-calls the implementation of the
virtual function, so such a call in a recursive cycle can still result in
unbounded stack growth.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">clang::=
musttail</span></code> can only be applied to a <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">return</span></code> statement whose =
value
is the result of a function call (even functions returning void must use
<code class=3D"docutils literal notranslate"><span class=3D"pre">return</sp=
an></code>, although no value is returned). The target function must have t=
he
same number of arguments as the caller. The types of the return value and a=
ll
arguments must be similar according to C++ rules (differing only in cv
qualifiers or array size), including the implicit =E2=80=9Cthis=E2=80=9D ar=
gument, if any.
Any variables in scope, including all arguments to the function and the
return value must be trivially destructible. The calling convention of the
caller and callee must match, and they must not be variadic functions or ha=
ve
old style K&amp;R C function declarations.</p>
<p>The lifetimes of all local variables and function parameters end immedia=
tely
before the call to the function. This means that it is undefined behaviour =
to
pass a pointer or reference to a local variable to the called function, whi=
ch
is not the case without the attribute. Clang will emit a warning in common
cases where this happens.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">clang::=
musttail</span></code> provides assurances that the tail call can be optimi=
zed on
all targets, not just one.</p>
</section>
<section id=3D"nomerge">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id716" role=3D"doc-backlink">nomerge</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nomerge" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id289">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
89" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nomerge</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nomerge</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nomerge</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>If a statement is marked <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">nomerge</span></code> and contains call expressions, thos=
e call
expressions inside the statement will not be merged during optimization. Th=
is
attribute can be used to prevent the optimizer from obscuring the source
location of certain calls. For example, it will prevent tail merging otherw=
ise
identical code sequences that raise an exception or terminate the program. =
Tail
merging normally reduces the precision of source location information, maki=
ng
stack traces less useful for debugging. This attribute gives the user contr=
ol
over the tradeoff between code size and debug information precision.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">nomerge=
</span></code> attribute can also be used as function attribute to prevent =
all
calls to the specified function from merging. It has no effect on indirect
calls to such functions. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"p">[[</span><span class=3D"n">clang</span><span cla=
ss=3D"o">::</span><span class=3D"n">nomerge</span><span class=3D"p">]]</spa=
n><span class=3D"w"> </span><span class=3D"kt">void</span><span class=3D"w"=
> </span><span class=3D"n">foo</span><span class=3D"p">(</span><span class=
=3D"kt">int</span><span class=3D"p">)</span><span class=3D"w"> </span><span=
 class=3D"p">{}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">b=
ar</span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">ptr</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"n">foo</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">=
)</span><span class=3D"w"> </span><span class=3D"n">foo</span><span class=
=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span><span =
class=3D"w"> </span><span class=3D"k">else</span><span class=3D"w"> </span>=
<span class=3D"n">foo</span><span class=3D"p">(</span><span class=3D"mi">2<=
/span><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"c=
1">// will not be merged</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">=
)</span><span class=3D"w"> </span><span class=3D"n">ptr</span><span class=
=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span><span =
class=3D"w"> </span><span class=3D"k">else</span><span class=3D"w"> </span>=
<span class=3D"n">ptr</span><span class=3D"p">(</span><span class=3D"mi">2<=
/span><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"c=
1">// indirect call, can be merged</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">nomerge=
</span></code> attribute can also be used for pointers to functions to
prevent calls through such pointer from merging. In such case the
effect applies only to a specific function pointer. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"p">[[</span><span class=3D"n">clang</span><span cla=
ss=3D"o">::</span><span class=3D"n">nomerge</span><span class=3D"p">]]</spa=
n><span class=3D"w"> </span><span class=3D"kt">void</span><span class=3D"w"=
> </span><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D=
"n">foo</span><span class=3D"p">)(</span><span class=3D"kt">int</span><span=
 class=3D"p">);</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
bar</span><span class=3D"p">(</span><span class=3D"kt">int</span><span clas=
s=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">ptr</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"n">foo</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">=
)</span><span class=3D"w"> </span><span class=3D"n">foo</span><span class=
=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span><span =
class=3D"w"> </span><span class=3D"k">else</span><span class=3D"w"> </span>=
<span class=3D"n">foo</span><span class=3D"p">(</span><span class=3D"mi">2<=
/span><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"c=
1">// will not be merged</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">=
)</span><span class=3D"w"> </span><span class=3D"n">ptr</span><span class=
=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">);</span><span =
class=3D"w"> </span><span class=3D"k">else</span><span class=3D"w"> </span>=
<span class=3D"n">ptr</span><span class=3D"p">(</span><span class=3D"mi">2<=
/span><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"c=
1">// 'ptr' has no 'nomerge' attribute, can be merged</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"opencl-unroll-hint">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id717" role=3D"doc-backlink">opencl_unroll_hint</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#opencl-unroll-hint" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id290">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
90" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">opencl_unroll_hint</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The opencl_unroll_hint attribute qualifier can be used to specify that a=
 loop
(for, while and do loops) can be unrolled. This attribute qualifier can be
used to specify full unrolling or partial unrolling by a specified amount.
This is a compiler hint and the compiler may ignore this directive. See
<a class=3D"reference external" href=3D"https://www.khronos.org/registry/cl=
/specs/opencl-2.0.pdf">OpenCL v2.0</a>
s6.11.5 for details.</p>
</section>
<section id=3D"suppress">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id718" role=3D"doc-backlink">suppress</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#suppress" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id291">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
91" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">suppress</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gsl=
::suppress</span></code> <br> <code class=3D"docutils literal notranslate">=
<span class=3D"pre">clang::suppress</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::suppress</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sup=
press</span></code> attribute suppresses unwanted warnings coming from stat=
ic
analysis tools such as the Clang Static Analyzer. The tool will not report
any issues in source code annotated with the attribute.</p>
<p>The attribute cannot be used to suppress traditional Clang warnings, bec=
ause
many such warnings are emitted before the attribute is fully parsed.
Consider using <code class=3D"docutils literal notranslate"><span class=3D"=
pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"pre">di=
agnostic</span></code> to control such diagnostics,
as described in <a class=3D"reference external" href=3D"https://clang.llvm.=
org/docs/UsersManual.html#controlling-diagnostics-via-pragmas">Controlling =
Diagnostics via Pragmas</a>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sup=
press</span></code> attribute can be placed on an individual statement in o=
rder to
suppress warnings about undesirable behavior occurring at that statement:</=
p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">foo</span><span class=3D"p">()</span><span class=3D"w"> </span><spa=
n class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">x</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"k">nullptr</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">suppress</span><span =
class=3D"p">]]</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"o">*</span><span class=3D"n">x</span><span class=3D=
"p">;</span><span class=3D"w">  </span><span class=3D"c1">// null pointer d=
ereference warning suppressed here</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Putting the attribute on a compound statement suppresses all warnings in=
 scope:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">foo</span><span class=3D"p">()</span><span class=3D"w"> </span><spa=
n class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">suppress</span><span =
class=3D"p">]]</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"kt">int</span><span class=3D"w"=
> </span><span class=3D"o">*</span><span class=3D"n">x</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"k">nullptr</span><span class=3D"p">;</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
w"> </span><span class=3D"o">*</span><span class=3D"n">x</span><span class=
=3D"p">;</span><span class=3D"w">  </span><span class=3D"c1">// warnings su=
ppressed in the entire scope</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The attribute can also be placed on entire declarations of functions, cl=
asses,
variables, member variables, and so on, to suppress warnings related
to the declarations themselves. When used this way, the attribute additiona=
lly
suppresses all warnings in the lexical scope of the declaration:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">class</span><span class=3D"w"> </span><span clas=
s=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">::</span><=
span class=3D"n">suppress</span><span class=3D"p">]]</span><span class=3D"w=
"> </span><span class=3D"n">C</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"nf">foo</span><span class=3D"p">()</span><span class=
=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"kt">int</span><span class=3D"w"=
> </span><span class=3D"o">*</span><span class=3D"n">x</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"k">nullptr</span><span class=3D"p">;</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
w"> </span><span class=3D"o">*</span><span class=3D"n">x</span><span class=
=3D"p">;</span><span class=3D"w">  </span><span class=3D"c1">// warnings su=
ppressed in the entire class scope</span>
<span class=3D"w">  </span><span class=3D"p">}</span>

<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"nf">bar</span><span class=3D"p">();</span>
<span class=3D"p">};</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">C=
::bar</span><span class=3D"p">()</span><span class=3D"w"> </span><span clas=
s=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">x</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"k">nullptr</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"o">*</span><span class=3D"n">x</span><span class=3D=
"p">;</span><span class=3D"w">  </span><span class=3D"c1">// warning NOT su=
ppressed! - not lexically nested in 'class C{}'</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Some static analysis warnings are accompanied by one or more notes, and =
the
line of code against which the warning is emitted isn=E2=80=99t necessarily=
 the best
for suppression purposes. In such cases the tools are allowed to implement
additional ways to suppress specific warnings based on the attribute attach=
ed
to a note location.</p>
<p>For example, the Clang Static Analyzer suppresses memory leak warnings w=
hen
the suppression attribute is placed at the allocation site (highlited by
a =E2=80=9Cnote: memory is allocated=E2=80=9D), which may be different from=
 the line of code
at which the program =E2=80=9Closes track=E2=80=9D of the pointer (where th=
e warning
is ultimately emitted):</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">bar1</span><span class=3D"p">(</span><span class=3D"kt">bool</span>=
<span class=3D"w"> </span><span class=3D"n">coin_flip</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">suppress</span><span class=3D"p">))</spa=
n>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">result</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"p">(</span><span class=3D"kt">int</span><span class=3D"w"> </span>=
<span class=3D"o">*</span><span class=3D"p">)</span><span class=3D"n">mallo=
c</span><span class=3D"p">(</span><span class=3D"k">sizeof</span><span clas=
s=3D"p">(</span><span class=3D"kt">int</span><span class=3D"p">));</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">coin_flip</span><span clas=
s=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">;</span><span class=
=3D"w">  </span><span class=3D"c1">// warning about this leak path is suppr=
essed</span>

<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"o">*</span><span class=3D"n">result</span><span cla=
ss=3D"p">;</span><span class=3D"w">  </span><span class=3D"c1">// warning a=
bout this leak path is also suppressed</span>
<span class=3D"p">}</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">b=
ar2</span><span class=3D"p">(</span><span class=3D"kt">bool</span><span cla=
ss=3D"w"> </span><span class=3D"n">coin_flip</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">result</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"p">(</span><span class=3D"kt">int</span><span class=3D"w"> </span>=
<span class=3D"o">*</span><span class=3D"p">)</span><span class=3D"n">mallo=
c</span><span class=3D"p">(</span><span class=3D"k">sizeof</span><span clas=
s=3D"p">(</span><span class=3D"kt">int</span><span class=3D"p">));</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">coin_flip</span><span clas=
s=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"k">return</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">;</span><span class=
=3D"w">  </span><span class=3D"c1">// leak warning on this path NOT suppres=
sed</span>

<span class=3D"w">  </span><span class=3D"n">__attribute__</span><span clas=
s=3D"p">((</span><span class=3D"n">suppress</span><span class=3D"p">))</spa=
n>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"o">*</span><span class=3D"n">result</span><span cla=
ss=3D"p">;</span><span class=3D"w">  </span><span class=3D"c1">// leak warn=
ing is suppressed only on this path</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>When written as <code class=3D"docutils literal notranslate"><span class=
=3D"pre">[[gsl::suppress]]</span></code>, this attribute suppresses specifi=
c
clang-tidy diagnostics for rules of the <a class=3D"reference external" hre=
f=3D"https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuideli=
nes.md#inforce-enforcement">C++ Core Guidelines</a> in a portable
way. The attribute can be attached to declarations, statements, and at
namespace scope.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"p">[[</span><span class=3D"n">gsl</span><span class=
=3D"o">::</span><span class=3D"n">suppress</span><span class=3D"p">(</span>=
<span class=3D"s">"Rh-public"</span><span class=3D"p">)]]</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
_</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D=
"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"n">p</span><span class=3D"p=
">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">gsl=
</span><span class=3D"o">::</span><span class=3D"n">suppress</span><span cl=
ass=3D"p">(</span><span class=3D"s">"type"</span><span class=3D"p">)]]</spa=
n><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">p</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
k">reinterpret_cast</span><span class=3D"o">&lt;</span><span class=3D"kt">i=
nt</span><span class=3D"o">*&gt;</span><span class=3D"p">(</span><span clas=
s=3D"mi">7</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
<span class=3D"k">namespace</span><span class=3D"w"> </span><span class=3D"=
nn">N</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">suppress</span><span =
class=3D"p">(</span><span class=3D"s">"type"</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"s">"bounds"</span><span class=3D=
"p">)]];</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"sycl-special-class">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id719" role=3D"doc-backlink">sycl_special_class</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#sycl-special-class" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id292">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
92" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">sycl_special_class</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sycl_special_class</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::sycl_special_class</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>SYCL defines some special classes (accessor, sampler, and stream) which =
require
specific handling during the generation of the SPIR entry point.
The <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((sycl_special_class))</span></code> attribute is used in SYCL
headers to indicate that a class or a struct needs a specific handling when
it is passed from host to device.
Special classes will have a mandatory <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">__init</span></code> method and an optional
<code class=3D"docutils literal notranslate"><span class=3D"pre">__finalize=
</span></code> method (the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__finalize</span></code> method is used only with the
<code class=3D"docutils literal notranslate"><span class=3D"pre">stream</sp=
an></code> type). Kernel parameters types are extract from the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">__init</span></code> =
method
parameters. The kernel function arguments list is derived from the
arguments of the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__init</span></code> method. The arguments of the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">__init</span></code> metho=
d are
copied into the kernel function argument list and the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">__init</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">__finalize=
</span></code> methods are called at the beginning and the end of the kerne=
l,
respectively.
The <code class=3D"docutils literal notranslate"><span class=3D"pre">__init=
</span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__finalize</span></code> methods must be defined inside the
special class.
Please note that this is an attribute that is used as an internal
implementation detail and not intended to be used by external users.</p>
<p>The syntax of the attribute is as follows:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre><sp=
an></span>class __attribute__((sycl_special_class)) accessor {};
class [[clang::sycl_special_class]] accessor {};
</pre></div>
</div>
<p>This is a code example that illustrates the use of the attribute:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">class</span><span class=3D"w"> </span><span clas=
s=3D"nc">__attribute__</span><span class=3D"p">((</span><span class=3D"n">s=
ycl_special_class</span><span class=3D"p">))</span><span class=3D"w"> </spa=
n><span class=3D"n">SpecialType</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">F1</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">F2</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"nf">__init</span><span class=3D"p">(</span><span cla=
ss=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">f1</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span=
>
<span class=3D"w">    </span><span class=3D"n">F1</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">f1</span><span class=3D"p">;</span>
<span class=3D"w">    </span><span class=3D"n">F2</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">f1</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"nf">__finalize</span><span class=3D"p">()</span><spa=
n class=3D"w"> </span><span class=3D"p">{}</span>
<span class=3D"k">public</span><span class=3D"o">:</span>
<span class=3D"w">  </span><span class=3D"n">SpecialType</span><span class=
=3D"p">()</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span=
 class=3D"w"> </span><span class=3D"k">default</span><span class=3D"p">;</s=
pan>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"nf">getF2</span><span class=3D"p">()</span><span clas=
s=3D"w"> </span><span class=3D"k">const</span><span class=3D"w"> </span><sp=
an class=3D"p">{</span><span class=3D"w"> </span><span class=3D"k">return</=
span><span class=3D"w"> </span><span class=3D"n">F2</span><span class=3D"p"=
>;</span><span class=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"p">};</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">m=
ain</span><span class=3D"w"> </span><span class=3D"p">()</span><span class=
=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">SpecialType</span><span class=
=3D"w"> </span><span class=3D"n">T</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">cgh</span><span class=3D"p">.<=
/span><span class=3D"n">single_task</span><span class=3D"p">([</span><span =
class=3D"o">=3D</span><span class=3D"p">]</span><span class=3D"w"> </span><=
span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">T</span><span class=3D"p">.<=
/span><span class=3D"n">getF2</span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"p">});</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This would trigger the following kernel entry point in the AST:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">__sycl_kernel</span><span class=3D"p">(</span><span class=3D"kt">i=
nt</span><span class=3D"w"> </span><span class=3D"n">f1</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">SpecialType</span><span class=
=3D"w"> </span><span class=3D"n">T</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">T</span><span class=3D"p">.</s=
pan><span class=3D"n">__init</span><span class=3D"p">(</span><span class=3D=
"n">f1</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"p">...</span>
<span class=3D"w">  </span><span class=3D"n">T</span><span class=3D"p">.</s=
pan><span class=3D"n">__finalize</span><span class=3D"p">()</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
</section>
<section id=3D"type-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id720" role=3D"doc-backlink">Type Attributes</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#type=
-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<section id=3D"ptr32">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id721" role=3D"doc-backlink">__ptr32</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ptr32" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id293">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
93" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__p=
tr32</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__p=
tr32</span></code> qualifier represents a native pointer on a 32-bit system=
. On a
64-bit system, a pointer with <code class=3D"docutils literal notranslate">=
<span class=3D"pre">__ptr32</span></code> is extended to a 64-bit pointer. =
The
<code class=3D"docutils literal notranslate"><span class=3D"pre">__sptr</sp=
an></code> and <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__uptr</span></code> qualifiers can be used to specify whether the poi=
nter
is sign extended or zero extended. This qualifier is enabled under
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fms-exten=
sions</span></code>.</p>
</section>
<section id=3D"ptr64">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id722" role=3D"doc-backlink">__ptr64</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ptr64" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id294">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
94" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__p=
tr64</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__p=
tr64</span></code> qualifier represents a native pointer on a 64-bit system=
. On a
32-bit system, a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__ptr64</span></code> pointer is truncated to a 32-bit pointer. Th=
is
qualifier is enabled under <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">-fms-extensions</span></code>.</p>
</section>
<section id=3D"sptr">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id723" role=3D"doc-backlink">__sptr</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sptr" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id295">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
95" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__s=
ptr</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__s=
ptr</span></code> qualifier specifies that a 32-bit pointer should be sign
extended when converted to a 64-bit pointer.</p>
</section>
<section id=3D"uptr">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id724" role=3D"doc-backlink">__uptr</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#uptr" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id296">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
96" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__u=
ptr</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__u=
ptr</span></code> qualifier specifies that a 32-bit pointer should be zero
extended when converted to a 64-bit pointer.</p>
</section>
<section id=3D"align-value">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id725" role=3D"doc-backlink">align_value</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#align-va=
lue" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id297">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
97" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">align_value</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The align_value attribute can be added to the typedef of a pointer type =
or the
declaration of a variable of pointer or reference type. It specifies that t=
he
pointer will point to, or the reference will bind to, only objects with at
least the provided alignment. This alignment value must be some positive po=
wer
of 2.</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"k">typedef</span><span class=3D"w"> </span><span=
 class=3D"kt">double</span><span class=3D"w"> </span><span class=3D"o">*</s=
pan><span class=3D"w"> </span><span class=3D"n">aligned_double_ptr</span><s=
pan class=3D"w"> </span><span class=3D"n">__attribute__</span><span class=
=3D"p">((</span><span class=3D"n">align_value</span><span class=3D"p">(</sp=
an><span class=3D"mi">64</span><span class=3D"p">)));</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foo</span><span class=3D"p">(</span><span class=3D"kt">double</span><span c=
lass=3D"w"> </span><span class=3D"o">&amp;</span><span class=3D"w"> </span>=
<span class=3D"n">x</span><span class=3D"w">  </span><span class=3D"n">__at=
tribute__</span><span class=3D"p">((</span><span class=3D"n">align_value</s=
pan><span class=3D"p">(</span><span class=3D"mi">128</span><span class=3D"p=
">)),</span>
<span class=3D"w">         </span><span class=3D"n">aligned_double_ptr</spa=
n><span class=3D"w"> </span><span class=3D"n">y</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D"w">=
 </span><span class=3D"p">...</span><span class=3D"w"> </span><span class=
=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
<p>If the pointer value does not have the specified alignment at runtime, t=
he
behavior of the program is undefined.</p>
</section>
<section id=3D"annotate-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id726" role=3D"doc-backlink">annotate_type</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#annota=
te-type" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id298">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
98" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::annotate_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::annotate_type</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute is used to add annotations to types, typically for use by=
 static
analysis tools that are not integrated into the core Clang compiler (e.g.,
Clang-Tidy checks or out-of-tree Clang-based tools). It is a counterpart to=
 the
<cite>annotate</cite> attribute, which serves the same purpose, but for dec=
larations.</p>
<p>The attribute takes a mandatory string literal argument specifying the
annotation category and an arbitrary number of optional arguments that prov=
ide
additional information specific to the annotation category. The optional
arguments must be constant expressions of arbitrary type.</p>
<p>For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"o">*</span><span class=
=3D"w"> </span><span class=3D"p">[[</span><span class=3D"n">clang</span><sp=
an class=3D"o">::</span><span class=3D"n">annotate_type</span><span class=
=3D"p">(</span><span class=3D"s">"category1"</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"s">"foo"</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=
=3D"p">)]]</span><span class=3D"w"> </span><span class=3D"n">f</span><span =
class=3D"p">(</span><span class=3D"kt">int</span><span class=3D"p">[[</span=
><span class=3D"n">clang</span><span class=3D"o">::</span><span class=3D"n"=
>annotate_type</span><span class=3D"p">(</span><span class=3D"s">"category2=
"</span><span class=3D"p">)]]</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"p">);</span>
</pre></div>
</div>
<p>The attribute does not have any effect on the semantics of the type syst=
em,
neither type checking rules, nor runtime semantics. In particular:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">std=
::is_same&lt;T,</span> <span class=3D"pre">T</span> <span class=3D"pre">[[c=
lang::annotate_type("foo")]]&gt;</span></code> is true for all types
<code class=3D"docutils literal notranslate"><span class=3D"pre">T</span></=
code>.</p></li>
<li><p>It is not permissible for overloaded functions or template specializ=
ations
to differ merely by an <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">annotate_type</span></code> attribute.</p></li>
<li><p>The presence of an <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">annotate_type</span></code> attribute will not affect name
mangling.</p></li>
</ul>
</section>
<section id=3D"arm-sve-vector-bits">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id727" role=3D"doc-backlink">arm_sve_vector_bits</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#arm-sve-vector-bits" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id299">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id2=
99" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">arm_sve_vector_bits</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">arm=
_sve_vector_bits(N)</span></code> attribute is defined by the Arm C Languag=
e
Extensions (ACLE) for SVE. It is used to define fixed-length (VLST) variant=
s of
sizeless types (VLAT).</p>
<p>For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#include</span><span class=3D"w"> </span><span cl=
ass=3D"cpf">&lt;arm_sve.h&gt;</span>

<span class=3D"cp">#if __ARM_FEATURE_SVE_BITS=3D=3D512</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"n"=
>svint32_t</span><span class=3D"w"> </span><span class=3D"n">fixed_svint32_=
t</span><span class=3D"w"> </span><span class=3D"n">__attribute__</span><sp=
an class=3D"p">((</span><span class=3D"n">arm_sve_vector_bits</span><span c=
lass=3D"p">(</span><span class=3D"mi">512</span><span class=3D"p">)));</spa=
n>
<span class=3D"cp">#endif</span>
</pre></div>
</div>
<p>Creates a type <code class=3D"docutils literal notranslate"><span class=
=3D"pre">fixed_svint32_t</span></code> that is a fixed-length variant of
<code class=3D"docutils literal notranslate"><span class=3D"pre">svint32_t<=
/span></code> that contains exactly 512-bits. Unlike <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">svint32_t</span></code>, this ty=
pe
can be used in globals, structs, unions, and arrays, all of which are
unsupported for sizeless types.</p>
<p>The attribute can be attached to a single SVE vector (such as <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">svint32_t</span></co=
de>) or
to the SVE predicate type <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">svbool_t</span></code>, this excludes tuple types such as
<code class=3D"docutils literal notranslate"><span class=3D"pre">svint32x4_=
t</span></code>. The behavior of the attribute is undefined unless
<code class=3D"docutils literal notranslate"><span class=3D"pre">N=3D=3D__A=
RM_FEATURE_SVE_BITS</span></code>, the implementation defined feature macro=
 that is
enabled under the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-msve-vector-bits</span></code> flag.</p>
<p>For more information See <a class=3D"reference external" href=3D"https:/=
/developer.arm.com/documentation/100987/latest">Arm C Language Extensions f=
or SVE</a> for more information.</p>
</section>
<section id=3D"bpf-fastcall">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id728" role=3D"doc-backlink">bpf_fastcall</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#bpf-fas=
tcall" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id300">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
00" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">bpf_fastcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::bpf_fastcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::bpf_fastcall</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>Functions annotated with this attribute are likely to be inlined by BPF =
JIT.
It is assumed that inlined implementation uses less caller saved registers,
than a regular function.
Specifically, the following registers are likely to be preserved:
- <code class=3D"docutils literal notranslate"><span class=3D"pre">R0</span=
></code> if function return value is <code class=3D"docutils literal notran=
slate"><span class=3D"pre">void</span></code>;
- <code class=3D"docutils literal notranslate"><span class=3D"pre">R2-R5`</=
span> <span class=3D"pre">if</span> <span class=3D"pre">function</span> <sp=
an class=3D"pre">takes</span> <span class=3D"pre">1</span> <span class=3D"p=
re">argument;</span>
<span class=3D"pre">-</span> <span class=3D"pre">``R3-R5`</span> <span clas=
s=3D"pre">if</span> <span class=3D"pre">function</span> <span class=3D"pre"=
>takes</span> <span class=3D"pre">2</span> <span class=3D"pre">arguments;</=
span>
<span class=3D"pre">-</span> <span class=3D"pre">``R4-R5`</span> <span clas=
s=3D"pre">if</span> <span class=3D"pre">function</span> <span class=3D"pre"=
>takes</span> <span class=3D"pre">3</span> <span class=3D"pre">arguments;</=
span>
<span class=3D"pre">-</span> <span class=3D"pre">``R5</span></code> if func=
tion takes 4 arguments;</p>
<p>For such functions Clang generates code pattern that allows BPF JIT
to recognize and remove unnecessary spills and fills of the preserved
registers.</p>
</section>
<section id=3D"btf-type-tag">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id729" role=3D"doc-backlink">btf_type_tag</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#btf-typ=
e-tag" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id301">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
01" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">btf_type_tag</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::btf_type_tag</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::btf_type_tag</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Clang supports the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__attribute__((btf_type_tag("ARGUMENT")))</span></code> attribu=
te for
all targets. It only has effect when <code class=3D"docutils literal notran=
slate"><span class=3D"pre">-g</span></code> is specified on the command lin=
e and
is currently silently ignored when not applied to a pointer type (note: thi=
s
scenario may be diagnosed in the future).</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ARG=
UMENT</span></code> string will be preserved in IR and emitted to DWARF for=
 the
types used in variable declarations, function declarations, or typedef
declarations.</p>
<p>For BPF targets, the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">ARGUMENT</span></code> string will also be emitted to .BTF EL=
F
section.</p>
</section>
<section id=3D"clang-arm-mve-strict-polymorphism">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id730" role=3D"doc-backlink">clang_arm_mve_strict_polymorphis=
m</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#clang-arm-mve-strict-polymorphism" title=3D"Link to this head=
ing">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id302">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
02" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">__clang_arm_mve_strict_polymorphism</span></code></p></=
td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::__clang_arm_mve_strict_polymorphism</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::__clang_arm_mve_strict_polymorphism</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute is used in the implementation of the ACLE intrinsics for =
the Arm
MVE instruction set. It is used to define the vector types used by the MVE
intrinsics.</p>
<p>Its effect is to modify the behavior of a vector type with respect to fu=
nction
overloading. If a candidate function for overload resolution has a paramete=
r
type with this attribute, then the selection of that candidate function wil=
l be
disallowed if the actual argument can only be converted via a lax vector
conversion. The aim is to prevent spurious ambiguity in ARM MVE polymorphic
intrinsics.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">overloaded</span><span class=3D"p">(</span><span class=3D"n">uint1=
6x8_t</span><span class=3D"w"> </span><span class=3D"n">vector</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">uint16_t</=
span><span class=3D"w"> </span><span class=3D"n">scalar</span><span class=
=3D"p">);</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
overloaded</span><span class=3D"p">(</span><span class=3D"n">int32x4_t</spa=
n><span class=3D"w"> </span><span class=3D"n">vector</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"kt">int32_t</span><span =
class=3D"w"> </span><span class=3D"n">scalar</span><span class=3D"p">);</sp=
an>
<span class=3D"n">uint16x8_t</span><span class=3D"w"> </span><span class=3D=
"n">myVector</span><span class=3D"p">;</span>
<span class=3D"kt">uint16_t</span><span class=3D"w"> </span><span class=3D"=
n">myScalar</span><span class=3D"p">;</span>

<span class=3D"c1">// myScalar is promoted to int32_t as a side effect of t=
he addition,</span>
<span class=3D"c1">// so if lax vector conversions are considered for myVec=
tor, then</span>
<span class=3D"c1">// the two overloads are equally good (one argument conv=
ersion</span>
<span class=3D"c1">// each). But if the vector has the __clang_arm_mve_stri=
ct_polymorphism</span>
<span class=3D"c1">// attribute, only the uint16x8_t,uint16_t overload will=
 match.</span>
<span class=3D"n">overloaded</span><span class=3D"p">(</span><span class=3D=
"n">myVector</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">myScalar</span><span class=3D"w"> </span><span class=3D"o">+<=
/span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p=
">);</span>
</pre></div>
</div>
<p>However, this attribute does not prohibit lax vector conversions in cont=
exts
other than overloading.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"n">uint16x8_t</span><span class=3D"w"> </span><span=
 class=3D"nf">function</span><span class=3D"p">();</span>

<span class=3D"c1">// This is still permitted with lax vector conversion en=
abled, even</span>
<span class=3D"c1">// if the vector types have __clang_arm_mve_strict_polym=
orphism</span>
<span class=3D"n">int32x4_t</span><span class=3D"w"> </span><span class=3D"=
n">result</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span=
 class=3D"w"> </span><span class=3D"n">function</span><span class=3D"p">();=
</span>
</pre></div>
</div>
</section>
<section id=3D"cmse-nonsecure-call">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id731" role=3D"doc-backlink">cmse_nonsecure_call</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#cmse-nonsecure-call" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id303">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
03" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cmse_nonsecure_call</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This attribute declares a non-secure function type. When compiling for s=
ecure
state, a call to such a function would switch from secure to non-secure sta=
te.
All non-secure function calls must happen only through a function pointer, =
and
a non-secure function type should only be used as a base type of a pointer.
See <a class=3D"reference external" href=3D"https://developer.arm.com/docs/=
ecm0359818/latest/">ARMv8-M Security Extensions: Requirements on Developmen=
t
Tools - Engineering Specification Documentation</a> for more information.</=
p>
</section>
<section id=3D"device-builtin-surface-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id732" role=3D"doc-backlink">device_builtin_surface_type</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferen=
ce.html#device-builtin-surface-type" title=3D"Link to this heading">=C2=B6<=
/a></h3>
<table class=3D"docutils align-default" id=3D"id304">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
04" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">device_builtin_surface_type</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
evice_builtin_surface_type__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dev=
ice_builtin_surface_type</span></code> attribute can be applied to a class
template when declaring the surface reference. A surface reference variable
could be accessed on the host side and, on the device side, might be transl=
ated
into an internal surface object, which is established through surface bind =
and
unbind runtime APIs.</p>
</section>
<section id=3D"device-builtin-texture-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id733" role=3D"doc-backlink">device_builtin_texture_type</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferen=
ce.html#device-builtin-texture-type" title=3D"Link to this heading">=C2=B6<=
/a></h3>
<table class=3D"docutils align-default" id=3D"id305">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
05" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">device_builtin_texture_type</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
evice_builtin_texture_type__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dev=
ice_builtin_texture_type</span></code> attribute can be applied to a class
template when declaring the texture reference. A texture reference variable
could be accessed on the host side and, on the device side, might be transl=
ated
into an internal texture object, which is established through texture bind =
and
unbind runtime APIs.</p>
</section>
<section id=3D"enforce-read-only-placement">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id734" role=3D"doc-backlink">enforce_read_only_placement</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferen=
ce.html#enforce-read-only-placement" title=3D"Link to this heading">=C2=B6<=
/a></h3>
<table class=3D"docutils align-default" id=3D"id306">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
06" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">enforce_read_only_placement</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::enforce_read_only_placement</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::enforce_read_only_placement</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<dl>
<dt>This attribute is attached to a structure, class or union declaration.<=
/dt><dd><p>When attached to a record declaration/definition, it checks if a=
ll instances
of this type can be placed in the read-only data segment of the program. If=
 it
finds an instance that can not be placed in a read-only segment, the compil=
er
emits a warning at the source location where the type was used.</p>
<p>Examples:
* <code class=3D"docutils literal notranslate"><span class=3D"pre">struct</=
span> <span class=3D"pre">__attribute__((enforce_read_only_placement))</spa=
n> <span class=3D"pre">Foo;</span></code>
* <code class=3D"docutils literal notranslate"><span class=3D"pre">struct</=
span> <span class=3D"pre">__attribute__((enforce_read_only_placement))</spa=
n> <span class=3D"pre">Bar</span> <span class=3D"pre">{</span> <span class=
=3D"pre">...</span> <span class=3D"pre">};</span></code></p>
<p>Both <code class=3D"docutils literal notranslate"><span class=3D"pre">Fo=
o</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Bar</span></code> types have the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">enforce_read_only_placement</span></code> =
attribute.</p>
<p>The goal of introducing this attribute is to assist developers with writ=
ing secure
code. A <code class=3D"docutils literal notranslate"><span class=3D"pre">co=
nst</span></code>-qualified global is generally placed in the read-only sec=
tion
of the memory that has additional run time protection from malicious writes=
. By
attaching this attribute to a declaration, the developer can express the in=
tent
to place all instances of the annotated type in the read-only program memor=
y.</p>
<p>Note 1: The attribute doesn=E2=80=99t guarantee that the object will be =
placed in the
read-only data segment as it does not instruct the compiler to ensure such
a placement. It emits a warning if something in the code can be proven to p=
revent
an instance from being placed in the read-only data segment.</p>
<p>Note 2: Currently, clang only checks if all global declarations of a giv=
en type =E2=80=98T=E2=80=99
are <code class=3D"docutils literal notranslate"><span class=3D"pre">const<=
/span></code>-qualified. The following conditions would also prevent the da=
ta to be
put into read only segment, but the corresponding warnings are not yet impl=
emented.</p>
<ol class=3D"arabic simple">
<li><p>An instance of type <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">T</span></code> is allocated on the heap/stack.</p></li>
<li><p>Type <code class=3D"docutils literal notranslate"><span class=3D"pre=
">T</span></code> defines/inherits a mutable field.</p></li>
<li><p>Type <code class=3D"docutils literal notranslate"><span class=3D"pre=
">T</span></code> defines/inherits non-constexpr constructor(s) for initial=
ization.</p></li>
<li><p>A field of type <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">T</span></code> is defined by type <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Q</span></code>, which does not bear =
the
<code class=3D"docutils literal notranslate"><span class=3D"pre">enforce_re=
ad_only_placement</span></code> attribute.</p></li>
<li><p>A type <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Q</span></code> inherits from type <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">T</span></code> and it does not have the
<code class=3D"docutils literal notranslate"><span class=3D"pre">enforce_re=
ad_only_placement</span></code> attribute.</p></li>
</ol>
</dd>
</dl>
</section>
<section id=3D"noderef">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id735" role=3D"doc-backlink">noderef</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#noderef" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id307">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
07" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">noderef</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::noderef</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::noderef</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">nod=
eref</span></code> attribute causes clang to diagnose dereferences of annot=
ated pointer types.
This is ideally used with pointers that point to special memory which canno=
t be read
from or written to, but allowing for the pointer to be used in pointer arit=
hmetic.
The following are examples of valid expressions where dereferences are diag=
nosed:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">__attribute__</span><span class=3D"p">((</span><span class=3D"n">no=
deref</span><span class=3D"p">))</span><span class=3D"w"> </span><span clas=
s=3D"o">*</span><span class=3D"n">p</span><span class=3D"p">;</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">x<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"o">*</span><span class=3D"n">p</span><span class=
=3D"p">;</span><span class=3D"w">  </span><span class=3D"c1">// warning</sp=
an>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">_=
_attribute__</span><span class=3D"p">((</span><span class=3D"n">noderef</sp=
an><span class=3D"p">))</span><span class=3D"w"> </span><span class=3D"o">*=
*</span><span class=3D"n">p2</span><span class=3D"p">;</span>
<span class=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"o">**</span><span class=3D"n"=
>p2</span><span class=3D"p">;</span><span class=3D"w">  </span><span class=
=3D"c1">// warning</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"o">*<=
/span><span class=3D"w"> </span><span class=3D"nf">__attribute__</span><spa=
n class=3D"p">((</span><span class=3D"n">noderef</span><span class=3D"p">))=
</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n=
">p3</span><span class=3D"p">;</span>
<span class=3D"n">p</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">=
p3</span><span class=3D"p">;</span><span class=3D"w">  </span><span class=
=3D"c1">// warning</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>S</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a</span><span class=3D"p">;</span>
<span class=3D"p">};</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>S</span><span class=3D"w"> </span><span class=3D"n">__attribute__</span><s=
pan class=3D"p">((</span><span class=3D"n">noderef</span><span class=3D"p">=
))</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D=
"n">s</span><span class=3D"p">;</span>
<span class=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">s</span><span class=3D"o">=
-&gt;</span><span class=3D"n">a</span><span class=3D"p">;</span><span class=
=3D"w">    </span><span class=3D"c1">// warning</span>
<span class=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"o">=
*</span><span class=3D"n">s</span><span class=3D"p">).</span><span class=3D=
"n">a</span><span class=3D"p">;</span><span class=3D"w">  </span><span clas=
s=3D"c1">// warning</span>
</pre></div>
</div>
<p>Not all dereferences may diagnose a warning if the value directed by the=
 pointer may not be
accessed. The following are examples of valid expressions where may not be =
diagnosed:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">q</span><span class=3D"p">;</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">_=
_attribute__</span><span class=3D"p">((</span><span class=3D"n">noderef</sp=
an><span class=3D"p">))</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"n">p</span><span class=3D"p">;</span>
<span class=3D"n">q</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"o">&amp;*</span><span class=
=3D"n">p</span><span class=3D"p">;</span>
<span class=3D"n">q</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"o">*&amp;</span><span class=
=3D"n">p</span><span class=3D"p">;</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>S</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a</span><span class=3D"p">;</span>
<span class=3D"p">};</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>S</span><span class=3D"w"> </span><span class=3D"n">__attribute__</span><s=
pan class=3D"p">((</span><span class=3D"n">noderef</span><span class=3D"p">=
))</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D=
"n">s</span><span class=3D"p">;</span>
<span class=3D"n">p</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"o">&amp;</span><span class=3D=
"n">s</span><span class=3D"o">-&gt;</span><span class=3D"n">a</span><span c=
lass=3D"p">;</span>
<span class=3D"n">p</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"o">&amp;</span><span class=3D=
"p">(</span><span class=3D"o">*</span><span class=3D"n">s</span><span class=
=3D"p">).</span><span class=3D"n">a</span><span class=3D"p">;</span>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">noderef=
</span></code> is currently only supported for pointers and arrays and not =
usable
for references or Objective-C object pointers.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"mi">2</span><span class=3D"p">;</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">_=
_attribute__</span><span class=3D"p">((</span><span class=3D"n">noderef</sp=
an><span class=3D"p">))</span><span class=3D"w"> </span><span class=3D"o">&=
amp;</span><span class=3D"n">y</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">x</span><span =
class=3D"p">;</span><span class=3D"w">  </span><span class=3D"c1">// warnin=
g: 'noderef' can only be used on an array or pointer type</span>
</pre></div>
</div>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"kt">id</span><span class=3D"w"> </span><span class=
=3D"nf">__attribute__</span><span class=3D"p">((</span><span class=3D"n">no=
deref</span><span class=3D"p">))</span><span class=3D"w"> </span><span clas=
s=3D"n">obj</span><span class=3D"w"> </span><span class=3D"o">=3D</span><sp=
an class=3D"w"> </span><span class=3D"p">[</span><span class=3D"bp">NSObjec=
t</span><span class=3D"w"> </span><span class=3D"n">new</span><span class=
=3D"p">];</span><span class=3D"w"> </span><span class=3D"c1">// warning: 'n=
oderef' can only be used on an array or pointer type</span>
</pre></div>
</div>
</section>
<section id=3D"objc-class-stub">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id736" role=3D"doc-backlink">objc_class_stub</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#objc=
-class-stub" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id308">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
08" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_class_stub</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_class_stub</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_class_stub</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute specifies that the Objective-C class to which it applies =
is
instantiated at runtime.</p>
<p>Unlike <code class=3D"docutils literal notranslate"><span class=3D"pre">=
__attribute__((objc_runtime_visible))</span></code>, a class having this at=
tribute
still has a =E2=80=9Cclass stub=E2=80=9D that is visible to the linker. Thi=
s allows categories
to be defined. Static message sends with the class as a receiver use a spec=
ial
access pattern to ensure the class is lazily instantiated from the class st=
ub.</p>
<p>Classes annotated with this attribute cannot be subclassed and cannot ha=
ve
implementations defined for them. This attribute is intended for use in
Swift-generated headers for classes defined in Swift.</p>
<p>Adding or removing this attribute to a class is an ABI-breaking change.<=
/p>
</section>
<section id=3D"riscv-rvv-vector-bits">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id737" role=3D"doc-backlink">riscv_rvv_vector_bits</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#riscv-rvv-vector-bits" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id309">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
09" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">riscv_rvv_vector_bits</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>On RISC-V targets, the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">riscv_rvv_vector_bits(N)</span></code> attribute is used to=
 define
fixed-length variants of sizeless types.</p>
<p>For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#include</span><span class=3D"w"> </span><span cl=
ass=3D"cpf">&lt;riscv_vector.h&gt;</span>

<span class=3D"cp">#if defined(__riscv_v_fixed_vlen)</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"n"=
>vint8m1_t</span><span class=3D"w"> </span><span class=3D"n">fixed_vint8m1_=
t</span><span class=3D"w"> </span><span class=3D"n">__attribute__</span><sp=
an class=3D"p">((</span><span class=3D"n">riscv_rvv_vector_bits</span><span=
 class=3D"p">(</span><span class=3D"n">__riscv_v_fixed_vlen</span><span cla=
ss=3D"p">)));</span>
<span class=3D"cp">#endif</span>
</pre></div>
</div>
<p>Creates a type <code class=3D"docutils literal notranslate"><span class=
=3D"pre">fixed_vint8m1_t</span></code> that is a fixed-length variant of
<code class=3D"docutils literal notranslate"><span class=3D"pre">vint8m1_t<=
/span></code> that contains exactly 512 bits. Unlike <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">vint8m1_t</span></code>, this ty=
pe
can be used in globals, structs, unions, and arrays, all of which are
unsupported for sizeless types.</p>
<p>The attribute can be attached to a single RVV vector (such as <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">vint8m1_t</span></co=
de>).
The attribute will be rejected unless
<code class=3D"docutils literal notranslate"><span class=3D"pre">N=3D=3D(__=
riscv_v_fixed_vlen*LMUL)</span></code>, the implementation defined feature =
macro that
is enabled under the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">-mrvv-vector-bits</span></code> flag. <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">__riscv_v_fixed_vlen</span></code> c=
an
only be a power of 2 between 64 and 65536.</p>
<p>For types where LMUL!=3D1, <code class=3D"docutils literal notranslate">=
<span class=3D"pre">__riscv_v_fixed_vlen</span></code> needs to be scaled b=
y the LMUL
of the type before passing to the attribute.</p>
<p>For <code class=3D"docutils literal notranslate"><span class=3D"pre">vbo=
ol*_t</span></code> types, <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__riscv_v_fixed_vlen</span></code> needs to be divided by =
the
number from the type name. For example, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">vbool8_t</span></code> needs to use
<code class=3D"docutils literal notranslate"><span class=3D"pre">__riscv_v_=
fixed_vlen</span></code> / 8. If the resulting value is not a multiple of 8=
,
the type is not supported for that value of <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">__riscv_v_fixed_vlen</span></code>.</p>
</section>
<section id=3D"type-visibility">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id738" role=3D"doc-backlink">type_visibility</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#type=
-visibility" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id310">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
10" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">type_visibility</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::type_visibility</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::type_visibility</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">typ=
e_visibility</span></code> attribute allows the visibility of a type and it=
s vague
linkage objects (vtable, typeinfo, typeinfo name) to be controlled separate=
ly from
the visibility of functions and data members of the type.</p>
<p>For example, this can be used to give default visibility to the typeinfo=
 and the vtable
of a type while still keeping hidden visibility on its member functions and=
 static data
members.</p>
<p>This attribute can only be applied to types and namespaces.</p>
<p>If both <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>visibility</span></code> and <code class=3D"docutils literal notranslate">=
<span class=3D"pre">type_visibility</span></code> are applied to a type or =
a namespace, the
visibility specified with the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">type_visibility</span></code> attribute overrides the v=
isibility
provided with the regular <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">visibility</span></code> attribute.</p>
</section>
</section>
<section id=3D"type-safety-checking">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id739" role=3D"doc-backlink">Type Safety Checking</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#type-safety-checking" title=3D"Link to this heading">=C2=B6</a></h2>
<p>Clang supports additional attributes to enable checking type safety prop=
erties
that can=E2=80=99t be enforced by the C type system. To see warnings produc=
ed by these
checks, ensure that -Wtype-safety is enabled. Use cases include:</p>
<ul class=3D"simple">
<li><p>MPI library implementations, where these attributes enable checking =
that
the buffer type matches the passed <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">MPI_Datatype</span></code>;</p></li>
<li><p>for HDF5 library there is a similar use case to MPI;</p></li>
<li><p>checking types of variadic functions=E2=80=99 arguments for function=
s like
<code class=3D"docutils literal notranslate"><span class=3D"pre">fcntl()</s=
pan></code> and <code class=3D"docutils literal notranslate"><span class=3D=
"pre">ioctl()</span></code>.</p></li>
</ul>
<p>You can detect support for these attributes with <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">__has_attribute()</span></code>. =
For
example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">#if defined(__has_attribute)</span>
<span class=3D"cp">#  if __has_attribute(argument_with_type_tag) &amp;&amp;=
 \</span>
<span class=3D"cp">      __has_attribute(pointer_with_type_tag) &amp;&amp; =
\</span>
<span class=3D"cp">      __has_attribute(type_tag_for_datatype)</span>
<span class=3D"cp">#    define ATTR_MPI_PWT(buffer_idx, type_idx) __attribu=
te__((pointer_with_type_tag(mpi,buffer_idx,type_idx)))</span>
<span class=3D"cm">/* ... other macros ... */</span>
<span class=3D"cp">#  endif</span>
<span class=3D"cp">#endif</span>

<span class=3D"cp">#if !defined(ATTR_MPI_PWT)</span>
<span class=3D"cp"># define ATTR_MPI_PWT(buffer_idx, type_idx)</span>
<span class=3D"cp">#endif</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">M=
PI_Send</span><span class=3D"p">(</span><span class=3D"kt">void</span><span=
 class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">buf</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">int<=
/span><span class=3D"w"> </span><span class=3D"n">count</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">MPI_Datatype</sp=
an><span class=3D"w"> </span><span class=3D"n">datatype</span><span class=
=3D"w"> </span><span class=3D"cm">/*, other args omitted */</span><span cla=
ss=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"n">ATTR_MPI_PWT</span><span cla=
ss=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">,</span><span=
 class=3D"mi">3</span><span class=3D"p">);</span>
</pre></div>
</div>
<section id=3D"argument-with-type-tag">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id740" role=3D"doc-backlink">argument_with_type_tag</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#argument-with-type-tag" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id311">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
11" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">argument_with_type_tag</span></code> <br> <code class=
=3D"docutils literal notranslate"><span class=3D"pre">pointer_with_type_tag=
</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::argument_with_type_tag</span></code> <br> <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">clang::pointer_with_type_tag</span></co=
de></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::argument_with_type_tag</span></code> <br> <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">clang::pointer_with_type_tag</span></co=
de></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((argument_with_type_tag(arg_kind,</span> <span class=3D"pre">arg=
_idx,</span>
<span class=3D"pre">type_tag_idx)))</span></code> on a function declaration=
 to specify that the function
accepts a type tag that determines the type of some other argument.</p>
<p>This attribute is primarily useful for checking arguments of variadic fu=
nctions
(<code class=3D"docutils literal notranslate"><span class=3D"pre">pointer_w=
ith_type_tag</span></code> can be used in most non-variadic cases).</p>
<dl class=3D"simple">
<dt>In the attribute prototype above:</dt><dd><ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">arg=
_kind</span></code> is an identifier that should be used when annotating al=
l
applicable type tags.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">arg=
_idx</span></code> provides the position of a function argument. The expect=
ed type of
this function argument will be determined by the function argument specifie=
d
by <code class=3D"docutils literal notranslate"><span class=3D"pre">type_ta=
g_idx</span></code>. In the code example below, =E2=80=9C3=E2=80=9D means t=
hat the type of the
function=E2=80=99s third argument will be determined by <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">type_tag_idx</span></code>.</=
p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">typ=
e_tag_idx</span></code> provides the position of a function argument. This =
function
argument will be a type tag. The type tag will determine the expected type =
of
the argument specified by <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">arg_idx</span></code>. In the code example below, =E2=80=9C=
2=E2=80=9D means
that the type tag associated with the function=E2=80=99s second argument sh=
ould agree
with the type of the argument specified by <code class=3D"docutils literal =
notranslate"><span class=3D"pre">arg_idx</span></code>.</p></li>
</ul>
</dd>
</dl>
<p>For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">fcntl</span><span class=3D"p">(</span><span class=3D"kt">int</span>=
<span class=3D"w"> </span><span class=3D"n">fd</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w=
"> </span><span class=3D"n">cmd</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"p">...)</span>
<span class=3D"w">    </span><span class=3D"n">__attribute__</span><span cl=
ass=3D"p">((</span><span class=3D"w"> </span><span class=3D"n">argument_wit=
h_type_tag</span><span class=3D"p">(</span><span class=3D"n">fcntl</span><s=
pan class=3D"p">,</span><span class=3D"mi">3</span><span class=3D"p">,</spa=
n><span class=3D"mi">2</span><span class=3D"p">)</span><span class=3D"w"> <=
/span><span class=3D"p">));</span>
<span class=3D"c1">// The function's second argument will be a type tag; th=
is type tag will</span>
<span class=3D"c1">// determine the expected type of the function's third a=
rgument.</span>
</pre></div>
</div>
</section>
<section id=3D"pointer-with-type-tag">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id741" role=3D"doc-backlink">pointer_with_type_tag</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#pointer-with-type-tag" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id312">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
12" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">argument_with_type_tag</span></code> <br> <code class=
=3D"docutils literal notranslate"><span class=3D"pre">pointer_with_type_tag=
</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::argument_with_type_tag</span></code> <br> <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">clang::pointer_with_type_tag</span></co=
de></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::argument_with_type_tag</span></code> <br> <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">clang::pointer_with_type_tag</span></co=
de></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__a=
ttribute__((pointer_with_type_tag(ptr_kind,</span> <span class=3D"pre">ptr_=
idx,</span> <span class=3D"pre">type_tag_idx)))</span></code>
on a function declaration to specify that the function accepts a type tag t=
hat
determines the pointee type of some other pointer argument.</p>
<dl class=3D"simple">
<dt>In the attribute prototype above:</dt><dd><ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ptr=
_kind</span></code> is an identifier that should be used when annotating al=
l
applicable type tags.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ptr=
_idx</span></code> provides the position of a function argument; this funct=
ion
argument will have a pointer type. The expected pointee type of this pointe=
r
type will be determined by the function argument specified by
<code class=3D"docutils literal notranslate"><span class=3D"pre">type_tag_i=
dx</span></code>. In the code example below, =E2=80=9C1=E2=80=9D means that=
 the pointee type
of the function=E2=80=99s first argument will be determined by <code class=
=3D"docutils literal notranslate"><span class=3D"pre">type_tag_idx</span></=
code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">typ=
e_tag_idx</span></code> provides the position of a function argument; this =
function
argument will be a type tag. The type tag will determine the expected point=
ee
type of the pointer argument specified by <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">ptr_idx</span></code>. In the code example
below, =E2=80=9C3=E2=80=9D means that the type tag associated with the func=
tion=E2=80=99s third
argument should agree with the pointee type of the pointer argument specifi=
ed
by <code class=3D"docutils literal notranslate"><span class=3D"pre">ptr_idx=
</span></code>.</p></li>
</ul>
</dd>
</dl>
<p>For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">typedef</span><span class=3D"w"> </span><span cl=
ass=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">MPI_Dataty=
pe</span><span class=3D"p">;</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">M=
PI_Send</span><span class=3D"p">(</span><span class=3D"kt">void</span><span=
 class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">buf</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">int<=
/span><span class=3D"w"> </span><span class=3D"n">count</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">MPI_Datatype</sp=
an><span class=3D"w"> </span><span class=3D"n">datatype</span><span class=
=3D"w"> </span><span class=3D"cm">/*, other args omitted */</span><span cla=
ss=3D"p">)</span>
<span class=3D"w">    </span><span class=3D"n">__attribute__</span><span cl=
ass=3D"p">((</span><span class=3D"w"> </span><span class=3D"n">pointer_with=
_type_tag</span><span class=3D"p">(</span><span class=3D"n">mpi</span><span=
 class=3D"p">,</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"mi">3</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"p">));</span>
<span class=3D"c1">// The function's 3rd argument will be a type tag; this =
type tag will</span>
<span class=3D"c1">// determine the expected pointee type of the function's=
 1st argument.</span>
</pre></div>
</div>
</section>
<section id=3D"type-tag-for-datatype">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id742" role=3D"doc-backlink">type_tag_for_datatype</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#type-tag-for-datatype" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id313">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
13" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">type_tag_for_datatype</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::type_tag_for_datatype</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::type_tag_for_datatype</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>When declaring a variable, use
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((type_tag_for_datatype(kind,</span> <span class=3D"pre">type)))</span><=
/code> to create a type tag that
is tied to the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">type</span></code> argument given to the attribute.</p>
<dl class=3D"simple">
<dt>In the attribute prototype above:</dt><dd><ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">kin=
d</span></code> is an identifier that should be used when annotating all ap=
plicable
type tags.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">typ=
e</span></code> indicates the name of the type.</p></li>
</ul>
</dd>
</dl>
<p>Clang supports annotating type tags of two forms.</p>
<blockquote>
<div><ul>
<li><p><strong>Type tag that is a reference to a declared identifier.</stro=
ng>
Use <code class=3D"docutils literal notranslate"><span class=3D"pre">__attr=
ibute__((type_tag_for_datatype(kind,</span> <span class=3D"pre">type)))</sp=
an></code> when declaring that
identifier:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">typedef</span><span class=3D"w"> </span><span cl=
ass=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">MPI_Dataty=
pe</span><span class=3D"p">;</span>
<span class=3D"k">extern</span><span class=3D"w"> </span><span class=3D"k">=
struct</span><span class=3D"w"> </span><span class=3D"nc">mpi_datatype</spa=
n><span class=3D"w"> </span><span class=3D"n">mpi_datatype_int</span>
<span class=3D"w">    </span><span class=3D"nf">__attribute__</span><span c=
lass=3D"p">((</span><span class=3D"w"> </span><span class=3D"n">type_tag_fo=
r_datatype</span><span class=3D"p">(</span><span class=3D"n">mpi</span><spa=
n class=3D"p">,</span><span class=3D"kt">int</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"p">));</span>
<span class=3D"cp">#define MPI_INT ((MPI_Datatype) &amp;mpi_datatype_int)</=
span>
<span class=3D"c1">// &amp;mpi_datatype_int is a type tag. It is tied to ty=
pe "int".</span>
</pre></div>
</div>
</li>
<li><p><strong>Type tag that is an integral literal.</strong>
Declare a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
static</span> <span class=3D"pre">const</span></code> variable with an init=
ializer value and attach
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((type_tag_for_datatype(kind,</span> <span class=3D"pre">type)))</span><=
/code> on that declaration:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">typedef</span><span class=3D"w"> </span><span cl=
ass=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">MPI_Dataty=
pe</span><span class=3D"p">;</span>
<span class=3D"k">static</span><span class=3D"w"> </span><span class=3D"k">=
const</span><span class=3D"w"> </span><span class=3D"n">MPI_Datatype</span>=
<span class=3D"w"> </span><span class=3D"n">mpi_datatype_int</span>
<span class=3D"w">    </span><span class=3D"n">__attribute__</span><span cl=
ass=3D"p">((</span><span class=3D"w"> </span><span class=3D"n">type_tag_for=
_datatype</span><span class=3D"p">(</span><span class=3D"n">mpi</span><span=
 class=3D"p">,</span><span class=3D"kt">int</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"p">))</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">42</span><span class=3D"p">;</span>
<span class=3D"cp">#define MPI_INT ((MPI_Datatype) 42)</span>
<span class=3D"c1">// The number 42 is a type tag. It is tied to type "int"=
.</span>
</pre></div>
</div>
</li>
</ul>
</div></blockquote>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">typ=
e_tag_for_datatype</span></code> attribute also accepts an optional third a=
rgument
that determines how the type of the function argument specified by either
<code class=3D"docutils literal notranslate"><span class=3D"pre">arg_idx</s=
pan></code> or <code class=3D"docutils literal notranslate"><span class=3D"=
pre">ptr_idx</span></code> is compared against the type associated with the=
 type
tag. (Recall that for the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">argument_with_type_tag</span></code> attribute, the type of=
 the
function argument specified by <code class=3D"docutils literal notranslate"=
><span class=3D"pre">arg_idx</span></code> is compared against the type
associated with the type tag. Also recall that for the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">pointer_with_type_tag</span></=
code>
attribute, the pointee type of the function argument specified by <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">ptr_idx</span></cod=
e> is
compared against the type associated with the type tag.) There are two supp=
orted
values for this optional third argument:</p>
<blockquote>
<div><ul>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">lay=
out_compatible</span></code> will cause types to be compared according to
layout-compatibility rules (In C++11 [class.mem] p 17, 18, see the
layout-compatibility rules for two standard-layout struct types and for two
standard-layout union types). This is useful when creating a type tag
associated with a struct or union type. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cm">/* In mpi.h */</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"kt=
">int</span><span class=3D"w"> </span><span class=3D"n">MPI_Datatype</span>=
<span class=3D"p">;</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>internal_mpi_double_int</span><span class=3D"w"> </span><span class=3D"p">=
{</span><span class=3D"w"> </span><span class=3D"kt">double</span><span cla=
ss=3D"w"> </span><span class=3D"n">d</span><span class=3D"p">;</span><span =
class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </span>=
<span class=3D"n">i</span><span class=3D"p">;</span><span class=3D"w"> </sp=
an><span class=3D"p">};</span>
<span class=3D"k">extern</span><span class=3D"w"> </span><span class=3D"k">=
struct</span><span class=3D"w"> </span><span class=3D"nc">mpi_datatype</spa=
n><span class=3D"w"> </span><span class=3D"n">mpi_datatype_double_int</span=
>
<span class=3D"w">    </span><span class=3D"nf">__attribute__</span><span c=
lass=3D"p">((</span><span class=3D"w"> </span><span class=3D"n">type_tag_fo=
r_datatype</span><span class=3D"p">(</span><span class=3D"n">mpi</span><spa=
n class=3D"p">,</span>
<span class=3D"w">                    </span><span class=3D"k">struct</span=
><span class=3D"w"> </span><span class=3D"nc">internal_mpi_double_int</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">layo=
ut_compatible</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"p">));</span>

<span class=3D"cp">#define MPI_DOUBLE_INT ((MPI_Datatype) &amp;mpi_datatype=
_double_int)</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">M=
PI_Send</span><span class=3D"p">(</span><span class=3D"kt">void</span><span=
 class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">buf</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">int<=
/span><span class=3D"w"> </span><span class=3D"n">count</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">MPI_Datatype</sp=
an><span class=3D"w"> </span><span class=3D"n">datatype</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"p">...)</span>
<span class=3D"w">    </span><span class=3D"n">__attribute__</span><span cl=
ass=3D"p">((</span><span class=3D"w"> </span><span class=3D"n">pointer_with=
_type_tag</span><span class=3D"p">(</span><span class=3D"n">mpi</span><span=
 class=3D"p">,</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"mi">3</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"p">));</span>

<span class=3D"cm">/* In user code */</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>my_pair</span><span class=3D"w"> </span><span class=3D"p">{</span><span cl=
ass=3D"w"> </span><span class=3D"kt">double</span><span class=3D"w"> </span=
><span class=3D"n">a</span><span class=3D"p">;</span><span class=3D"w"> </s=
pan><span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n=
">b</span><span class=3D"p">;</span><span class=3D"w"> </span><span class=
=3D"p">};</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>my_pair</span><span class=3D"w"> </span><span class=3D"o">*</span><span cl=
ass=3D"n">buffer</span><span class=3D"p">;</span>
<span class=3D"n">MPI_Send</span><span class=3D"p">(</span><span class=3D"n=
">buffer</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">MPI_DOUBLE_INT</span><span class=3D"w"> </span><span class=3D=
"cm">/*, ... */</span><span class=3D"p">);</span><span class=3D"w"> </span>=
<span class=3D"c1">// no warning because the</span>
<span class=3D"w">                                                 </span><=
span class=3D"c1">// layout of my_pair is</span>
<span class=3D"w">                                                 </span><=
span class=3D"c1">// compatible with that of</span>
<span class=3D"w">                                                 </span><=
span class=3D"c1">// internal_mpi_double_int</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>my_int_pair</span><span class=3D"w"> </span><span class=3D"p">{</span><spa=
n class=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </spa=
n><span class=3D"n">a</span><span class=3D"p">;</span><span class=3D"w"> </=
span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"=
n">b</span><span class=3D"p">;</span><span class=3D"w"> </span><span class=
=3D"p">}</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>my_int_pair</span><span class=3D"w"> </span><span class=3D"o">*</span><spa=
n class=3D"n">buffer2</span><span class=3D"p">;</span>
<span class=3D"n">MPI_Send</span><span class=3D"p">(</span><span class=3D"n=
">buffer2</span><span class=3D"p">,</span><span class=3D"w"> </span><span c=
lass=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">MPI_DOUBLE_INT</span><span class=3D"w"> </span><span class=
=3D"cm">/*, ... */</span><span class=3D"p">);</span><span class=3D"w"> </sp=
an><span class=3D"c1">// warning because the</span>
<span class=3D"w">                                                  </span>=
<span class=3D"c1">// layout of my_int_pair</span>
<span class=3D"w">                                                  </span>=
<span class=3D"c1">// does not match that of</span>
<span class=3D"w">                                                  </span>=
<span class=3D"c1">// internal_mpi_double_int</span>
</pre></div>
</div>
</li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mus=
t_be_null</span></code> specifies that the function argument specified by e=
ither
<code class=3D"docutils literal notranslate"><span class=3D"pre">arg_idx</s=
pan></code> (for the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">argument_with_type_tag</span></code> attribute) or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">ptr_idx</span></code>=
 (for
the <code class=3D"docutils literal notranslate"><span class=3D"pre">pointe=
r_with_type_tag</span></code> attribute) should be a null pointer constant.
The second argument to the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">type_tag_for_datatype</span></code> attribute is ignored. =
For
example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cm">/* In mpi.h */</span>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"kt=
">int</span><span class=3D"w"> </span><span class=3D"n">MPI_Datatype</span>=
<span class=3D"p">;</span>
<span class=3D"k">extern</span><span class=3D"w"> </span><span class=3D"k">=
struct</span><span class=3D"w"> </span><span class=3D"nc">mpi_datatype</spa=
n><span class=3D"w"> </span><span class=3D"n">mpi_datatype_null</span>
<span class=3D"w">    </span><span class=3D"nf">__attribute__</span><span c=
lass=3D"p">((</span><span class=3D"w"> </span><span class=3D"n">type_tag_fo=
r_datatype</span><span class=3D"p">(</span><span class=3D"n">mpi</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">void</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">mu=
st_be_null</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"p">));</span>

<span class=3D"cp">#define MPI_DATATYPE_NULL ((MPI_Datatype) &amp;mpi_datat=
ype_null)</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">M=
PI_Send</span><span class=3D"p">(</span><span class=3D"kt">void</span><span=
 class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">buf</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">int<=
/span><span class=3D"w"> </span><span class=3D"n">count</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">MPI_Datatype</sp=
an><span class=3D"w"> </span><span class=3D"n">datatype</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"p">...)</span>
<span class=3D"w">    </span><span class=3D"n">__attribute__</span><span cl=
ass=3D"p">((</span><span class=3D"w"> </span><span class=3D"n">pointer_with=
_type_tag</span><span class=3D"p">(</span><span class=3D"n">mpi</span><span=
 class=3D"p">,</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"mi">3</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"p">));</span>

<span class=3D"cm">/* In user code */</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>my_pair</span><span class=3D"w"> </span><span class=3D"p">{</span><span cl=
ass=3D"w"> </span><span class=3D"kt">double</span><span class=3D"w"> </span=
><span class=3D"n">a</span><span class=3D"p">;</span><span class=3D"w"> </s=
pan><span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n=
">b</span><span class=3D"p">;</span><span class=3D"w"> </span><span class=
=3D"p">};</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>my_pair</span><span class=3D"w"> </span><span class=3D"o">*</span><span cl=
ass=3D"n">buffer</span><span class=3D"p">;</span>
<span class=3D"n">MPI_Send</span><span class=3D"p">(</span><span class=3D"n=
">buffer</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">MPI_DATATYPE_NULL</span><span class=3D"w"> </span><span class=
=3D"cm">/*, ... */</span><span class=3D"p">);</span><span class=3D"w"> </sp=
an><span class=3D"c1">// warning: MPI_DATATYPE_NULL</span>
<span class=3D"w">                                                    </spa=
n><span class=3D"c1">// was specified but buffer</span>
<span class=3D"w">                                                    </spa=
n><span class=3D"c1">// is not a null pointer</span>
</pre></div>
</div>
</li>
</ul>
</div></blockquote>
</section>
</section>
<section id=3D"undocumented">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id743" role=3D"doc-backlink">Undocumented</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#undocum=
ented" title=3D"Link to this heading">=C2=B6</a></h2>
<p>This section lists attributes which are recognized by Clang, but which a=
re
currently missing documentation.</p>
<section id=3D"alignas-align-alignas-aligned">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id744" role=3D"doc-backlink">Alignas, align, alignas, aligned=
</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRe=
ference.html#alignas-align-alignas-aligned" title=3D"Link to this heading">=
=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id314">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
14" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">aligned</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::aligned</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::aligned</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ali=
gn</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ali=
gnas</span></code> <br> <code class=3D"docutils literal notranslate"><span =
class=3D"pre">_Alignas</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"nsobject">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id745" role=3D"doc-backlink">NSObject</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nsobject" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id315">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
15" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">NSObject</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::NSObject</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::NSObject</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"kindof">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id746" role=3D"doc-backlink">__kindof</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#kindof" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id316">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
16" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__k=
indof</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"acquired-after">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id747" role=3D"doc-backlink">acquired_after</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#acqui=
red-after" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id317">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
17" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">acquired_after</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"acquired-before">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id748" role=3D"doc-backlink">acquired_before</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#acqu=
ired-before" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id318">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
18" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">acquired_before</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"address-space">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id749" role=3D"doc-backlink">address_space</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#addres=
s-space" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id319">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
19" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">address_space</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::address_space</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::address_space</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"alias">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id750" role=3D"doc-backlink">alias</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#alias" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id320">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
20" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">alias</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::alias</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::alias</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"amdgpu-kernel">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id751" role=3D"doc-backlink">amdgpu_kernel</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#amdgpu=
-kernel" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id321">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
21" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">amdgpu_kernel</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::amdgpu_kernel</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::amdgpu_kernel</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"analyzer-noreturn">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id752" role=3D"doc-backlink">analyzer_noreturn</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#an=
alyzer-noreturn" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id322">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
22" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">analyzer_noreturn</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"annotate">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id753" role=3D"doc-backlink">annotate</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#annotate" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id323">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
23" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">annotate</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::annotate</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::annotate</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"assert-exclusive-lock">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id754" role=3D"doc-backlink">assert_exclusive_lock</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#assert-exclusive-lock" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id324">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
24" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">assert_exclusive_lock</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"assert-shared-lock">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id755" role=3D"doc-backlink">assert_shared_lock</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#assert-shared-lock" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id325">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
25" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">assert_shared_lock</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"available-only-in-default-eval-method">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id756" role=3D"doc-backlink">available_only_in_default_eval_m=
ethod</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Attrib=
uteReference.html#available-only-in-default-eval-method" title=3D"Link to t=
his heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id326">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
26" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">available_only_in_default_eval_method</span></code></p>=
</td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::available_only_in_default_eval_method</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::available_only_in_default_eval_method</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"blocks">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id757" role=3D"doc-backlink">blocks</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#blocks" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id327">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
27" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">blocks</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::blocks</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::blocks</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"capability-shared-capability">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id758" role=3D"doc-backlink">capability, shared_capability</a=
><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefer=
ence.html#capability-shared-capability" title=3D"Link to this heading">=C2=
=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id328">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
28" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">capability</span></code> <br> <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">shared_capability</span></code></p>=
</td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::capability</span></code> <br> <code class=3D"docutils literal notransla=
te"><span class=3D"pre">clang::shared_capability</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"cdecl">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id759" role=3D"doc-backlink">cdecl</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#cdecl" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id329">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
29" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cdecl</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::cdecl</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::cdecl</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__c=
decl</span></code> <br> <code class=3D"docutils literal notranslate"><span =
class=3D"pre">_cdecl</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"cf-audited-transfer">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id760" role=3D"doc-backlink">cf_audited_transfer</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#cf-audited-transfer" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id330">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
30" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cf_audited_transfer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_audited_transfer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_audited_transfer</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"cf-unknown-transfer">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id761" role=3D"doc-backlink">cf_unknown_transfer</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#cf-unknown-transfer" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id331">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
31" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cf_unknown_transfer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_unknown_transfer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::cf_unknown_transfer</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"common">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id762" role=3D"doc-backlink">common</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#common" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id332">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
32" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">common</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::common</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::common</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"const">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id763" role=3D"doc-backlink">const</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#const" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id333">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
33" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">const</span></code> <br> <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">__const</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::const</span></code> <br> <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">gnu::__const</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::const</span></code> <br> <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">gnu::__const</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"constant">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id764" role=3D"doc-backlink">constant</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#constant" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id334">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
34" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">constant</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__c=
onstant__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"consumable-auto-cast-state">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id765" role=3D"doc-backlink">consumable_auto_cast_state</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferenc=
e.html#consumable-auto-cast-state" title=3D"Link to this heading">=C2=B6</a=
></h3>
<table class=3D"docutils align-default" id=3D"id335">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
35" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">consumable_auto_cast_state</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::consumable_auto_cast_state</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"consumable-set-state-on-read">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id766" role=3D"doc-backlink">consumable_set_state_on_read</a>=
<a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefere=
nce.html#consumable-set-state-on-read" title=3D"Link to this heading">=C2=
=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id336">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
36" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">consumable_set_state_on_read</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::consumable_set_state_on_read</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"device">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id767" role=3D"doc-backlink">device</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#device" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id337">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
37" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">device</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
evice__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"exclusive-locks-required-requires-capability-requires-shared=
-capability-shared-locks-required">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id768" role=3D"doc-backlink">exclusive_locks_required, requir=
es_capability, requires_shared_capability, shared_locks_required</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#exclusive-locks-required-requires-capability-requires-shared-capability-s=
hared-locks-required" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id338">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
38" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">requires_capability</span></code> <br> <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">exclusive_locks_required</=
span></code> <br> <code class=3D"docutils literal notranslate"><span class=
=3D"pre">requires_shared_capability</span></code> <br> <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">shared_locks_required</span></=
code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::requires_capability</span></code> <br> <code class=3D"docutils literal =
notranslate"><span class=3D"pre">clang::exclusive_locks_required</span></co=
de> <br> <code class=3D"docutils literal notranslate"><span class=3D"pre">c=
lang::requires_shared_capability</span></code> <br> <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">clang::shared_locks_required</spa=
n></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"exclusive-trylock-function">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id769" role=3D"doc-backlink">exclusive_trylock_function</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferenc=
e.html#exclusive-trylock-function" title=3D"Link to this heading">=C2=B6</a=
></h3>
<table class=3D"docutils align-default" id=3D"id339">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
39" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">exclusive_trylock_function</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"ext-vector-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id770" role=3D"doc-backlink">ext_vector_type</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ext-=
vector-type" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id340">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
40" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ext_vector_type</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"format-arg">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id771" role=3D"doc-backlink">format_arg</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#format-ar=
g" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id341">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
41" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">format_arg</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::format_arg</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::format_arg</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"global">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id772" role=3D"doc-backlink">global</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#global" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id342">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
42" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">global</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__g=
lobal__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"guarded-by">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id773" role=3D"doc-backlink">guarded_by</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#guarded-b=
y" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id343">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
43" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">guarded_by</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"guarded-var">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id774" role=3D"doc-backlink">guarded_var</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#guarded-=
var" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id344">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
44" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">guarded_var</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::guarded_var</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"host">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id775" role=3D"doc-backlink">host</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#host" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id345">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
45" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">host</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__h=
ost__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"ibaction">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id776" role=3D"doc-backlink">ibaction</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ibaction" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id346">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
46" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ibaction</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ibaction</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ibaction</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"iboutlet">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id777" role=3D"doc-backlink">iboutlet</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#iboutlet" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id347">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
47" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">iboutlet</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::iboutlet</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::iboutlet</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"iboutletcollection">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id778" role=3D"doc-backlink">iboutletcollection</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#iboutletcollection" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id348">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
48" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">iboutletcollection</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::iboutletcollection</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::iboutletcollection</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"intel-ocl-bicc">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id779" role=3D"doc-backlink">intel_ocl_bicc</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#intel=
-ocl-bicc" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id349">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
49" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">intel_ocl_bicc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::intel_ocl_bicc</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"interrupt">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id780" role=3D"doc-backlink">interrupt</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#interrupt"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id350">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
50" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">interrupt</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"id22">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id781" role=3D"doc-backlink">interrupt</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id22" titl=
e=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id351">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
51" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::interrupt</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"kernel">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id782" role=3D"doc-backlink">kernel</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#kernel" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id352">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
52" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__k=
ernel</span></code> <br> <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">kernel</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"launch-bounds">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id783" role=3D"doc-backlink">launch_bounds</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#launch=
-bounds" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id353">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
53" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">launch_bounds</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__l=
aunch_bounds__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"lock-returned">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id784" role=3D"doc-backlink">lock_returned</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#lock-r=
eturned" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id354">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
54" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">lock_returned</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"lockable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id785" role=3D"doc-backlink">lockable</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#lockable" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id355">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
55" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">lockable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"locks-excluded">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id786" role=3D"doc-backlink">locks_excluded</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#locks=
-excluded" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id356">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
56" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">locks_excluded</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"matrix-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id787" role=3D"doc-backlink">matrix_type</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#matrix-t=
ype" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id357">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
57" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">matrix_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::matrix_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::matrix_type</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"may-alias">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id788" role=3D"doc-backlink">may_alias</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#may-alias"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id358">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
58" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">may_alias</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::may_alias</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::may_alias</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"mips16">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id789" role=3D"doc-backlink">mips16</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#mips16" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id359">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
59" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">mips16</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::mips16</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::mips16</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"mode">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id790" role=3D"doc-backlink">mode</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#mode" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id360">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
60" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">mode</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::mode</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::mode</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"ms-struct">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id791" role=3D"doc-backlink">ms_struct</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#ms-struct"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id361">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
61" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ms_struct</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::ms_struct</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::ms_struct</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"naked">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id792" role=3D"doc-backlink">naked</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#naked" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id362">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
62" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">naked</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::naked</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::naked</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nak=
ed</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"neon-polyvector-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id793" role=3D"doc-backlink">neon_polyvector_type</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#neon-polyvector-type" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id363">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
63" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">neon_polyvector_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::neon_polyvector_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::neon_polyvector_type</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"neon-vector-type">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id794" role=3D"doc-backlink">neon_vector_type</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#neo=
n-vector-type" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id364">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
64" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">neon_vector_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::neon_vector_type</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::neon_vector_type</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"no-instrument-function">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id795" role=3D"doc-backlink">no_instrument_function</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#no-instrument-function" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id365">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
65" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_instrument_function</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_instrument_function</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::no_instrument_function</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"no-thread-safety-analysis">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id796" role=3D"doc-backlink">no_thread_safety_analysis</a><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference=
.html#no-thread-safety-analysis" title=3D"Link to this heading">=C2=B6</a><=
/h3>
<table class=3D"docutils align-default" id=3D"id366">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
66" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_thread_safety_analysis</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_thread_safety_analysis</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_thread_safety_analysis</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"nocommon">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id797" role=3D"doc-backlink">nocommon</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nocommon" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id367">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
67" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nocommon</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nocommon</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nocommon</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"nomips16">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id798" role=3D"doc-backlink">nomips16</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nomips16" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id368">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
68" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nomips16</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nomips16</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nomips16</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"id23">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id799" role=3D"doc-backlink">noreturn</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id23" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id369">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
69" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">noreturn</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::noreturn</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::noreturn</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nor=
eturn</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"nvptx-kernel">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id800" role=3D"doc-backlink">nvptx_kernel</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nvptx-k=
ernel" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id370">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
70" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nvptx_kernel</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nvptx_kernel</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::nvptx_kernel</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-arc-weak-reference-unavailable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id801" role=3D"doc-backlink">objc_arc_weak_reference_unavaila=
ble</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Attribut=
eReference.html#objc-arc-weak-reference-unavailable" title=3D"Link to this =
heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id371">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
71" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_arc_weak_reference_unavailable</span></code></p></=
td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_arc_weak_reference_unavailable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_arc_weak_reference_unavailable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-bridge">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id802" role=3D"doc-backlink">objc_bridge</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#objc-bri=
dge" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id372">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
72" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_bridge</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_bridge</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_bridge</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-bridge-mutable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id803" role=3D"doc-backlink">objc_bridge_mutable</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#objc-bridge-mutable" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id373">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
73" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_bridge_mutable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_bridge_mutable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_bridge_mutable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-bridge-related">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id804" role=3D"doc-backlink">objc_bridge_related</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#objc-bridge-related" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id374">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
74" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_bridge_related</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_bridge_related</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_bridge_related</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-designated-initializer">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id805" role=3D"doc-backlink">objc_designated_initializer</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferen=
ce.html#objc-designated-initializer" title=3D"Link to this heading">=C2=B6<=
/a></h3>
<table class=3D"docutils align-default" id=3D"id375">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
75" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_designated_initializer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_designated_initializer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_designated_initializer</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-exception">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id806" role=3D"doc-backlink">objc_exception</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#objc-=
exception" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id376">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
76" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_exception</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_exception</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_exception</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-gc">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id807" role=3D"doc-backlink">objc_gc</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#objc-gc" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id377">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
77" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_gc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_gc</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_gc</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-independent-class">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id808" role=3D"doc-backlink">objc_independent_class</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#objc-independent-class" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id378">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
78" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_independent_class</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_independent_class</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_independent_class</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-ownership">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id809" role=3D"doc-backlink">objc_ownership</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#objc-=
ownership" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id379">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
79" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_ownership</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_ownership</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_ownership</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-precise-lifetime">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id810" role=3D"doc-backlink">objc_precise_lifetime</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#objc-precise-lifetime" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id380">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
80" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_precise_lifetime</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_precise_lifetime</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_precise_lifetime</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-protocol-requires-explicit-implementation">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id811" role=3D"doc-backlink">objc_protocol_requires_explicit_=
implementation</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/do=
cs/AttributeReference.html#objc-protocol-requires-explicit-implementation" =
title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id381">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
81" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_protocol_requires_explicit_implementation</span></=
code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_protocol_requires_explicit_implementation</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_protocol_requires_explicit_implementation</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-requires-property-definitions">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id812" role=3D"doc-backlink">objc_requires_property_definitio=
ns</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Attribute=
Reference.html#objc-requires-property-definitions" title=3D"Link to this he=
ading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id382">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
82" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_requires_property_definitions</span></code></p></t=
d>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_requires_property_definitions</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_requires_property_definitions</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-returns-inner-pointer">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id813" role=3D"doc-backlink">objc_returns_inner_pointer</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReferenc=
e.html#objc-returns-inner-pointer" title=3D"Link to this heading">=C2=B6</a=
></h3>
<table class=3D"docutils align-default" id=3D"id383">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
83" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_returns_inner_pointer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_returns_inner_pointer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_returns_inner_pointer</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"objc-root-class">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id814" role=3D"doc-backlink">objc_root_class</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#objc=
-root-class" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id384">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
84" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_root_class</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_root_class</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_root_class</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"packed">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id815" role=3D"doc-backlink">packed</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#packed" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id385">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
85" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">packed</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::packed</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::packed</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"pascal">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id816" role=3D"doc-backlink">pascal</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#pascal" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id386">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
86" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">pascal</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::pascal</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::pascal</span></code></p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__p=
ascal</span></code> <br> <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">_pascal</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"pt-guarded-by">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id817" role=3D"doc-backlink">pt_guarded_by</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#pt-gua=
rded-by" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id387">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
87" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">pt_guarded_by</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"pt-guarded-var">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id818" role=3D"doc-backlink">pt_guarded_var</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#pt-gu=
arded-var" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id388">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
88" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">pt_guarded_var</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::pt_guarded_var</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"ptrauth-vtable-pointer">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id819" role=3D"doc-backlink">ptrauth_vtable_pointer</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.ht=
ml#ptrauth-vtable-pointer" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id389">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
89" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ptrauth_vtable_pointer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ptrauth_vtable_pointer</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::ptrauth_vtable_pointer</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"pure">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id820" role=3D"doc-backlink">pure</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#pure" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id390">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
90" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">pure</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::pure</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::pure</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"reqd-work-group-size">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id821" role=3D"doc-backlink">reqd_work_group_size</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#reqd-work-group-size" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id391">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
91" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">reqd_work_group_size</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"returns-twice">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id822" role=3D"doc-backlink">returns_twice</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#return=
s-twice" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id392">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
92" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">returns_twice</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::returns_twice</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::returns_twice</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"scoped-lockable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id823" role=3D"doc-backlink">scoped_lockable</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#scop=
ed-lockable" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id393">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
93" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">scoped_lockable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::scoped_lockable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"sentinel">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id824" role=3D"doc-backlink">sentinel</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sentinel" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id394">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
94" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">sentinel</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::sentinel</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::sentinel</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"shared">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id825" role=3D"doc-backlink">shared</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#shared" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id395">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
95" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">shared</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__s=
hared__</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"shared-trylock-function">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id826" role=3D"doc-backlink">shared_trylock_function</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.h=
tml#shared-trylock-function" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id396">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
96" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">shared_trylock_function</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"unavailable">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id827" role=3D"doc-backlink">unavailable</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#unavaila=
ble" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id397">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
97" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">unavailable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::unavailable</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::unavailable</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"uuid">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id828" role=3D"doc-backlink">uuid</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#uuid" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id398">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
98" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">uui=
d</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"vec-type-hint">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id829" role=3D"doc-backlink">vec_type_hint</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#vec-ty=
pe-hint" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id399">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id3=
99" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">vec_type_hint</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"vecreturn">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id830" role=3D"doc-backlink">vecreturn</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#vecreturn"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id400">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
00" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">vecreturn</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::vecreturn</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"vector-size">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id831" role=3D"doc-backlink">vector_size</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#vector-s=
ize" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id401">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
01" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">vector_size</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::vector_size</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::vector_size</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"visibility">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id832" role=3D"doc-backlink">visibility</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#visibilit=
y" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id402">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
02" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">visibility</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::visibility</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::visibility</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"warn-unused">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id833" role=3D"doc-backlink">warn_unused</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#warn-unu=
sed" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id403">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
03" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">warn_unused</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::warn_unused</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::warn_unused</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"weak-import">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id834" role=3D"doc-backlink">weak_import</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#weak-imp=
ort" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id404">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
04" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">weak_import</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::weak_import</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::weak_import</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"weakref">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id835" role=3D"doc-backlink">weakref</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#weakref" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id405">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
05" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">weakref</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::weakref</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::weakref</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
<section id=3D"work-group-size-hint">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id836" role=3D"doc-backlink">work_group_size_hint</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#work-group-size-hint" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id406">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
06" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">work_group_size_hint</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>No documentation.</p>
</section>
</section>
<section id=3D"variable-attributes">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id837" role=3D"doc-backlink">Variable Attributes</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#variable-attributes" title=3D"Link to this heading">=C2=B6</a></h2>
<section id=3D"hlsl-parameter-modifiers">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id838" role=3D"doc-backlink">HLSL Parameter Modifiers</a><a c=
lass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.=
html#hlsl-parameter-modifiers" title=3D"Link to this heading">=C2=B6</a></h=
3>
<table class=3D"docutils align-default" id=3D"id407">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
07" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">in<=
/span></code> <br> <code class=3D"docutils literal notranslate"><span class=
=3D"pre">inout</span></code> <br> <code class=3D"docutils literal notransla=
te"><span class=3D"pre">out</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>HLSL function parameters are passed by value. Parameter declarations sup=
port
three qualifiers to denote parameter passing behavior. The three qualifiers=
 are
<cite>in</cite>, <cite>out</cite> and <cite>inout</cite>.</p>
<p>Parameters annotated with <cite>in</cite> or with no annotation are pass=
ed by value from
the caller to the callee.</p>
<p>Parameters annotated with <cite>out</cite> are written to the argument a=
fter the callee
returns (Note: arguments values passed into <cite>out</cite> parameters <em=
>are not</em> copied
into the callee).</p>
<p>Parameters annotated with <cite>inout</cite> are copied into the callee =
via a temporary,
and copied back to the argument after the callee returns.</p>
</section>
<section id=3D"always-destroy">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id839" role=3D"doc-backlink">always_destroy</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#alway=
s-destroy" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id408">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
08" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">always_destroy</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::always_destroy</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">alw=
ays_destroy</span></code> attribute specifies that a variable with static o=
r thread
storage duration should have its exit-time destructor run. This attribute i=
s the
default unless clang was invoked with -fno-c++-static-destructors.</p>
<p>If a variable is explicitly declared with this attribute, Clang will sil=
ence
otherwise applicable <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">-Wexit-time-destructors</span></code> warnings.</p>
</section>
<section id=3D"called-once">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id840" role=3D"doc-backlink">called_once</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#called-o=
nce" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id409">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
09" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">called_once</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::called_once</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::called_once</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cal=
led_once</span></code> attribute specifies that the annotated function or m=
ethod
parameter is invoked exactly once on all execution paths. It only applies
to parameters with function-like types, i.e. function pointers or blocks. T=
his
concept is particularly useful for asynchronous programs.</p>
<p>Clang implements a check for <code class=3D"docutils literal notranslate=
"><span class=3D"pre">called_once</span></code> parameters,
<code class=3D"docutils literal notranslate"><span class=3D"pre">-Wcalled-o=
nce-parameter</span></code>. It is on by default and finds the following
violations:</p>
<ul class=3D"simple">
<li><p>Parameter is not called at all.</p></li>
<li><p>Parameter is called more than once.</p></li>
<li><p>Parameter is not called on one of the execution paths.</p></li>
</ul>
<p>In the latter case, Clang pinpoints the path where parameter is not invo=
ked
by showing the control-flow statement where the path diverges.</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"kt">void</span><span class=3D"w"> </span><span cla=
ss=3D"nf">fooWithCallback</span><span class=3D"p">(</span><span class=3D"kt=
">void</span><span class=3D"w"> </span><span class=3D"p">(</span><span clas=
s=3D"o">^</span><span class=3D"n">callback</span><span class=3D"p">)(</span=
><span class=3D"kt">void</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"bp">__attribute__</span><span class=3D"p">((</span><=
span class=3D"n">called_once</span><span class=3D"p">)))</span><span class=
=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">somePredicate</span><span =
class=3D"p">())</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"n">callback</span><span class=
=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"p">}</span><span class=3D"w"> </s=
pan><span class=3D"k">else</span><span class=3D"w"> </span><span class=3D"p=
">{</span>
<span class=3D"w">    </span><span class=3D"n">callback</span><span class=
=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1">// OK: callba=
ck is called on every path</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
barWithCallback</span><span class=3D"p">(</span><span class=3D"kt">void</sp=
an><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"o">^<=
/span><span class=3D"n">callback</span><span class=3D"p">)(</span><span cla=
ss=3D"kt">void</span><span class=3D"p">)</span><span class=3D"w"> </span><s=
pan class=3D"bp">__attribute__</span><span class=3D"p">((</span><span class=
=3D"n">called_once</span><span class=3D"p">)))</span><span class=3D"w"> </s=
pan><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">somePredicate</span><span =
class=3D"p">())</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"n">callback</span><span class=
=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1">// note: prev=
ious call is here</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"w">  </span><span class=3D"n">callback</span><span class=3D"=
p">();</span><span class=3D"w"> </span><span class=3D"c1">// warning: callb=
ack is called twice</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
foobarWithCallback</span><span class=3D"p">(</span><span class=3D"kt">void<=
/span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"o"=
>^</span><span class=3D"n">callback</span><span class=3D"p">)(</span><span =
class=3D"kt">void</span><span class=3D"p">)</span><span class=3D"w"> </span=
><span class=3D"bp">__attribute__</span><span class=3D"p">((</span><span cl=
ass=3D"n">called_once</span><span class=3D"p">)))</span><span class=3D"w"> =
</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">somePredicate</span><span =
class=3D"p">())</span><span class=3D"w"> </span><span class=3D"p">{</span><=
span class=3D"w">  </span><span class=3D"c1">// warning: callback is not ca=
lled when condition is false</span>
<span class=3D"w">    </span><span class=3D"p">...</span>
<span class=3D"w">    </span><span class=3D"n">callback</span><span class=
=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This attribute is useful for API developers who want to double-check if =
they
implemented their method correctly.</p>
</section>
<section id=3D"clang-code-align">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id841" role=3D"doc-backlink">clang::code_align</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#cl=
ang-code-align" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id410">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
10" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">code_align</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::code_align</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::code_align</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::code_align(N)</span></code> attribute applies to a loop and specifies t=
he byte
alignment for a loop. The attribute accepts a positive integer constant
initialization expression indicating the number of bytes for the minimum
alignment boundary. Its value must be a power of 2, between 1 and 4096
(inclusive).</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">foo</span><span class=3D"p">()</span><span class=3D"w"> </span><sp=
an class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">var</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><span cl=
ass=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">code_align</span><spa=
n class=3D"p">(</span><span class=3D"mi">16</span><span class=3D"p">)]]</sp=
an><span class=3D"w"> </span><span class=3D"k">for</span><span class=3D"w">=
 </span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><s=
pan class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span=
><span class=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> =
</span><span class=3D"mi">10</span><span class=3D"p">;</span><span class=3D=
"w"> </span><span class=3D"o">++</span><span class=3D"n">i</span><span clas=
s=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">var</span><span=
 class=3D"o">++</span><span class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
Array</span><span class=3D"p">(</span><span class=3D"kt">int</span><span cl=
ass=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">array</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">size_=
t</span><span class=3D"w"> </span><span class=3D"n">n</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">code_align</span><spa=
n class=3D"p">(</span><span class=3D"mi">64</span><span class=3D"p">)]]</sp=
an><span class=3D"w"> </span><span class=3D"k">for</span><span class=3D"w">=
 </span><span class=3D"p">(</span><span class=3D"kt">int</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><s=
pan class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span=
><span class=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> =
</span><span class=3D"n">n</span><span class=3D"p">;</span><span class=3D"w=
"> </span><span class=3D"o">++</span><span class=3D"n">i</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">array</span><spa=
n class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span><=
span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </s=
pan><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
count</span><span class=3D"w"> </span><span class=3D"p">()</span><span clas=
s=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a1</span><span class=3D"p">[</span><span class=3D"=
mi">10</span><span class=3D"p">],</span><span class=3D"w"> </span><span cla=
ss=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">i</span><sp=
an class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </spa=
n><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">code_align</span><spa=
n class=3D"p">(</span><span class=3D"mi">32</span><span class=3D"p">)]]</sp=
an><span class=3D"w"> </span><span class=3D"k">while</span><span class=3D"w=
"> </span><span class=3D"p">(</span><span class=3D"n">i</span><span class=
=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> </span><span=
 class=3D"mi">10</span><span class=3D"p">)</span><span class=3D"w"> </span>=
<span class=3D"p">{</span><span class=3D"w"> </span><span class=3D"n">a1</s=
pan><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]=
</span><span class=3D"w"> </span><span class=3D"o">+=3D</span><span class=
=3D"w"> </span><span class=3D"mi">3</span><span class=3D"p">;</span><span c=
lass=3D"w"> </span><span class=3D"p">}</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
check</span><span class=3D"p">()</span><span class=3D"w"> </span><span clas=
s=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"mi">10</span><span cla=
ss=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">code_align</span><spa=
n class=3D"p">(</span><span class=3D"mi">8</span><span class=3D"p">)]]</spa=
n><span class=3D"w"> </span><span class=3D"k">do</span><span class=3D"w"> <=
/span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">a</span><span class=3D"w"> </span><span class=3D"o">+</span><span class=
=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">}</span><span class=3D"w"> </s=
pan><span class=3D"k">while</span><span class=3D"w"> </span><span class=3D"=
p">(</span><span class=3D"n">a</span><span class=3D"w"> </span><span class=
=3D"o">&lt;</span><span class=3D"w"> </span><span class=3D"mi">20</span><sp=
an class=3D"p">);</span>
<span class=3D"p">}</span>

<span class=3D"k">template</span><span class=3D"o">&lt;</span><span class=
=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n">A</span><span=
 class=3D"o">&gt;</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
unc</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">cla=
ng</span><span class=3D"o">::</span><span class=3D"n">code_align</span><spa=
n class=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">)]]</span=
><span class=3D"w"> </span><span class=3D"k">for</span><span class=3D"p">(;=
;)</span><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D=
"w"> </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"cleanup">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id842" role=3D"doc-backlink">cleanup</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#cleanup" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id411">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
11" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">cleanup</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::cleanup</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::cleanup</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute allows a function to be run when a local variable goes ou=
t of
scope. The attribute takes the identifier of a function with a parameter ty=
pe
that is a pointer to the type with the attribute.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">static</span><span class=3D"w"> </span><span class=
=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">foo</span><=
span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"kt">int</=
span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">=
)</span><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D"=
w"> </span><span class=3D"p">...</span><span class=3D"w"> </span><span clas=
s=3D"p">}</span>
<span class=3D"k">static</span><span class=3D"w"> </span><span class=3D"kt"=
>void</span><span class=3D"w"> </span><span class=3D"nf">bar</span><span cl=
ass=3D"w"> </span><span class=3D"p">(</span><span class=3D"kt">int</span><s=
pan class=3D"w"> </span><span class=3D"o">*</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </s=
pan><span class=3D"p">...</span><span class=3D"w"> </span><span class=3D"p"=
>}</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
baz</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"kt">void</span><span class=3D"p">)</span><span class=3D"w"> </span><spa=
n class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">x</span><span class=3D"w"> </span><span class=3D"n=
">__attribute__</span><span class=3D"p">((</span><span class=3D"n">cleanup<=
/span><span class=3D"p">(</span><span class=3D"n">foo</span><span class=3D"=
p">)));</span>
<span class=3D"w">  </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"kt">int</span><span class=3D"w"=
> </span><span class=3D"n">y</span><span class=3D"w"> </span><span class=3D=
"n">__attribute__</span><span class=3D"p">((</span><span class=3D"n">cleanu=
p</span><span class=3D"p">(</span><span class=3D"n">bar</span><span class=
=3D"p">)));</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The above example will result in a call to <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">bar</span></code> being passed the addr=
ess of
<cite>y`</cite> when <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">y</span></code> goes out of scope, then a call to <code class=3D=
"docutils literal notranslate"><span class=3D"pre">foo</span></code> being =
passed the
address of <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>x</span></code> when <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">x</span></code> goes out of scope. If two or more variables sha=
re
the same scope, their <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">cleanup</span></code> callbacks are invoked in the reverse orde=
r
the variables were declared in. It is not possible to check the return valu=
e
(if any) of these <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cleanup</span></code> callback functions.</p>
</section>
<section id=3D"dllexport">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id843" role=3D"doc-backlink">dllexport</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#dllexport"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id412">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
12" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">dllexport</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::dllexport</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::dllexport</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">dll=
export</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
eclspec(dllexport)</span></code> attribute declares a variable, function, o=
r
Objective-C interface to be exported from the module. It is available under=
 the
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fdeclspec=
</span></code> flag for compatibility with various compilers. The primary u=
se
is for COFF object files which explicitly specify what interfaces are avail=
able
for external use. See the <a class=3D"reference external" href=3D"https://m=
sdn.microsoft.com/en-us/library/3y1sfaz2.aspx">dllexport</a> documentation =
on MSDN for more
information.</p>
</section>
<section id=3D"dllimport">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id844" role=3D"doc-backlink">dllimport</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#dllimport"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id413">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
13" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">dllimport</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::dllimport</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::dllimport</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">dll=
import</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
eclspec(dllimport)</span></code> attribute declares a variable, function, o=
r
Objective-C interface to be imported from an external module. It is availab=
le
under the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
-fdeclspec</span></code> flag for compatibility with various compilers. The
primary use is for COFF object files which explicitly specify what interfac=
es
are imported from external modules. See the <a class=3D"reference external"=
 href=3D"https://msdn.microsoft.com/en-us/library/3y1sfaz2.aspx">dllimport<=
/a> documentation on MSDN
for more information.</p>
<p>Note that a dllimport function may still be inlined, if its definition i=
s
available and it doesn=E2=80=99t reference any non-dllimport functions or g=
lobal
variables.</p>
</section>
<section id=3D"groupshared">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id845" role=3D"doc-backlink">groupshared</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#groupsha=
red" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id414">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
14" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gro=
upshared</span></code></p></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>HLSL enables threads of a compute shader to exchange values via shared m=
emory.
HLSL provides barrier primitives such as GroupMemoryBarrierWithGroupSync,
and so on to ensure the correct ordering of reads and writes to shared memo=
ry
in the shader and to avoid data races.
Here=E2=80=99s an example to declare a groupshared variable.
.. code-block:: c++</p>
<blockquote>
<div><p>groupshared GSData data[5*5*1];</p>
</div></blockquote>
<p>The full documentation is available here: <a class=3D"reference external=
" href=3D"https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-g=
raphics-hlsl-variable-syntax#group-shared">https://learn.microsoft.com/en-u=
s/windows/win32/direct3dhlsl/dx-graphics-hlsl-variable-syntax#group-shared<=
/a></p>
</section>
<section id=3D"init-priority">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id846" role=3D"doc-backlink">init_priority</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#init-p=
riority" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id415">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
15" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">init_priority</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::init_priority</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>In C++, the order in which global variables are initialized across trans=
lation
units is unspecified, unlike the ordering within a single translation unit.=
 The
<code class=3D"docutils literal notranslate"><span class=3D"pre">init_prior=
ity</span></code> attribute allows you to specify a relative ordering for t=
he
initialization of objects declared at namespace scope in C++ within a singl=
e
linked image on supported platforms. The priority is given as an integer co=
nstant
expression between 101 and 65535 (inclusive). Priorities outside of that ra=
nge are
reserved for use by the implementation. A lower value indicates a higher pr=
iority
of initialization. Note that only the relative ordering of values is import=
ant.
For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">SomeType</span><span class=3D"w"> </span><span class=3D"p">{</spa=
n><span class=3D"w"> </span><span class=3D"n">SomeType</span><span class=3D=
"p">();</span><span class=3D"w"> </span><span class=3D"p">};</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">init_priority</span><span class=3D"p">(</span><span class=3D"mi">20=
0</span><span class=3D"p">)))</span><span class=3D"w"> </span><span class=
=3D"n">SomeType</span><span class=3D"w"> </span><span class=3D"n">Obj1</spa=
n><span class=3D"p">;</span>
<span class=3D"n">__attribute__</span><span class=3D"p">((</span><span clas=
s=3D"n">init_priority</span><span class=3D"p">(</span><span class=3D"mi">10=
1</span><span class=3D"p">)))</span><span class=3D"w"> </span><span class=
=3D"n">SomeType</span><span class=3D"w"> </span><span class=3D"n">Obj2</spa=
n><span class=3D"p">;</span>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">Obj2</s=
pan></code> will be initialized <em>before</em> <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Obj1</span></code> despite the usual =
order of
initialization being the opposite.</p>
<p>Note that this attribute does not control the initialization order of ob=
jects
across final linked image boundaries like shared objects and executables.</=
p>
<p>On Windows, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">init_seg(compiler)</span></code> is represented with a priority of 200=
 and
<code class=3D"docutils literal notranslate"><span class=3D"pre">init_seg(l=
ibrary)</span></code> is represented with a priority of 400. <code class=3D=
"docutils literal notranslate"><span class=3D"pre">init_seg(user)</span></c=
ode>
uses the default 65535 priority.</p>
<p>On MachO platforms, this attribute also does not control the order of in=
itialization
across translation units, where it only affects the order within a single T=
U.</p>
<p>This attribute is only supported for C++ and Objective-C++ and is ignore=
d in
other language modes. Currently, this attribute is not implemented on z/OS.=
</p>
</section>
<section id=3D"init-seg">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id847" role=3D"doc-backlink">init_seg</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#init-seg" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id416">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
16" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ini=
t_seg</span></code></p></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The attribute applied by <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">pragma</span> <span class=3D"pre">init_seg()</span></code=
> controls the section into
which global initialization function pointers are emitted. It is only
available with <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-fms-extensions</span></code>. Typically, this function pointer is
emitted into <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">.CRT$XCU</span></code> on Windows. The user can change the order of
initialization by using a different section name with the same
<code class=3D"docutils literal notranslate"><span class=3D"pre">.CRT$XC</s=
pan></code> prefix and a suffix that sorts lexicographically before or
after the standard <code class=3D"docutils literal notranslate"><span class=
=3D"pre">.CRT$XCU</span></code> sections. See the <a class=3D"reference ext=
ernal" href=3D"http://msdn.microsoft.com/en-us/library/7977wcck(v=3Dvs.110)=
.aspx">init_seg</a>
documentation on MSDN for more information.</p>
</section>
<section id=3D"leaf">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id848" role=3D"doc-backlink">leaf</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/AttributeReference.html#leaf" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id417">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
17" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">leaf</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::leaf</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::leaf</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">lea=
f</span></code> attribute is used as a compiler hint to improve dataflow an=
alysis
in library functions. Functions marked with the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">leaf</span></code> attribute are not =
allowed
to jump back into the caller=E2=80=99s translation unit, whether through in=
voking a
callback function, an external function call, use of <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">longjmp</span></code>, or other =
means.
Therefore, they cannot use or modify any data that does not escape the call=
er function=E2=80=99s
compilation unit.</p>
<p>For more information see
<cite>gcc documentation &lt;https://gcc.gnu.org/onlinedocs/gcc/Common-Funct=
ion-Attributes.html&gt;</cite></p>
</section>
<section id=3D"loader-uninitialized">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id849" role=3D"doc-backlink">loader_uninitialized</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#loader-uninitialized" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id418">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
18" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">loader_uninitialized</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::loader_uninitialized</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::loader_uninitialized</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">loa=
der_uninitialized</span></code> attribute can be placed on global variables=
 to
indicate that the variable does not need to be zero initialized by the load=
er.
On most targets, zero-initialization does not incur any additional cost.
For example, most general purpose operating systems deliberately ensure
that all memory is properly initialized in order to avoid leaking privilege=
d
information from the kernel or other programs. However, some targets
do not make this guarantee, and on these targets, avoiding an unnecessary
zero-initialization can have a significant impact on load times and/or code
size.</p>
<p>A declaration with this attribute is a non-tentative definition just as =
if it
provided an initializer. Variables with this attribute are considered to be
uninitialized in the same sense as a local variable, and the programs must
write to them before reading from them. If the variable=E2=80=99s type is a=
 C++ class
type with a non-trivial default constructor, or an array thereof, this attr=
ibute
only suppresses the static zero-initialization of the variable, not the dyn=
amic
initialization provided by executing the default constructor.</p>
</section>
<section id=3D"maybe-undef">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id850" role=3D"doc-backlink">maybe_undef</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#maybe-un=
def" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id419">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
19" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">maybe_undef</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::maybe_undef</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::maybe_undef</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">may=
be_undef</span></code> attribute can be placed on a function parameter. It =
indicates
that the parameter is allowed to use undef values. It informs the compiler
to insert a freeze LLVM IR instruction on the function parameter.
Please note that this is an attribute that is used as an internal
implementation detail and not intended to be used by external users.</p>
<p>In languages HIP, CUDA etc., some functions have multi-threaded semantic=
s and
it is enough for only one or some threads to provide defined arguments.
Depending on semantics, undef arguments in some threads don=E2=80=99t produ=
ce
undefined results in the function call. Since, these functions accept undef=
ined
arguments, <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>maybe_undef</span></code> attribute can be placed.</p>
<p>Sample usage:
.. code-block:: c</p>
<blockquote>
<div><p>void maybeundeffunc(int __attribute__((maybe_undef))param);</p>
</div></blockquote>
</section>
<section id=3D"maybe-unused-unused">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id851" role=3D"doc-backlink">maybe_unused, unused</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#maybe-unused-unused" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id420">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
20" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">unused</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">may=
be_unused</span></code> <br> <code class=3D"docutils literal notranslate"><=
span class=3D"pre">gnu::unused</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::unused</span></code> <br> <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">maybe_unused</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>When passing the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">-Wunused</span></code> flag to Clang, entities that are unused by=
 the
program may be diagnosed. The <code class=3D"docutils literal notranslate">=
<span class=3D"pre">[[maybe_unused]]</span></code> (or
<code class=3D"docutils literal notranslate"><span class=3D"pre">__attribut=
e__((unused))</span></code>) attribute can be used to silence such diagnost=
ics
when the entity cannot be removed. For instance, a local variable may exist
solely for use in an <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">assert()</span></code> statement, which makes the local variable
unused when <code class=3D"docutils literal notranslate"><span class=3D"pre=
">NDEBUG</span></code> is defined.</p>
<p>The attribute may be applied to the declaration of a class, a typedef, a
variable, a function or method, a function parameter, an enumeration, an
enumerator, a non-static data member, or a label.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">#include</span><span class=3D"w"> </span><span =
class=3D"cpf">&lt;cassert&gt;</span>

<span class=3D"p">[[</span><span class=3D"n">maybe_unused</span><span class=
=3D"p">]]</span><span class=3D"w"> </span><span class=3D"kt">void</span><sp=
an class=3D"w"> </span><span class=3D"n">f</span><span class=3D"p">([[</spa=
n><span class=3D"n">maybe_unused</span><span class=3D"p">]]</span><span cla=
ss=3D"w"> </span><span class=3D"kt">bool</span><span class=3D"w"> </span><s=
pan class=3D"n">thing1</span><span class=3D"p">,</span>
<span class=3D"w">                        </span><span class=3D"p">[[</span=
><span class=3D"n">maybe_unused</span><span class=3D"p">]]</span><span clas=
s=3D"w"> </span><span class=3D"kt">bool</span><span class=3D"w"> </span><sp=
an class=3D"n">thing2</span><span class=3D"p">)</span><span class=3D"w"> </=
span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"p">[[</span><span class=3D"n">may=
be_unused</span><span class=3D"p">]]</span><span class=3D"w"> </span><span =
class=3D"kt">bool</span><span class=3D"w"> </span><span class=3D"n">b</span=
><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> <=
/span><span class=3D"n">thing1</span><span class=3D"w"> </span><span class=
=3D"o">&amp;&amp;</span><span class=3D"w"> </span><span class=3D"n">thing2<=
/span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"n">assert</span><span class=3D"p"=
>(</span><span class=3D"n">b</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"model">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id852" role=3D"doc-backlink">model</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#model" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id421">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
21" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">model</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::model</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::model</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">mod=
el</span></code> attribute allows overriding the translation unit=E2=80=99s
code model (specified by <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">-mcmodel</span></code>) for a specific global variable.</p>
</section>
<section id=3D"no-destroy">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id853" role=3D"doc-backlink">no_destroy</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/AttributeReference.html#no-destro=
y" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id422">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
22" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">no_destroy</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::no_destroy</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">no_=
destroy</span></code> attribute specifies that a variable with static or th=
read
storage duration shouldn=E2=80=99t have its exit-time destructor run. Annot=
ating every
static and thread duration variable with this attribute is equivalent to
invoking clang with -fno-c++-static-destructors.</p>
<p>If a variable is declared with this attribute, clang doesn=E2=80=99t acc=
ess check or
generate the type=E2=80=99s destructor. If you have a type that you only wa=
nt to be
annotated with <code class=3D"docutils literal notranslate"><span class=3D"=
pre">no_destroy</span></code>, you can therefore declare the destructor pri=
vate:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">struct</span><span class=3D"w"> </span><span cla=
ss=3D"nc">only_no_destroy</span><span class=3D"w"> </span><span class=3D"p"=
>{</span>
<span class=3D"w">  </span><span class=3D"n">only_no_destroy</span><span cl=
ass=3D"p">();</span>
<span class=3D"k">private</span><span class=3D"o">:</span>
<span class=3D"w">  </span><span class=3D"o">~</span><span class=3D"n">only=
_no_destroy</span><span class=3D"p">();</span>
<span class=3D"p">};</span>

<span class=3D"p">[[</span><span class=3D"n">clang</span><span class=3D"o">=
::</span><span class=3D"n">no_destroy</span><span class=3D"p">]]</span><spa=
n class=3D"w"> </span><span class=3D"n">only_no_destroy</span><span class=
=3D"w"> </span><span class=3D"n">global</span><span class=3D"p">;</span><sp=
an class=3D"w"> </span><span class=3D"c1">// fine!</span>
</pre></div>
</div>
<p>Note that destructors are still required for subobjects of aggregates an=
notated
with this attribute. This is because previously constructed subobjects need=
 to
be destroyed if an exception gets thrown before the initialization of the
complete object is complete. For instance:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"kt">void</span><span class=3D"w"> </span><span clas=
s=3D"nf">f</span><span class=3D"p">()</span><span class=3D"w"> </span><span=
 class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">try</span><span class=3D"w"> <=
/span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"p">[[</span><span class=3D"n">c=
lang</span><span class=3D"o">::</span><span class=3D"n">no_destroy</span><s=
pan class=3D"p">]]</span>
<span class=3D"w">    </span><span class=3D"k">static</span><span class=3D"=
w"> </span><span class=3D"n">only_no_destroy</span><span class=3D"w"> </spa=
n><span class=3D"n">array</span><span class=3D"p">[</span><span class=3D"mi=
">10</span><span class=3D"p">];</span><span class=3D"w"> </span><span class=
=3D"c1">// error, only_no_destroy has a private destructor.</span>
<span class=3D"w">  </span><span class=3D"p">}</span><span class=3D"w"> </s=
pan><span class=3D"k">catch</span><span class=3D"w"> </span><span class=3D"=
p">(...)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"c1">// Handle the error</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Here, if the construction of <code class=3D"docutils literal notranslate=
"><span class=3D"pre">array[9]</span></code> fails with an exception, <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">array[0..8]</sp=
an></code>
will be destroyed, so the element=E2=80=99s destructor needs to be accessib=
le.</p>
</section>
<section id=3D"nodebug">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id854" role=3D"doc-backlink">nodebug</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/AttributeReference.html#nodebug" tit=
le=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id423">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
23" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nodebug</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nodebug</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::nodebug</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">nod=
ebug</span></code> attribute allows you to suppress debugging information f=
or a
function or method, for a variable that is not a parameter or a non-static
data member, or for a typedef or using declaration.</p>
</section>
<section id=3D"noescape">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id855" role=3D"doc-backlink">noescape</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/AttributeReference.html#noescape" t=
itle=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id424">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
24" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">noescape</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::noescape</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::noescape</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">noescap=
e</span></code> placed on a function parameter of a pointer type is used to=
 inform
the compiler that the pointer cannot escape: that is, no reference to the o=
bject
the pointer points to that is derived from the parameter value will survive
after the function returns. Users are responsible for making sure parameter=
s
annotated with <code class=3D"docutils literal notranslate"><span class=3D"=
pre">noescape</span></code> do not actually escape. Calling <code class=3D"=
docutils literal notranslate"><span class=3D"pre">free()</span></code> on s=
uch
a parameter does not constitute an escape.</p>
<p>For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"n">gp</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
nonescapingFunc</span><span class=3D"p">(</span><span class=3D"n">__attribu=
te__</span><span class=3D"p">((</span><span class=3D"n">noescape</span><spa=
n class=3D"p">))</span><span class=3D"w"> </span><span class=3D"kt">int</sp=
an><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">p<=
/span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p"=
>{</span>
<span class=3D"w">  </span><span class=3D"o">*</span><span class=3D"n">p</s=
pan><span class=3D"w"> </span><span class=3D"o">+=3D</span><span class=3D"w=
"> </span><span class=3D"mi">100</span><span class=3D"p">;</span><span clas=
s=3D"w"> </span><span class=3D"c1">// OK.</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
escapingFunc</span><span class=3D"p">(</span><span class=3D"n">__attribute_=
_</span><span class=3D"p">((</span><span class=3D"n">noescape</span><span c=
lass=3D"p">))</span><span class=3D"w"> </span><span class=3D"kt">int</span>=
<span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">p</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{<=
/span>
<span class=3D"w">  </span><span class=3D"n">gp</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">p</span><span class=3D"p">;</span><span class=3D"w"> </span><span class=
=3D"c1">// Not OK.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Additionally, when the parameter is a <cite>block pointer
&lt;https://clang.llvm.org/docs/BlockLanguageSpec.html&gt;</cite>, the same=
 restriction
applies to copies of the block. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">typedef</span><span class=3D"w"> </span><span clas=
s=3D"kt">void</span><span class=3D"w"> </span><span class=3D"p">(</span><sp=
an class=3D"o">^</span><span class=3D"n">BlockTy</span><span class=3D"p">)(=
);</span>
<span class=3D"n">BlockTy</span><span class=3D"w"> </span><span class=3D"n"=
>g0</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">g1</span><span class=3D"p">;</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
nonescapingFunc</span><span class=3D"p">(</span><span class=3D"n">__attribu=
te__</span><span class=3D"p">((</span><span class=3D"n">noescape</span><spa=
n class=3D"p">))</span><span class=3D"w"> </span><span class=3D"n">BlockTy<=
/span><span class=3D"w"> </span><span class=3D"n">block</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">block</span><span class=3D"p">=
();</span><span class=3D"w"> </span><span class=3D"c1">// OK.</span>
<span class=3D"p">}</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
escapingFunc</span><span class=3D"p">(</span><span class=3D"n">__attribute_=
_</span><span class=3D"p">((</span><span class=3D"n">noescape</span><span c=
lass=3D"p">))</span><span class=3D"w"> </span><span class=3D"n">BlockTy</sp=
an><span class=3D"w"> </span><span class=3D"n">block</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">g0</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">block</span><span class=3D"p">;</span><span class=3D"w"> </span><span cla=
ss=3D"c1">// Not OK.</span>
<span class=3D"w">  </span><span class=3D"n">g1</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">Block_copy</span><span class=3D"p">(</span><span class=3D"n">block</span>=
<span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"c1">// =
Not OK either.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</section>
<section id=3D"nosvm">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id856" role=3D"doc-backlink">nosvm</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/AttributeReference.html#nosvm" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id425">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
25" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">nosvm</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>OpenCL 2.0 supports the optional <code class=3D"docutils literal notrans=
late"><span class=3D"pre">__attribute__((nosvm))</span></code> qualifier fo=
r
pointer variable. It informs the compiler that the pointer does not refer
to a shared virtual memory region. See OpenCL v2.0 s6.7.2 for details.</p>
<p>Since it is not widely used and has been removed from OpenCL 2.1, it is =
ignored
by Clang.</p>
</section>
<section id=3D"objc-externally-retained">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id857" role=3D"doc-backlink">objc_externally_retained</a><a c=
lass=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.=
html#objc-externally-retained" title=3D"Link to this heading">=C2=B6</a></h=
3>
<table class=3D"docutils align-default" id=3D"id426">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
26" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">objc_externally_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_externally_retained</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::objc_externally_retained</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">obj=
c_externally_retained</span></code> attribute can be applied to strong loca=
l
variables, functions, methods, or blocks to opt into
<a class=3D"reference external" href=3D"https://clang.llvm.org/docs/Automat=
icReferenceCounting.html#externally-retained-variables">externally-retained=
 semantics</a>.</p>
<p>When applied to the definition of a function, method, or block, every pa=
rameter
of the function with implicit strong retainable object pointer type is
considered externally-retained, and becomes <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">const</span></code>. By explicitly annota=
ting
a parameter with <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__strong</span></code>, you can opt back into the default
non-externally-retained behavior for that parameter. For instance,
<code class=3D"docutils literal notranslate"><span class=3D"pre">first_para=
m</span></code> is externally-retained below, but not <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">second_param</span></code>:</p>
<div class=3D"highlight-objc notranslate"><div class=3D"highlight"><pre><sp=
an></span><span class=3D"bp">__attribute__</span><span class=3D"p">((</span=
><span class=3D"n">objc_externally_retained</span><span class=3D"p">))</spa=
n>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"n">f=
</span><span class=3D"p">(</span><span class=3D"bp">NSArray</span><span cla=
ss=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">first_param</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">_=
_strong</span><span class=3D"w"> </span><span class=3D"bp">NSArray</span><s=
pan class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">second_=
param</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// ...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Likewise, when applied to a strong local variable, that variable becomes
<code class=3D"docutils literal notranslate"><span class=3D"pre">const</spa=
n></code> and is considered externally-retained.</p>
<p>When compiled without <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">-fobjc-arc</span></code>, this attribute is ignored.</p>
</section>
<section id=3D"pass-object-size-pass-dynamic-object-size">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id858" role=3D"doc-backlink">pass_object_size, pass_dynamic_o=
bject_size</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/A=
ttributeReference.html#pass-object-size-pass-dynamic-object-size" title=3D"=
Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id427">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
27" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">pass_object_size</span></code> <br> <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">pass_dynamic_object_size</spa=
n></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::pass_object_size</span></code> <br> <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang::pass_dynamic_object_size</span></code>=
</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::pass_object_size</span></code> <br> <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang::pass_dynamic_object_size</span></code>=
</p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>The mangling of functions with parameters that are annotated with
<code class=3D"docutils literal notranslate"><span class=3D"pre">pass_objec=
t_size</span></code> is subject to change. You can get around this by
using <code class=3D"docutils literal notranslate"><span class=3D"pre">__as=
m__("foo")</span></code> to explicitly name your functions, thus preserving
your ABI; also, non-overloadable C functions with <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">pass_object_size</span></code> are
not mangled.</p>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">pas=
s_object_size(Type)</span></code> attribute can be placed on function param=
eters to
instruct clang to call <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">__builtin_object_size(param,</span> <span class=3D"pre">Type)<=
/span></code> at each callsite
of said function, and implicitly pass the result of this call in as an invi=
sible
argument of type <code class=3D"docutils literal notranslate"><span class=
=3D"pre">size_t</span></code> directly after the parameter annotated with
<code class=3D"docutils literal notranslate"><span class=3D"pre">pass_objec=
t_size</span></code>. Clang will also replace any calls to
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
object_size(param,</span> <span class=3D"pre">Type)</span></code> in the fu=
nction by said implicit
parameter.</p>
<p>Example usage:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">bzero1</span><span class=3D"p">(</span><span class=3D"kt">char</spa=
n><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"k">con=
st</span><span class=3D"w"> </span><span class=3D"n">p</span><span class=3D=
"w"> </span><span class=3D"n">__attribute__</span><span class=3D"p">((</spa=
n><span class=3D"n">pass_object_size</span><span class=3D"p">(</span><span =
class=3D"mi">0</span><span class=3D"p">))))</span>
<span class=3D"w">    </span><span class=3D"n">__attribute__</span><span cl=
ass=3D"p">((</span><span class=3D"n">noinline</span><span class=3D"p">))</s=
pan><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><span clas=
s=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"k">for</span><span class=3D"w"> <=
/span><span class=3D"p">(</span><span class=3D"cm">/**/</span><span class=
=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span><span cl=
ass=3D"w"> </span><span class=3D"o">&lt;</span><span class=3D"w"> </span><s=
pan class=3D"p">(</span><span class=3D"kt">int</span><span class=3D"p">)</s=
pan><span class=3D"n">__builtin_object_size</span><span class=3D"p">(</span=
><span class=3D"n">p</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"mi">0</span><span class=3D"p">);</span><span class=3D"w"=
> </span><span class=3D"o">++</span><span class=3D"n">i</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"n">p</span><span class=3D"p">[<=
/span><span class=3D"n">i</span><span class=3D"p">]</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"w">  </span><span class=3D"p">}</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">i</span><span class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">m=
ain</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">char</span><span class=3D"w">=
 </span><span class=3D"n">chars</span><span class=3D"p">[</span><span class=
=3D"mi">100</span><span class=3D"p">];</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">n</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"n">bzero1</span><span =
class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">chars</=
span><span class=3D"p">[</span><span class=3D"mi">0</span><span class=3D"p"=
>]);</span>
<span class=3D"w">  </span><span class=3D"n">assert</span><span class=3D"p"=
>(</span><span class=3D"n">n</span><span class=3D"w"> </span><span class=3D=
"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"k">sizeof</span><=
span class=3D"p">(</span><span class=3D"n">chars</span><span class=3D"p">))=
;</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>If successfully evaluating <code class=3D"docutils literal notranslate">=
<span class=3D"pre">__builtin_object_size(param,</span> <span class=3D"pre"=
>Type)</span></code> at the
callsite is not possible, then the =E2=80=9Cfailed=E2=80=9D value is passed=
 in. So, using the
definition of <code class=3D"docutils literal notranslate"><span class=3D"p=
re">bzero1</span></code> from above, the following code would exit cleanly:=
</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">main2</span><span class=3D"p">(</span><span class=3D"kt">int</span>=
<span class=3D"w"> </span><span class=3D"n">argc</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"kt">char</span><span class=
=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">argv</span><span=
 class=3D"p">[])</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">n</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"n">bzero1</span><span =
class=3D"p">(</span><span class=3D"n">argv</span><span class=3D"p">);</span=
>
<span class=3D"w">  </span><span class=3D"n">assert</span><span class=3D"p"=
>(</span><span class=3D"n">n</span><span class=3D"w"> </span><span class=3D=
"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"mi">-1</span><spa=
n class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">pass_ob=
ject_size</span></code> plays a part in overload resolution. If two overloa=
d
candidates are otherwise equally good, then the overload with one or more
parameters with <code class=3D"docutils literal notranslate"><span class=3D=
"pre">pass_object_size</span></code> is preferred. This implies that the ch=
oice
between two identical overloads both with <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">pass_object_size</span></code> on one or mo=
re
parameters will always be ambiguous; for this reason, having two such overl=
oads
is illegal. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">#define PS(N) __attribute__((pass_object_size(N=
)))</span>
<span class=3D"c1">// OK</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
Foo</span><span class=3D"p">(</span><span class=3D"kt">char</span><span cla=
ss=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">a</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">char</span=
><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">b</s=
pan><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"c1"=
>// Overload A</span>
<span class=3D"c1">// OK -- overload A has no parameters with pass_object_s=
ize.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
Foo</span><span class=3D"p">(</span><span class=3D"kt">char</span><span cla=
ss=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">a</span><span =
class=3D"w"> </span><span class=3D"n">PS</span><span class=3D"p">(</span><s=
pan class=3D"mi">0</span><span class=3D"p">),</span><span class=3D"w"> </sp=
an><span class=3D"kt">char</span><span class=3D"w"> </span><span class=3D"o=
">*</span><span class=3D"n">b</span><span class=3D"w"> </span><span class=
=3D"n">PS</span><span class=3D"p">(</span><span class=3D"mi">0</span><span =
class=3D"p">));</span><span class=3D"w"> </span><span class=3D"c1">// Overl=
oad B</span>
<span class=3D"c1">// Error -- Same signature (sans pass_object_size) as ov=
erload B, and both</span>
<span class=3D"c1">// overloads have one or more parameters with the pass_o=
bject_size attribute.</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
Foo</span><span class=3D"p">(</span><span class=3D"kt">void</span><span cla=
ss=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">a</span><span =
class=3D"w"> </span><span class=3D"n">PS</span><span class=3D"p">(</span><s=
pan class=3D"mi">0</span><span class=3D"p">),</span><span class=3D"w"> </sp=
an><span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"o=
">*</span><span class=3D"n">b</span><span class=3D"p">);</span>

<span class=3D"c1">// OK</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
Bar</span><span class=3D"p">(</span><span class=3D"kt">void</span><span cla=
ss=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">a</span><span =
class=3D"w"> </span><span class=3D"n">PS</span><span class=3D"p">(</span><s=
pan class=3D"mi">0</span><span class=3D"p">));</span><span class=3D"w"> </s=
pan><span class=3D"c1">// Overload C</span>
<span class=3D"c1">// OK</span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
Bar</span><span class=3D"p">(</span><span class=3D"kt">char</span><span cla=
ss=3D"w"> </span><span class=3D"o">*</span><span class=3D"n">c</span><span =
class=3D"w"> </span><span class=3D"n">PS</span><span class=3D"p">(</span><s=
pan class=3D"mi">1</span><span class=3D"p">));</span><span class=3D"w"> </s=
pan><span class=3D"c1">// Overload D</span>

<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
main</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">char</span><span class=3D"w">=
 </span><span class=3D"n">known</span><span class=3D"p">[</span><span class=
=3D"mi">10</span><span class=3D"p">],</span><span class=3D"w"> </span><span=
 class=3D"o">*</span><span class=3D"n">unknown</span><span class=3D"p">;</s=
pan>
<span class=3D"w">  </span><span class=3D"n">Foo</span><span class=3D"p">(<=
/span><span class=3D"n">unknown</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">unknown</span><span class=3D"p">);</span><=
span class=3D"w"> </span><span class=3D"c1">// Calls overload B</span>
<span class=3D"w">  </span><span class=3D"n">Foo</span><span class=3D"p">(<=
/span><span class=3D"n">known</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">unknown</span><span class=3D"p">);</span><=
span class=3D"w"> </span><span class=3D"c1">// Calls overload B</span>
<span class=3D"w">  </span><span class=3D"n">Foo</span><span class=3D"p">(<=
/span><span class=3D"n">unknown</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">known</span><span class=3D"p">);</span><sp=
an class=3D"w"> </span><span class=3D"c1">// Calls overload B</span>
<span class=3D"w">  </span><span class=3D"n">Foo</span><span class=3D"p">(<=
/span><span class=3D"n">known</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">known</span><span class=3D"p">);</span><sp=
an class=3D"w"> </span><span class=3D"c1">// Calls overload B</span>

<span class=3D"w">  </span><span class=3D"n">Bar</span><span class=3D"p">(<=
/span><span class=3D"n">known</span><span class=3D"p">);</span><span class=
=3D"w"> </span><span class=3D"c1">// Calls overload D</span>
<span class=3D"w">  </span><span class=3D"n">Bar</span><span class=3D"p">(<=
/span><span class=3D"n">unknown</span><span class=3D"p">);</span><span clas=
s=3D"w"> </span><span class=3D"c1">// Calls overload D</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Currently, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">pass_object_size</span></code> is a bit restricted in terms of its usag=
e:</p>
<ul class=3D"simple">
<li><p>Only one use of <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">pass_object_size</span></code> is allowed per parameter.</p></=
li>
<li><p>It is an error to take the address of a function with <code class=3D=
"docutils literal notranslate"><span class=3D"pre">pass_object_size</span><=
/code> on
any of its parameters. If you wish to do this, you can create an overload
without <code class=3D"docutils literal notranslate"><span class=3D"pre">pa=
ss_object_size</span></code> on any parameters.</p></li>
<li><p>It is an error to apply the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">pass_object_size</span></code> attribute to parame=
ters that
are not pointers. Additionally, any parameter that <code class=3D"docutils =
literal notranslate"><span class=3D"pre">pass_object_size</span></code> is
applied to must be marked <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">const</span></code> at its function=E2=80=99s definition.</=
p></li>
</ul>
<p>Clang also supports the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">pass_dynamic_object_size</span></code> attribute, which be=
haves
identically to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">pass_object_size</span></code>, but evaluates a call to
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
dynamic_object_size</span></code> at the callee instead of
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
object_size</span></code>. <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__builtin_dynamic_object_size</span></code> provides some =
extra
runtime checks when the object size can=E2=80=99t be determined at compile-=
time. You can
read more about <code class=3D"docutils literal notranslate"><span class=3D=
"pre">__builtin_dynamic_object_size</span></code> <a class=3D"reference ext=
ernal" href=3D"https://clang.llvm.org/docs/LanguageExtensions.html#evaluati=
ng-object-size-dynamically">here</a>.</p>
</section>
<section id=3D"require-constant-initialization-constinit-c-20">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id859" role=3D"doc-backlink">require_constant_initialization,=
 constinit (C++20)</a><a class=3D"headerlink" href=3D"https://clang.llvm.or=
g/docs/AttributeReference.html#require-constant-initialization-constinit-c-=
20" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id428">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
28" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">require_constant_initialization</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::require_constant_initialization</span></code></p></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">con=
stinit</span></code></p></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>This attribute specifies that the variable to which it is attached is in=
tended
to have a <a class=3D"reference external" href=3D"http://en.cppreference.co=
m/w/cpp/language/constant_initialization">constant initializer</a>
according to the rules of [basic.start.static]. The variable is required to
have static or thread storage duration. If the initialization of the variab=
le
is not a constant initializer an error will be produced. This attribute may
only be used in C++; the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">constinit</span></code> spelling is only accepted in C++20
onwards.</p>
<p>Note that in C++03 strict constant expression checking is not done. Inst=
ead
the attribute reports if Clang can emit the variable as a constant, even if=
 it=E2=80=99s
not technically a =E2=80=98constant initializer=E2=80=99. This behavior is =
non-portable.</p>
<p>Static storage duration variables with constant initializers avoid hard-=
to-find
bugs caused by the indeterminate order of dynamic initialization. They can =
also
be safely used during dynamic initialization across translation units.</p>
<p>This attribute acts as a compile time assertion that the requirements
for constant initialization have been met. Since these requirements change
between dialects and have subtle pitfalls it=E2=80=99s important to fail fa=
st instead
of silently falling back on dynamic initialization.</p>
<p>The first use of the attribute on a variable must be part of, or precede=
, the
initializing declaration of the variable. C++20 requires the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">constinit</span></code>
spelling of the attribute to be present on the initializing declaration if =
it
is used anywhere. The other spellings can be specified on a forward declara=
tion
and omitted on a later initializing declaration.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// -std=3Dc++14</span>
<span class=3D"cp">#define SAFE_STATIC [[clang::require_constant_initializa=
tion]]</span>
<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>T</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">constexpr</span><span class=3D=
"w"> </span><span class=3D"n">T</span><span class=3D"p">(</span><span class=
=3D"kt">int</span><span class=3D"p">)</span><span class=3D"w"> </span><span=
 class=3D"p">{}</span>
<span class=3D"w">  </span><span class=3D"o">~</span><span class=3D"n">T</s=
pan><span class=3D"p">();</span><span class=3D"w"> </span><span class=3D"c1=
">// non-trivial</span>
<span class=3D"p">};</span>
<span class=3D"n">SAFE_STATIC</span><span class=3D"w"> </span><span class=
=3D"n">T</span><span class=3D"w"> </span><span class=3D"n">x</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"p">{</span><span class=3D"mi">42</span><span class=3D"p">};</sp=
an><span class=3D"w"> </span><span class=3D"c1">// Initialization OK. Doesn=
't check destructor.</span>
<span class=3D"n">SAFE_STATIC</span><span class=3D"w"> </span><span class=
=3D"n">T</span><span class=3D"w"> </span><span class=3D"n">y</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"mi">42</span><span class=3D"p">;</span><span class=3D"w"> </spa=
n><span class=3D"c1">// error: variable does not have a constant initialize=
r</span>
<span class=3D"c1">// copy initialization is not a constant expression on a=
 non-literal type.</span>
</pre></div>
</div>
</section>
<section id=3D"section-declspec-allocate">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id860" role=3D"doc-backlink">section, __declspec(allocate)</a=
><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeRefer=
ence.html#section-declspec-allocate" title=3D"Link to this heading">=C2=B6<=
/a></h3>
<table class=3D"docutils align-default" id=3D"id429">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
29" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">section</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::section</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::section</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
ocate</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sec=
tion</span></code> attribute allows you to specify a specific section a
global variable or function should be in after translation.</p>
</section>
<section id=3D"standalone-debug">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id861" role=3D"doc-backlink">standalone_debug</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#sta=
ndalone-debug" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id430">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
30" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">standalone_debug</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::standalone_debug</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sta=
ndalone_debug</span></code> attribute causes debug info to be emitted for a=
 record
type regardless of the debug info optimizations that are enabled with
-fno-standalone-debug. This attribute only has an effect when debug info
optimizations are enabled (e.g. with -fno-standalone-debug), and is C++-onl=
y.</p>
</section>
<section id=3D"swift-async-context">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id862" role=3D"doc-backlink">swift_async_context</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#swift-async-context" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id431">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
31" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_async_context</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_async_context</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_async_context</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_async_context</span></code> attribute marks a parameter of a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">swiftasynccall</span>=
</code>
function as having the special asynchronous context-parameter ABI treatment=
.</p>
<p>If the function is not <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">swiftasynccall</span></code>, this attribute only generates
extended frame information.</p>
<p>A context parameter must have pointer or reference type.</p>
</section>
<section id=3D"swift-context">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id863" role=3D"doc-backlink">swift_context</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift-=
context" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id432">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
32" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_context</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_context</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_context</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_context</span></code> attribute marks a parameter of a <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">swiftcall</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">swiftas=
ynccall</span></code> function as having the special context-parameter
ABI treatment.</p>
<p>This treatment generally passes the context value in a special register
which is normally callee-preserved.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">swift=
_context</span></code> parameter must either be the last parameter or must =
be
followed by a <code class=3D"docutils literal notranslate"><span class=3D"p=
re">swift_error_result</span></code> parameter (which itself must always be
the last parameter).</p>
<p>A context parameter must have pointer or reference type.</p>
</section>
<section id=3D"swift-error-result">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id864" role=3D"doc-backlink">swift_error_result</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html=
#swift-error-result" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id433">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
33" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_error_result</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_error_result</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_error_result</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_error_result</span></code> attribute marks a parameter of a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">swiftcall</span></cod=
e>
function as having the special error-result ABI treatment.</p>
<p>This treatment generally passes the underlying error value in and out of
the function through a special register which is normally callee-preserved.
This is modeled in C by pretending that the register is addressable memory:=
</p>
<ul class=3D"simple">
<li><p>The caller appears to pass the address of a variable of pointer type=
.
The current value of this variable is copied into the register before
the call; if the call returns normally, the value is copied back into the
variable.</p></li>
<li><p>The callee appears to receive the address of a variable. This addres=
s
is actually a hidden location in its own stack, initialized with the
value of the register upon entry. When the function returns normally,
the value in that hidden location is written back to the register.</p></li>
</ul>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">swift=
_error_result</span></code> parameter must be the last parameter, and it mu=
st be
preceded by a <code class=3D"docutils literal notranslate"><span class=3D"p=
re">swift_context</span></code> parameter.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">swift=
_error_result</span></code> parameter must have type <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">T**</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">T*&amp;</span></code>=
 for some
type T. Note that no qualifiers are permitted on the intermediate level.</p=
>
<p>It is undefined behavior if the caller does not pass a pointer or
reference to a valid object.</p>
<p>The standard convention is that the error value itself (that is, the
value stored in the apparent argument) will be null upon function entry,
but this is not enforced by the ABI.</p>
</section>
<section id=3D"swift-indirect-result">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id865" role=3D"doc-backlink">swift_indirect_result</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.htm=
l#swift-indirect-result" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id434">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
34" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift_indirect_result</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_indirect_result</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swift_indirect_result</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ft_indirect_result</span></code> attribute marks a parameter of a <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">swiftcall</span></c=
ode>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">swiftas=
ynccall</span></code> function as having the special indirect-result ABI
treatment.</p>
<p>This treatment gives the parameter the target=E2=80=99s normal indirect-=
result
ABI treatment, which may involve passing it differently from an ordinary
parameter. However, only the first indirect result will receive this
treatment. Furthermore, low-level lowering may decide that a direct result
must be returned indirectly; if so, this will take priority over the
<code class=3D"docutils literal notranslate"><span class=3D"pre">swift_indi=
rect_result</span></code> parameters.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">swift=
_indirect_result</span></code> parameter must either be the first parameter=
 or
follow another <code class=3D"docutils literal notranslate"><span class=3D"=
pre">swift_indirect_result</span></code> parameter.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">swift=
_indirect_result</span></code> parameter must have type <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">T*</span></code> or <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">T&amp;</span></code=
> for
some object type <code class=3D"docutils literal notranslate"><span class=
=3D"pre">T</span></code>. If <code class=3D"docutils literal notranslate"><=
span class=3D"pre">T</span></code> is a complete type at the point of
definition of a function, it is undefined behavior if the argument
value does not point to storage of adequate size and alignment for a
value of type <code class=3D"docutils literal notranslate"><span class=3D"p=
re">T</span></code>.</p>
<p>Making indirect results explicit in the signature allows C functions to
directly construct objects into them without relying on language
optimizations like C++=E2=80=99s named return value optimization (NRVO).</p=
>
</section>
<section id=3D"swiftasynccall">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id866" role=3D"doc-backlink">swiftasynccall</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swift=
asynccall" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id435">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
35" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swiftasynccall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swiftasynccall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swiftasynccall</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ftasynccall</span></code> attribute indicates that a function is
compatible with the low-level conventions of Swift async functions,
provided it declares the right formal arguments.</p>
<p>In most respects, this is similar to the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">swiftcall</span></code> attribute, except=
 for
the following:</p>
<ul class=3D"simple">
<li><p>A parameter may be marked <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">swift_async_context</span></code>, <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">swift_context</span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">swift_i=
ndirect_result</span></code> (with the same restrictions on parameter
ordering as <code class=3D"docutils literal notranslate"><span class=3D"pre=
">swiftcall</span></code>) but the parameter attribute
<code class=3D"docutils literal notranslate"><span class=3D"pre">swift_erro=
r_result</span></code> is not permitted.</p></li>
<li><p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
wiftasynccall</span></code> function must have return type <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">void</span></code>.</p></l=
i>
<li><p>Within a <code class=3D"docutils literal notranslate"><span class=3D=
"pre">swiftasynccall</span></code> function, a call to a <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">swiftasynccall</span></code>
function that is the immediate operand of a <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">return</span></code> statement is
guaranteed to be performed as a tail call. This syntax is allowed even
in C as an extension (a call to a void-returning function cannot be a
return operand in standard C). If something in the calling function would
semantically be performed after a guaranteed tail call, such as the
non-trivial destruction of a local variable or temporary,
then the program is ill-formed.</p></li>
</ul>
<p>Query for this attribute with <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">__has_attribute(swiftasynccall)</span></code>. Query=
 if
the target supports the calling convention with
<code class=3D"docutils literal notranslate"><span class=3D"pre">__has_exte=
nsion(swiftasynccc)</span></code>.</p>
</section>
<section id=3D"swiftcall">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id867" role=3D"doc-backlink">swiftcall</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#swiftcall"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id436">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
36" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">swiftcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swiftcall</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::swiftcall</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
ftcall</span></code> attribute indicates that a function should be called
using the Swift calling convention for a function or function pointer.</p>
<p>The lowering for the Swift calling convention, as described by the Swift
ABI documentation, occurs in multiple phases. The first, =E2=80=9Chigh-leve=
l=E2=80=9D
phase breaks down the formal parameters and results into innately direct
and indirect components, adds implicit parameters for the generic
signature, and assigns the context and error ABI treatments to parameters
where applicable. The second phase breaks down the direct parameters
and results from the first phase and assigns them to registers or the
stack. The <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>swiftcall</span></code> convention only handles this second phase of
lowering; the C function type must accurately reflect the results
of the first phase, as follows:</p>
<ul class=3D"simple">
<li><p>Results classified as indirect by high-level lowering should be
represented as parameters with the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">swift_indirect_result</span></code> attribute.</p>=
</li>
<li><p>Results classified as direct by high-level lowering should be repres=
ented
as follows:</p>
<ul>
<li><p>First, remove any empty direct results.</p></li>
<li><p>If there are no direct results, the C result type should be <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">void</span></code>=
.</p></li>
<li><p>If there is one direct result, the C result type should be a type wi=
th
the exact layout of that result type.</p></li>
<li><p>If there are a multiple direct results, the C result type should be
a struct type with the exact layout of a tuple of those results.</p></li>
</ul>
</li>
<li><p>Parameters classified as indirect by high-level lowering should be
represented as parameters of pointer type.</p></li>
<li><p>Parameters classified as direct by high-level lowering should be
omitted if they are empty types; otherwise, they should be represented
as a parameter type with a layout exactly matching the layout of the
Swift parameter type.</p></li>
<li><p>The context parameter, if present, should be represented as a traili=
ng
parameter with the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">swift_context</span></code> attribute.</p></li>
<li><p>The error result parameter, if present, should be represented as a
trailing parameter (always following a context parameter) with the
<code class=3D"docutils literal notranslate"><span class=3D"pre">swift_erro=
r_result</span></code> attribute.</p></li>
</ul>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">swiftca=
ll</span></code> does not support variadic arguments or unprototyped functi=
ons.</p>
<p>The parameter ABI treatment attributes are aspects of the function type.
A function type which applies an ABI treatment attribute to a
parameter is a different type from an otherwise-identical function type
that does not. A single parameter may not have multiple ABI treatment
attributes.</p>
<p>Support for this feature is target-dependent, although it should be
supported on every target that Swift supports. Query for this attribute
with <code class=3D"docutils literal notranslate"><span class=3D"pre">__has=
_attribute(swiftcall)</span></code>. Query if the target supports the
calling convention with <code class=3D"docutils literal notranslate"><span =
class=3D"pre">__has_extension(swiftcc)</span></code>. This implies
support for the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">swift_context</span></code>, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">swift_error_result</span></code>, and
<code class=3D"docutils literal notranslate"><span class=3D"pre">swift_indi=
rect_result</span></code> attributes.</p>
</section>
<section id=3D"thread">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id868" role=3D"doc-backlink">thread</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/AttributeReference.html#thread" title=
=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id437">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
37" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td></td>
<td></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">thr=
ead</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__d=
eclspec(thread)</span></code> attribute declares a variable with thread loc=
al
storage. It is available under the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">-fms-extensions</span></code> flag for MSVC
compatibility. See the documentation for <a class=3D"reference external" hr=
ef=3D"http://msdn.microsoft.com/en-us/library/9w1sdazb.aspx">__declspec(thr=
ead)</a> on MSDN.</p>
<p>In Clang, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">__declspec(thread)</span></code> is generally equivalent in functionalit=
y to the
GNU <code class=3D"docutils literal notranslate"><span class=3D"pre">__thre=
ad</span></code> keyword. The variable must not have a destructor and must =
have
a constant initializer, if any. The attribute only applies to variables
declared with static storage duration, such as globals, class static data
members, and static locals.</p>
</section>
<section id=3D"tls-model">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id869" role=3D"doc-backlink">tls_model</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#tls-model"=
 title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id438">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
38" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">tls_model</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::tls_model</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gnu=
::tls_model</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">tls=
_model</span></code> attribute allows you to specify which thread-local sto=
rage
model to use. It accepts the following strings:</p>
<ul class=3D"simple">
<li><p>global-dynamic</p></li>
<li><p>local-dynamic</p></li>
<li><p>initial-exec</p></li>
<li><p>local-exec</p></li>
</ul>
<p>TLS models are mutually exclusive.</p>
</section>
<section id=3D"uninitialized">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/AttributeR=
eference.html#id870" role=3D"doc-backlink">uninitialized</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#uninit=
ialized" title=3D"Link to this heading">=C2=B6</a></h3>
<table class=3D"docutils align-default" id=3D"id439">
<caption><span class=3D"caption-text">Supported Syntaxes</span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/AttributeReference.html#id4=
39" title=3D"Link to this table">=C2=B6</a></caption>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>GNU</p></th>
<th class=3D"head"><p>C++11</p></th>
<th class=3D"head"><p>C23</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">__declspec</span></code></p></th>
<th class=3D"head"><p>Keyword</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span></code></p></th>
<th class=3D"head"><p>HLSL Annotation</p></th>
<th class=3D"head"><p><code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">#pragma</span> <span class=3D"pre">clang</span> <span class=3D"=
pre">attribute</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">uninitialized</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng::uninitialized</span></code></p></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><p>Yes</p></td>
</tr>
</tbody>
</table>
<p>The command-line parameter <code class=3D"docutils literal notranslate">=
<span class=3D"pre">-ftrivial-auto-var-init=3D*</span></code> can be used t=
o
initialize trivial automatic stack variables. By default, trivial automatic
stack variables are uninitialized. This attribute is used to override the
command-line parameter, forcing variables to remain uninitialized. It has n=
o
semantic meaning in that using uninitialized values is undefined behavior,
it rather documents the programmer=E2=80=99s intent.</p>
</section>
</section>
</section>


      </div>
      <div class=3D"bottomnav" role=3D"navigation" aria-label=3D"bottom nav=
igation">
     =20
        <p>
        =C2=AB&nbsp;&nbsp;<a href=3D"https://clang.llvm.org/docs/ClangComma=
ndLineReference.html">Clang command line argument reference</a>
        &nbsp;&nbsp;::&nbsp;&nbsp;
        <a class=3D"uplink" href=3D"https://clang.llvm.org/docs/index.html"=
>Contents</a>
        &nbsp;&nbsp;::&nbsp;&nbsp;
        <a href=3D"https://clang.llvm.org/docs/DiagnosticsReference.html">D=
iagnostic flags in Clang</a>&nbsp;&nbsp;=C2=BB
        </p>

      </div>

    <div class=3D"footer" role=3D"contentinfo">
    =C2=A9 Copyright 2007-2025, The Clang Team.
      Created using <a href=3D"https://www.sphinx-doc.org/">Sphinx</a> 7.2.=
6.
    </div>
 =20
</body></html>
------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/_static/pygments.css?v=649a27d8

@charset "utf-8";

pre { line-height: 125%; }

td.linenos .normal { color: rgb(102, 102, 102); background-color: transpare=
nt; padding-left: 5px; padding-right: 5px; }

span.linenos { color: rgb(102, 102, 102); background-color: transparent; pa=
dding-left: 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, =
192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255,=
 192); padding-left: 5px; padding-right: 5px; }

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(240, 240, 240); }

.highlight .c { color: rgb(96, 160, 176); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(96, 160, 176); font-style: italic; }

.highlight .cm { color: rgb(96, 160, 176); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(96, 160, 176); font-style: italic; }

.highlight .c1 { color: rgb(96, 160, 176); font-style: italic; }

.highlight .cs { color: rgb(96, 160, 176); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .ges { font-weight: bold; font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(64, 160, 112); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(64, 160, 112); }

.highlight .mf { color: rgb(64, 160, 112); }

.highlight .mh { color: rgb(64, 160, 112); }

.highlight .mi { color: rgb(64, 160, 112); }

.highlight .mo { color: rgb(64, 160, 112); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(64, 160, 112); }
------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/_static/haiku.css?v=e491ac2d

@charset "utf-8";

@import url("basic.css");

html { margin: 0px; padding: 0px; background: url("bg-page.png") left top r=
epeat-x rgb(255, 255, 255); }

body { line-height: 1.5; margin: auto; padding: 0px; font-family: "DejaVu S=
ans", Arial, Helvetica, sans-serif; min-width: 59em; max-width: 70em; color=
: rgb(51, 51, 51); }

div.footer { padding: 8px; font-size: 11px; text-align: center; letter-spac=
ing: 0.5px; }

a:link { font-weight: bold; text-decoration: none; color: rgb(220, 60, 1); =
}

a:visited { font-weight: bold; text-decoration: none; color: rgb(85, 26, 13=
9); }

a:hover, a:active { text-decoration: underline; color: rgb(255, 69, 0); }

h1 a:hover, a:active { text-decoration: none; color: rgb(12, 55, 98); }

h2 a:hover, a:active { text-decoration: none; color: rgb(12, 55, 98); }

h3 a:hover, a:active { text-decoration: none; color: rgb(12, 55, 98); }

h4 a:hover, a:active { text-decoration: none; color: rgb(12, 55, 98); }

a.headerlink { color: rgb(167, 206, 56); padding-left: 5px; }

a.headerlink:hover { color: rgb(167, 206, 56); }

div.content { margin: 20px 40px 50px; font-size: 0.9em; }

div.header { position: relative; left: 0px; top: 0px; height: 85px; padding=
: 0px 40px; }

div.header h1 { font-size: 1.6em; font-weight: normal; letter-spacing: 1px;=
 color: rgb(12, 55, 98); border: 0px; margin: 0px; padding-top: 15px; }

div.header h1 a { font-weight: normal; color: rgb(12, 55, 98); }

div.header h2 { font-size: 1.3em; font-weight: normal; letter-spacing: 1px;=
 text-transform: uppercase; color: rgb(170, 170, 170); border: 0px; margin-=
top: -3px; padding: 0px; }

div.header img.rightlogo { float: right; }

div.title { font-size: 1.3em; font-weight: bold; color: rgb(12, 55, 98); bo=
rder-bottom: thin dotted rgb(224, 224, 224); margin-bottom: 25px; }

div.topnav { }

div.topnav p { margin: 0px 40px; text-align: right; font-size: 0.8em; }

div.bottomnav { background: rgb(238, 238, 238); }

div.bottomnav p { margin-right: 40px; text-align: right; font-size: 0.8em; =
}

a.uplink { font-weight: normal; }

table.index { margin: 0px 0px 30px 30px; padding: 1px; border-width: 1px; b=
order-style: dotted; border-color: rgb(224, 224, 224); }

table.index tr.heading { background-color: rgb(224, 224, 224); text-align: =
center; font-weight: bold; font-size: 1.1em; }

table.index tr.index { background-color: rgb(238, 238, 238); }

table.index td { padding: 5px 20px; }

table.index a:link, table.index a:visited { font-weight: normal; text-decor=
ation: none; color: rgb(220, 60, 1); }

table.index a:hover, table.index a:active { text-decoration: underline; col=
or: rgb(255, 69, 0); }

div.admonition { border-radius: 10px; border-style: dotted; border-width: t=
hin; border-color: rgb(220, 220, 220); padding: 10px 15px; margin-bottom: 1=
5px; margin-top: 15px; }

div.note { padding: 10px 15px 10px 80px; background: url("alert_info_32.png=
") 15px 15px no-repeat rgb(228, 255, 222); min-height: 42px; }

div.warning { padding: 10px 15px 10px 80px; background: url("alert_warning_=
32.png") 15px 15px no-repeat rgb(255, 251, 198); min-height: 42px; }

div.seealso { background: rgb(228, 255, 222); }

h1 { font-size: 1.3em; font-weight: bold; color: rgb(12, 55, 98); border-bo=
ttom: thin dotted rgb(224, 224, 224); margin-top: 30px; }

h2 { font-size: 1.2em; font-weight: normal; color: rgb(12, 55, 98); border-=
bottom: thin dotted rgb(224, 224, 224); margin-top: 30px; }

h3 { font-size: 1.1em; font-weight: normal; color: rgb(12, 55, 98); margin-=
top: 30px; }

h4 { font-size: 1em; font-weight: normal; color: rgb(12, 55, 98); margin-to=
p: 30px; }

p { text-align: justify; }

p.last { margin-bottom: 0px; }

ol { padding-left: 20px; }

ul { padding-left: 5px; margin-top: 3px; }

li { line-height: 1.3; }

div.content ul > li { background: url("bullet_orange.png") left 0.45em no-r=
epeat scroll transparent; list-style-image: none; list-style-type: none; pa=
dding: 0px 0px 0px 1.666em; margin-bottom: 3px; }

td { vertical-align: top; }

code { background-color: rgb(226, 226, 226); font-size: 1em; font-family: m=
onospace; }

pre { border-color: rgb(12, 55, 98); border-style: dotted; border-width: th=
in; margin: 0px 0px 12px; padding: 0.8em; }

hr { border-width: 1px 0px 0px; border-top-style: solid; border-top-color: =
rgb(204, 204, 204); border-bottom-style: initial; border-bottom-color: init=
ial; border-right-style: initial; border-right-color: initial; border-left-=
style: initial; border-left-color: initial; margin-bottom: 10px; margin-top=
: 20px; }

@media print {
  .noprint { display: none; }
  acronym[title]::after { font-size: small; content: " (" attr(title) ")"; =
font-style: italic; }
  acronym { border: none; }
  div.topnav, div.bottomnav, div.header, table.index { display: none; }
  div.content { margin: 0px; padding: 0px; }
  html { background: rgb(255, 255, 255); }
}

.viewcode-back { font-family: "DejaVu Sans", Arial, Helvetica, sans-serif; =
}

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); margin: -1px -10px; padding: 0px 12px; }

div.math p { text-align: center; }
------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.section::after { display: block; content: ""; clear: left; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-siz=
e: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type=3D"text"] { float: left; width: 80%=
; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { float: left; width: 2=
0%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li p.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 30p=
x; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type:=
 none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 59em; max-width: 70em; }

div.body p, div.body dd, div.body li, div.body blockquote { hyphens: auto; =
}

a.headerlink { visibility: hidden; }

a:visited { color: rgb(85, 26, 139); }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, figure.align-left, .figure.align-left, object.align-left { =
clear: left; float: left; margin-right: 1em; }

img.align-right, figure.align-right, .figure.align-right, object.align-righ=
t { clear: right; float: right; margin-left: 1em; }

img.align-center, figure.align-center, .figure.align-center, object.align-c=
enter { display: block; margin-left: auto; margin-right: auto; }

img.align-default, figure.align-default, .figure.align-default { display: b=
lock; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar, aside.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid r=
gb(221, 221, 187); padding: 7px; background-color: rgb(255, 255, 238); widt=
h: 40%; float: right; clear: right; overflow-x: auto; }

p.sidebar-title { font-weight: bold; }

nav.contents, aside.topic, div.admonition, div.topic, blockquote { clear: l=
eft; }

nav.contents, aside.topic, div.topic { border: 1px solid rgb(204, 204, 204)=
; padding: 7px; margin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

div.sidebar > :last-child, aside.sidebar > :last-child, nav.contents > :las=
t-child, aside.topic > :last-child, div.topic > :last-child, div.admonition=
 > :last-child { margin-bottom: 0px; }

div.sidebar::after, aside.sidebar::after, nav.contents::after, aside.topic:=
:after, div.topic::after, div.admonition::after, blockquote::after { displa=
y: block; content: ""; clear: both; }

table.docutils { margin-top: 10px; margin-bottom: 10px; border: 0px; border=
-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > :first-child, td > :first-child { margin-top: 0px; }

th > :last-child, td > :last-child { margin-bottom: 0px; }

div.figure, figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption, figcaption { padding: 0.3em; }

div.figure p.caption span.caption-number, figcaption span.caption-number { =
font-style: italic; }

div.figure p.caption span.caption-text, figcaption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist { margin: 1em 0px; }

table.hlist td { vertical-align: top; }

.sig { font-family: Consolas, Menlo, "DejaVu Sans Mono", "Bitstream Vera Sa=
ns Mono", monospace; }

.sig-name, code.descname { background-color: transparent; font-weight: bold=
; }

.sig-name { font-size: 1.1em; }

code.descname { font-size: 1.2em; }

.sig-prename, code.descclassname { background-color: transparent; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.sig-param.n { font-style: italic; }

.sig-inline.c-texpr, .sig-inline.cpp-texpr { font-family: unset; }

.sig.c .k, .sig.c .kt, .sig.cpp .k, .sig.cpp .kt { color: rgb(0, 51, 179); =
}

.sig.c .m, .sig.cpp .m { color: rgb(23, 80, 235); }

.sig.c .s, .sig.c .sc, .sig.cpp .s, .sig.cpp .sc { color: rgb(6, 125, 23); =
}

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

:not(li) > ol > li:first-child > :first-child, :not(li) > ul > li:first-chi=
ld > :first-child { margin-top: 0px; }

:not(li) > ol > li:last-child > :last-child, :not(li) > ul > li:last-child =
> :last-child { margin-bottom: 0px; }

ol.simple ol p, ol.simple ul p, ul.simple ol p, ul.simple ul p { margin-top=
: 0px; }

ol.simple > li:not(:first-child) > p, ul.simple > li:not(:first-child) > p =
{ margin-top: 0px; }

ol.simple p, ul.simple p { margin-bottom: 0px; }

aside.footnote > span, div.citation > span { float: left; }

aside.footnote > span:last-of-type, div.citation > span:last-of-type { padd=
ing-right: 0.5em; }

aside.footnote > p { margin-left: 2em; }

div.citation > p { margin-left: 4em; }

aside.footnote > p:last-of-type, div.citation > p:last-of-type { margin-bot=
tom: 0em; }

aside.footnote > p:last-of-type::after, div.citation > p:last-of-type::afte=
r { content: ""; clear: both; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto=
; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-lef=
t: 0.5em; padding-right: 5px; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em=
; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > :first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

.sig dd { margin-top: 0px; margin-bottom: 0px; }

.sig dl { margin-top: 0px; margin-bottom: 0px; }

dl > dd:last-child, dl > dd:last-child > :last-child { margin-bottom: 0px; =
}

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0px 0.5em; content: ":"; =
display: inline-block; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

.translated { background-color: rgba(207, 255, 207, 0.2); }

.untranslated { background-color: rgba(255, 207, 207, 0.2); }

pre { overflow: auto hidden; }

pre, div[class*=3D"highlight-"] { clear: both; }

span.pre { hyphens: none; white-space: nowrap; }

div[class*=3D"highlight-"] { margin: 1em 0px; }

td.linenos pre { border: 0px; background-color: transparent; color: rgb(170=
, 170, 170); }

table.highlighttable { display: block; }

table.highlighttable tbody { display: block; }

table.highlighttable tr { display: flex; }

table.highlighttable td { margin: 0px; padding: 0px; }

table.highlighttable td.linenos { padding-right: 0.5em; }

table.highlighttable td.code { flex: 1 1 0%; overflow: hidden; }

.highlight .hll { display: block; }

div.highlight pre, table.highlighttable pre { margin: 0px; }

div.code-block-caption + div { margin-top: 0px; }

div.code-block-caption { margin-top: 1em; padding: 2px 5px; font-size: smal=
l; }

div.code-block-caption code { background-color: transparent; }

table.highlighttable td.linenos, span.linenos, div.highlight span.gp { user=
-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { margin: 1em 0px; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: absolute; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://clang.llvm.org/docs/_static/bg-page.png

iVBORw0KGgoAAAANSUhEUgAAAAwAAABoCAAAAADge053AAAAGUlEQVR4AWN8z4AApHJGOaOcUc4o
58EoBwAEU2BVnlI2JgAAAABJRU5ErkJggg==

------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://clang.llvm.org/docs/_static/alert_info_32.png

iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEL0lEQVR4AbXXA4xkWR8F8PN9a/Nu
dFe1SQZvM0ZvKmPVdiZj27Zt27Zt27Zt2zPNs2dSL5nKGPX+yS83zXve/zTxhvlSGshuiXbtkvry
JTyeX+UAkrSgCayiidxNpFtNJBhMoKDggPwKj+ZLOYjME2hrPaKvcTx10hQ7R5N5E+GbTKCMG8Kb
TdRHkta0daKYpz/ZZQmZZwCpl2nyHSFSLCRMXwK5BPXhwewyuTbS1yx4eTyDp17WFs4SESsIoyrQ
ULATHkyUKXCUtiH15CEb0Mum8Cki9VLCDJCOBBDlTYDs22kq3qRtRCZoTp2kXqYJ7CacWQS6E6aT
ZwF2Isk4msh9Wvl5mnJXqZN6Ofj0dgSB9oRp7lkFDWBKEEnmEv7VRMYNOtcEX7YjCXQgTFfJ58kX
4adSH8YSqESY4YQdFTzRR9q5l1ckbCQB7JDyCOMc81fsxWJjLtEJ1Ha/1eq7K+8ozSWflCRSbCac
SQQg4RtGdI5nvpFxLDbuIdPVX0ZfujqEcSQB4atMOOOI1LuIBAuorYQ/gK/WddoGcXQaxTBz1yhG
9rnPzO1uMkWty0xQ8ixtrgM0zhgCXaR32AOUhS87TZnDtDVjaCtH0ZZ7TH/jRwx0u09/fX1nJOhB
oIN0lb4CCe/8DVja6rq8YhRNyUc0BR/Q5LxLoK20k47SXfoJJPxDW+1pgCc0JRSgwH0icMcN0F46
SQ8Z6GGAqlE05RSg6EOaPPeI7LdDAnSRXjLYwwCVdXmZxzSFtf5cWn/WW1SAkP77yFBPAvxfgusv
GVy/idT6M98K6b+b2/+IsAdIKKsTBJrQltfTF3u6frf/jDepACH9D5BRYQvwubQxTmZmb72OBUdE
UesP9p/L7T/dDbf/ztJTBsmYsAU44q86iCUm3GHJyXEsOiZW63/87NtP64dfAdAh5AfQEBkvoJSU
gs/JLf9KQPK7ApJKvsdzQ3/nOBYcG8fS0+JYbIIClHiuf//1kP77ynDCzCasXocEsQDWSBspJAXf
oID8hZChrR9HWzuWqVtFM9/QGLd/d/3qHxHX3f67S3/CzCOc40SSszqPET6FMdUI4JoUfAt5EDLH
TLrutOXO01Z+rv+sbv+pr4X0v4CwB4kECuCcUYhzQb4dBMC3DJDp+b8DqgLmqkk3lKbwpWD/kc/6
DwboQZglsp2wewnfEcI5pcvPxMNuJrD4bQP8I18Inp+vpQWM8xgRE7T+S8/Wn+IqfYGDTFLyDJ0S
Z+kUPUen2EUmKHiRsOvcyzsKzj/XdaIQv73t/xK/SG8YP+HMVIALVADCuUxfrquMqH2P6Zo/YkSD
O7R+XY5FoZeXFwdhGp+Mh8lJ+NS7oyAJLslFbeMqbYplBBZ4dnnoJJfFMCUVZKUCKIhCAHOkg+eX
h05m2QZTU0E2E2jnzeVv8cuqoBz70Mv/A5AU9pQn0/8nAAAAAElFTkSuQmCC

------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://clang.llvm.org/docs/_static/bullet_orange.png

iVBORw0KGgoAAAANSUhEUgAAAAYAAAAGCAIAAABvrngfAAAAbElEQVR4AWP4/+XF/6Pd/xfagNDB
pn8fnzIA+SD0cM//e1v/76n6vrOeASgJ4p9u/b+/5P+Zye87tBj+zzH/f2M1iL879//Rtgd1WgxA
/UD1QHkg//+WvMer6hmA5gH1v2rVAso/WFn//c1TADSfT+AZc4VsAAAAAElFTkSuQmCC

------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/_static/graphviz.css?v=eafc0fe6

@charset "utf-8";

img.graphviz { border: 0px; max-width: 100%; }

object.graphviz { max-width: 100%; }
------MultipartBoundary--0eacsLQiljHKupag23i3jYWJiFxYhqjB4N1Um7nE8y------
